[{"/home/swastikksi/Documents/react/twilio-Ksolves/src/index.js":"1","/home/swastikksi/Documents/react/twilio-Ksolves/src/reportWebVitals.js":"2","/home/swastikksi/Documents/react/twilio-Ksolves/src/App.js":"3","/home/swastikksi/Documents/react/twilio-Ksolves/src/HomePage.js":"4","/home/swastikksi/Documents/react/twilio-Ksolves/src/Components/LoginPage.js":"5","/home/swastikksi/Documents/react/twilio-Ksolves/src/Pages/CallingTwilio.js":"6","/home/swastikksi/Documents/react/twilio-Ksolves/src/Components/SignUpPage.js":"7","/home/swastikksi/Documents/react/twilio-Ksolves/src/Components/Navbar.js":"8","/home/swastikksi/Documents/react/twilio-Ksolves/src/Components/InputField.js":"9","/home/swastikksi/Documents/react/twilio-Ksolves/src/Schema.jsx":"10"},{"size":627,"mtime":1688450146790,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1688450146790,"results":"13","hashOfConfig":"12"},{"size":592,"mtime":1688450146790,"results":"14","hashOfConfig":"12"},{"size":178,"mtime":1688450146790,"results":"15","hashOfConfig":"12"},{"size":2343,"mtime":1688450146790,"results":"16","hashOfConfig":"12"},{"size":5752,"mtime":1688643419496,"results":"17","hashOfConfig":"12"},{"size":11227,"mtime":1688450146790,"results":"18","hashOfConfig":"12"},{"size":1542,"mtime":1688450146790,"results":"19","hashOfConfig":"12"},{"size":514,"mtime":1688450146790,"results":"20","hashOfConfig":"12"},{"size":696,"mtime":1688450146790,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"bruiyf",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"25"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"25"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/home/swastikksi/Documents/react/twilio-Ksolves/src/index.js",[],[],[],"/home/swastikksi/Documents/react/twilio-Ksolves/src/reportWebVitals.js",[],[],"/home/swastikksi/Documents/react/twilio-Ksolves/src/App.js",[],[],"/home/swastikksi/Documents/react/twilio-Ksolves/src/HomePage.js",[],[],"/home/swastikksi/Documents/react/twilio-Ksolves/src/Components/LoginPage.js",["56"],[],"import { memo } from \"react\";\nimport NavbarUpper from \"./Navbar\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport React from \"react\";\nimport { useFormik } from \"formik\";\nimport { signUpSChema } from \"../Schema\";\nconst SignupInput = React.lazy(() => import(\"./InputField\"));\nconst initialValues = {\n  email: \"\",\n  phoneNumber: \"\",\n  password: \"\",\n};\nconst LogInPage = () => {\n  const { values, errors, handleBlur, handleChange, handleSubmit, touched } =\n    useFormik({\n      initialValues: initialValues,\n      validationSchema: signUpSChema,\n      onSubmit: (value, action) => (console.log(value), action.resetForm()),\n    });\n  return (\n    <>\n      <NavbarUpper />\n      <div className=\"container col-md-5\">\n        <Card className=\"text-center mt-3\">\n          <Card.Header>\n            <h2>LogIn Form</h2>\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={handleSubmit}>\n              <Row>\n                <Col>\n                  <SignupInput\n                    placeholder=\"Email\"\n                    name=\"email\"\n                    value={values.email}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    type=\"email\"\n                  />\n                  {errors.email && touched.email ? (\n                    <p style={{ color: \"red\" }}>{errors.email}</p>\n                  ) : null}\n                </Col>\n              </Row>\n\n              <Row>\n                <Col>\n                  <SignupInput\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    value={values.password}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    type=\"password\"\n                  />\n                  {errors.password && touched.password ? (\n                    <p style={{ color: \"red\" }}>{errors.password}</p>\n                  ) : null}\n                </Col>\n              </Row>\n              <Button variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      </div>\n    </>\n  );\n};\nexport default memo(LogInPage);\n","/home/swastikksi/Documents/react/twilio-Ksolves/src/Pages/CallingTwilio.js",["57","58","59","60","61"],[],"/home/swastikksi/Documents/react/twilio-Ksolves/src/Components/SignUpPage.js",["62","63","64"],[],"import { memo } from \"react\";\nimport NavbarUpper from \"./Navbar\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport React, { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { signUpSChema } from \"../Schema\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nconst SignupInput = React.lazy(() => import(\"./InputField\"));\n// import { useState } from \"react\";\nconst initialValues = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  phoneNumber: \"\",\n  dob: \"\",\n  country: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n};\n\nconst SignUpPage = () => {\n  const { values, errors, handleBlur, handleChange, handleSubmit, touched } =\n    useFormik({\n      initialValues: initialValues,\n      validationSchema: signUpSChema,\n      onSubmit: (value, action) => (console.log(value), action.resetForm()),\n    });\n  return (\n    <>\n      <NavbarUpper />\n      <div className=\"container col-md-9\">\n        <Card className=\"text-center\">\n          <Card.Header>\n            <h2>Sign Up Form</h2>\n          </Card.Header>\n          <Card.Body>\n            <Form onSubmit={handleSubmit}>\n              <Row>\n                <Col>\n                  <SignupInput\n                    placeholder=\"First Name\"\n                    name=\"firstName\"\n                    value={values.firstName}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    type=\"text\"\n                  />\n                  {errors.firstName && touched.firstName ? (\n                    <p style={{ color: \"red\" }}>{errors.firstName}</p>\n                  ) : null}\n                </Col>\n                <Col>\n                  <SignupInput\n                    placeholder=\"Last Name\"\n                    name=\"lastName\"\n                    value={values.lastName}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    type=\"text\"\n                  />\n                  {errors.lastName && touched.lastName ? (\n                    <p style={{ color: \"red\" }}>{errors.lastName}</p>\n                  ) : null}\n                </Col>\n              </Row>\n\n              <Row>\n                <Col>\n                  <SignupInput\n                    placeholder=\"Email\"\n                    name=\"email\"\n                    value={values.email}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    type=\"email\"\n                  />\n                  {errors.email && touched.email ? (\n                    <p style={{ color: \"red\" }}>{errors.email}</p>\n                  ) : null}\n                </Col>\n                <Col>\n                  <SignupInput\n                    placeholder=\"Phone Number\"\n                    name=\"phoneNumber\"\n                    value={values.phoneNumber}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    type=\"number\"\n                  />\n                  {errors.phoneNumber && touched.phoneNumber ? (\n                    <p style={{ color: \"red\" }}>{errors.phoneNumber}</p>\n                  ) : null}\n                </Col>\n              </Row>\n\n              <Row>\n                <Col>\n                  <SignupInput\n                    placeholder=\"DOB\"\n                    name=\"dob\"\n                    value={values.dob}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    type=\"date\"\n                  />\n                  {errors.dob && touched.dob ? (\n                    <p style={{ color: \"red\" }}>{errors.dob}</p>\n                  ) : null}\n                </Col>\n                <Col>\n                  <SignupInput\n                    placeholder=\"Country\"\n                    name=\"country\"\n                    value={values.country}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    type=\"text\"\n                  />\n                  {errors.country && touched.country ? (\n                    <p style={{ color: \"red\" }}>{errors.country}</p>\n                  ) : null}\n                </Col>\n              </Row>\n\n              <Row>\n                <Col>\n                  <SignupInput\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    value={values.password}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    type=\"password\"\n                  />\n                  {errors.password && touched.password ? (\n                    <p style={{ color: \"red\" }}>{errors.password}</p>\n                  ) : null}\n                </Col>\n                <Col>\n                  <SignupInput\n                    placeholder=\"Confirm Password\"\n                    name=\"confirmPassword\"\n                    value={values.confirmPassword}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    type=\"password\"\n                  />\n                  {errors.confirmPassword && touched.confirmPassword ? (\n                    <p style={{ color: \"red\" }}>{errors.confirmPassword}</p>\n                  ) : null}\n                </Col>\n              </Row>\n              <Button variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      </div>\n    </>\n  );\n};\nexport default memo(SignUpPage);\n\n// const SignUpPage = () => {\n//   const [initialFormValues, setINitialFormValues] = useState({\n//     fname: \"\",\n//     lname: \"\",\n//     email: \"\",\n//     number: \"\",\n//     date : \"\",\n//     country : \"\",\n//     password : \"\",\n//     onfirmPassword: \"\",\n//   });\n//   const handleInput = (e) => {\n//     const name = e.target.name;\n//     const value = e.target.value;\n//     setINitialFormValues({ ...initialFormValues, [name]: value });\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     console.log(initialFormValues);\n//     setINitialFormValues({\n//       fname: \"\",\n//       lname: \"\",\n//       email: \"\",\n//       number: \"\",\n//       date : \"\",\n//       country : \"\",\n//       password : \"\",\n//       confirmPassword: \"\",\n//     })\n//   };\n//   return (\n//     <>\n//     <NavbarUpper />\n//       <div className=\"container col-md-5\">\n//         <Card className=\"text-center mt-3\">\n//           <Card.Header>\n//             <h2>LogIn Form</h2>\n//           </Card.Header>\n//           <Card.Body>\n//             <Form onSubmit={handleSubmit}>\n//               <Row>\n//                 <Col>\n//                   <InputGroup className=\"mb-3\">\n//                     <Form.Control\n//                       placeholder=\"First Name\"\n//                       name=\"fname\"\n//                       type=\"text\"\n//                       value={initialFormValues.fname}\n//                       onChange={handleInput}\n//                       required\n//                       // onBlur={onBlur}\n//                     />\n//                   </InputGroup>\n//                 </Col>\n//                 <Col>\n//                   <InputGroup className=\"mb-3\">\n//                     <Form.Control\n//                       placeholder=\"Last Name\"\n//                       name=\"lname\"\n//                       type=\"text\"\n//                       value={initialFormValues.lname}\n//                       onChange={handleInput}\n//                       required\n//                       // onBlur={onBlur}\n//                     />\n//                   </InputGroup>\n//                 </Col>\n//               </Row>\n\n//               <Row>\n//                 <Col>\n//                   <InputGroup className=\"mb-3\">\n//                     <Form.Control\n//                       placeholder=\"Email Name\"\n//                       name=\"email\"\n//                       type=\"email\"\n//                       value={initialFormValues.email}\n//                       onChange={handleInput}\n//                       required\n//                       // onBlur={onBlur}\n//                     />\n//                   </InputGroup>\n//                 </Col>\n//                 <Col>\n//                   <InputGroup className=\"mb-3\">\n//                     <Form.Control\n//                       placeholder=\"Number\"\n//                       name=\"number\"\n//                       type=\"number\"\n//                       value={initialFormValues.number}\n//                       onChange={handleInput}\n//                       required\n//                       // onBlur={onBlur}\n//                     />\n//                   </InputGroup>\n//                 </Col>\n//               </Row>\n\n//               <Row>\n//                 <Col>\n//                   <InputGroup className=\"mb-3\">\n//                     <Form.Control\n//                       // placeholder=\"\"\n//                       name=\"date\"\n//                       type=\"date\"\n//                       value={initialFormValues.date}\n//                       onChange={handleInput}\n//                       required\n//                       // onBlur={onBlur}\n//                     />\n//                   </InputGroup>\n//                 </Col>\n//                 <Col>\n//                   <InputGroup className=\"mb-3\">\n//                     <Form.Control\n//                       placeholder=\"country\"\n//                       name=\"country\"\n//                       type=\"text\"\n//                       value={initialFormValues.country}\n//                       onChange={handleInput}\n//                       required\n//                       // onBlur={onBlur}\n//                     />\n//                   </InputGroup>\n//                 </Col>\n//               </Row>\n\n//               <Row>\n//                 <Col>\n//                   <InputGroup className=\"mb-3\">\n//                     <Form.Control\n//                       placeholder=\"Password\"\n//                       name=\"password\"\n//                       type=\"password\"\n//                       value={initialFormValues.password}\n//                       onChange={handleInput}\n//                       required\n//                       // onBlur={onBlur}\n//                     />\n//                   </InputGroup>\n//                 </Col>\n//                 <Col>\n//                   <InputGroup className=\"mb-3\">\n//                     <Form.Control\n//                       placeholder=\"Confirm Password\"\n//                       name=\"confirmPassword\"\n//                       type=\"password\"\n//                       value={initialFormValues.confirmPassword}\n//                       onChange={handleInput}\n//                       required\n//                       // onBlur={onBlur}\n//                     />\n//                   </InputGroup>\n//                 </Col>\n//               </Row>\n\n//               <Button variant=\"primary\" type=\"submit\">\n//                 submit\n//               </Button>\n//             </Form>\n//           </Card.Body>\n//         </Card>\n//       </div>\n//     </>\n//   );\n// };\n// export default SignUpPage;\n","/home/swastikksi/Documents/react/twilio-Ksolves/src/Components/Navbar.js",["65","66","67"],[],"import { memo } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { useLocation } from \"react-router-dom\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nconst NavbarUpper = () => {\n  const { pathname } = useLocation();\n  return (\n    <>\n      <Navbar\n        // data-bs-theme=\"dark\"\n        style={{ backgroundColor: \"rgb(59, 142, 77)\" }}\n      >\n        <Container>\n          <Navbar.Brand href=\"/\" className=\"textColor\">\n            LEAD MVP\n          </Navbar.Brand>\n          <Nav className=\"navDisplay\">\n            <NavDropdown title=\"Services\">\n              <NavDropdown.Item href=\"#action/3.1\">TASK 1</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">TASK 2</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">TASK 3</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">\n                ANOTHER LINK\n              </NavDropdown.Item>\n            </NavDropdown>\n            {pathname != \"/LogIn\" ? (\n              <Nav.Link href=\"/calling\">Calling</Nav.Link>\n            ) : null}\n            {pathname != \"/SignUpPage\" ? (\n              <Nav.Link href=\"/SignUpPage\">SignUp</Nav.Link>\n            ) : null}\n            {pathname != \"/LogIn\" ? (\n              <Nav.Link href=\"/LogIn\">LogIn</Nav.Link>\n            ) : null}\n          </Nav>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\nexport default memo(NavbarUpper);\n","/home/swastikksi/Documents/react/twilio-Ksolves/src/Components/InputField.js",[],[],"/home/swastikksi/Documents/react/twilio-Ksolves/src/Schema.jsx",[],[],{"ruleId":"68","severity":1,"message":"69","line":22,"column":55,"nodeType":"70","messageId":"71","endLine":22,"endColumn":56},{"ruleId":"72","severity":1,"message":"73","line":16,"column":6,"nodeType":"74","endLine":16,"endColumn":8,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":27,"column":12,"nodeType":"78","messageId":"79","endLine":27,"endColumn":25},{"ruleId":"76","severity":1,"message":"80","line":159,"column":12,"nodeType":"78","messageId":"79","endLine":159,"endColumn":30},{"ruleId":"76","severity":1,"message":"81","line":166,"column":12,"nodeType":"78","messageId":"79","endLine":166,"endColumn":30},{"ruleId":"76","severity":1,"message":"82","line":173,"column":12,"nodeType":"78","messageId":"79","endLine":173,"endColumn":30},{"ruleId":"76","severity":1,"message":"83","line":8,"column":17,"nodeType":"78","messageId":"79","endLine":8,"endColumn":25},{"ruleId":"76","severity":1,"message":"84","line":11,"column":8,"nodeType":"78","messageId":"79","endLine":11,"endColumn":18},{"ruleId":"68","severity":1,"message":"69","line":30,"column":55,"nodeType":"70","messageId":"71","endLine":30,"endColumn":56},{"ruleId":"85","severity":1,"message":"86","line":29,"column":23,"nodeType":"87","messageId":"88","endLine":29,"endColumn":25},{"ruleId":"85","severity":1,"message":"86","line":32,"column":23,"nodeType":"87","messageId":"88","endLine":32,"endColumn":25},{"ruleId":"85","severity":1,"message":"86","line":35,"column":23,"nodeType":"87","messageId":"88","endLine":35,"endColumn":25},"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setupClientForCall'. Either include it or remove the dependency array.","ArrayExpression",["89"],"no-unused-vars","'sendVoiceCall' is defined but never used.","Identifier","unusedVar","'acceptIncomingCall' is defined but never used.","'rejectIncomingCall' is defined but never used.","'hangupIncomingCall' is defined but never used.","'useState' is defined but never used.","'InputGroup' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",{"desc":"90","fix":"91"},"Update the dependencies array to be: [setupClientForCall]",{"range":"92","text":"93"},[525,527],"[setupClientForCall]"]