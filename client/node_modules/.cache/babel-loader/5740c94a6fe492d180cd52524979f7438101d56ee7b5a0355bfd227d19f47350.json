{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @module Voice\n */\nvar constants_1 = require(\"./constants\");\nvar errors_1 = require(\"./errors\");\nvar DEFAULT_TEST_SOUND_URL = constants_1.SOUNDS_BASE_URL + \"/outgoing.mp3\";\n/**\n * A smart collection containing a Set of active output devices.\n * @publicapi\n */\nvar OutputDeviceCollection = /** @class */function () {\n  /**\n   * @private\n   */\n  function OutputDeviceCollection(_name, _availableDevices, _beforeChange, _isSupported) {\n    this._name = _name;\n    this._availableDevices = _availableDevices;\n    this._beforeChange = _beforeChange;\n    this._isSupported = _isSupported;\n    /**\n     * The currently active output devices.\n     */\n    this._activeDevices = new Set();\n  }\n  /**\n   * Delete a device from the collection. If no devices remain, the 'default'\n   * device will be added as the sole device. If no `default` device exists,\n   * the first available device will be used.\n   * @param device - The device to delete from the collection\n   * @returns whether the device was present before it was deleted\n   */\n  OutputDeviceCollection.prototype.delete = function (device) {\n    var wasDeleted = !!this._activeDevices.delete(device);\n    var defaultDevice = this._availableDevices.get('default') || Array.from(this._availableDevices.values())[0];\n    if (!this._activeDevices.size && defaultDevice) {\n      this._activeDevices.add(defaultDevice);\n    }\n    // Call _beforeChange so that the implementation can react when a device is\n    // removed or lost.\n    var deviceIds = Array.from(this._activeDevices.values()).map(function (deviceInfo) {\n      return deviceInfo.deviceId;\n    });\n    this._beforeChange(this._name, deviceIds);\n    return !!wasDeleted;\n  };\n  /**\n   * Get the current set of devices.\n   */\n  OutputDeviceCollection.prototype.get = function () {\n    return this._activeDevices;\n  };\n  /**\n   * Replace the current set of devices with a new set of devices.\n   * @param deviceIdOrIds - An ID or array of IDs of devices to replace the existing devices with.\n   * @returns Rejects if this feature is not supported, any of the supplied IDs are not found,\n   * or no IDs are passed.\n   */\n  OutputDeviceCollection.prototype.set = function (deviceIdOrIds) {\n    var _this = this;\n    if (!this._isSupported) {\n      return Promise.reject(new errors_1.NotSupportedError('This browser does not support audio output selection'));\n    }\n    var deviceIds = Array.isArray(deviceIdOrIds) ? deviceIdOrIds : [deviceIdOrIds];\n    if (!deviceIds.length) {\n      return Promise.reject(new errors_1.InvalidArgumentError('Must specify at least one device to set'));\n    }\n    var missingIds = [];\n    var devices = deviceIds.map(function (id) {\n      var device = _this._availableDevices.get(id);\n      if (!device) {\n        missingIds.push(id);\n      }\n      return device;\n    });\n    if (missingIds.length) {\n      return Promise.reject(new errors_1.InvalidArgumentError(\"Devices not found: \" + missingIds.join(', ')));\n    }\n    return new Promise(function (resolve) {\n      resolve(_this._beforeChange(_this._name, deviceIds));\n    }).then(function () {\n      _this._activeDevices.clear();\n      devices.forEach(_this._activeDevices.add, _this._activeDevices);\n    });\n  };\n  /**\n   * Test the devices by playing audio through them.\n   * @param [soundUrl] - An optional URL. If none is specified, we will\n   *   play a default test tone.\n   * @returns Resolves with the result of the underlying HTMLAudioElements' play() calls.\n   */\n  OutputDeviceCollection.prototype.test = function (soundUrl) {\n    if (soundUrl === void 0) {\n      soundUrl = DEFAULT_TEST_SOUND_URL;\n    }\n    if (!this._isSupported) {\n      return Promise.reject(new errors_1.NotSupportedError('This browser does not support audio output selection'));\n    }\n    if (!this._activeDevices.size) {\n      return Promise.reject(new errors_1.InvalidStateError('No active output devices to test'));\n    }\n    return Promise.all(Array.from(this._activeDevices).map(function (device) {\n      var el;\n      // (rrowland) We need to wait for the oncanplay event because of a regression introduced\n      // in Chrome M72: https://bugs.chromium.org/p/chromium/issues/detail?id=930876\n      return new Promise(function (resolve) {\n        el = new Audio(soundUrl);\n        el.oncanplay = resolve;\n      }).then(function () {\n        return el.setSinkId(device.deviceId).then(function () {\n          return el.play();\n        });\n      });\n    }));\n  };\n  return OutputDeviceCollection;\n}();\nexports.default = OutputDeviceCollection;","map":{"version":3,"names":["constants_1","require","errors_1","DEFAULT_TEST_SOUND_URL","SOUNDS_BASE_URL","OutputDeviceCollection","_name","_availableDevices","_beforeChange","_isSupported","_activeDevices","Set","prototype","delete","device","wasDeleted","defaultDevice","get","Array","from","values","size","add","deviceIds","map","deviceInfo","deviceId","set","deviceIdOrIds","_this","Promise","reject","NotSupportedError","isArray","length","InvalidArgumentError","missingIds","devices","id","push","join","resolve","then","clear","forEach","test","soundUrl","InvalidStateError","all","el","Audio","oncanplay","setSinkId","play"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/@twilio/voice-sdk/lib/twilio/outputdevicecollection.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n */\nimport { SOUNDS_BASE_URL } from './constants';\nimport { InvalidArgumentError, InvalidStateError, NotSupportedError } from './errors';\nconst DEFAULT_TEST_SOUND_URL = `${SOUNDS_BASE_URL}/outgoing.mp3`;\n\n/**\n * A smart collection containing a Set of active output devices.\n * @publicapi\n */\nexport default class OutputDeviceCollection {\n  /**\n   * The currently active output devices.\n   */\n  private _activeDevices: Set<MediaDeviceInfo> = new Set();\n\n  /**\n   * @private\n   */\n  constructor(private _name: string,\n              private _availableDevices: Map<string, MediaDeviceInfo>,\n              private _beforeChange: (name: string, devices: string[]) => Promise<void>,\n              private _isSupported: boolean) { }\n\n  /**\n   * Delete a device from the collection. If no devices remain, the 'default'\n   * device will be added as the sole device. If no `default` device exists,\n   * the first available device will be used.\n   * @param device - The device to delete from the collection\n   * @returns whether the device was present before it was deleted\n   */\n  delete(device: MediaDeviceInfo): boolean {\n    const wasDeleted: boolean = !!(this._activeDevices.delete(device));\n\n    const defaultDevice: MediaDeviceInfo = this._availableDevices.get('default')\n      || Array.from(this._availableDevices.values())[0];\n\n    if (!this._activeDevices.size && defaultDevice) {\n      this._activeDevices.add(defaultDevice);\n    }\n\n    // Call _beforeChange so that the implementation can react when a device is\n    // removed or lost.\n    const deviceIds = Array.from(this._activeDevices.values()).map(deviceInfo => deviceInfo.deviceId);\n\n    this._beforeChange(this._name, deviceIds);\n    return !!wasDeleted;\n  }\n\n  /**\n   * Get the current set of devices.\n   */\n  get(): Set<MediaDeviceInfo> {\n    return this._activeDevices;\n  }\n\n  /**\n   * Replace the current set of devices with a new set of devices.\n   * @param deviceIdOrIds - An ID or array of IDs of devices to replace the existing devices with.\n   * @returns Rejects if this feature is not supported, any of the supplied IDs are not found,\n   * or no IDs are passed.\n   */\n  set(deviceIdOrIds: string | string[]): Promise<void> {\n    if (!this._isSupported) {\n      return Promise.reject(new NotSupportedError('This browser does not support audio output selection'));\n    }\n\n    const deviceIds: string[] = Array.isArray(deviceIdOrIds) ? deviceIdOrIds : [deviceIdOrIds];\n\n    if (!deviceIds.length) {\n      return Promise.reject(new InvalidArgumentError('Must specify at least one device to set'));\n    }\n\n    const missingIds: string[] = [];\n    const devices: Array<MediaDeviceInfo | undefined> = deviceIds.map((id: string) => {\n      const device: MediaDeviceInfo | undefined = this._availableDevices.get(id);\n      if (!device) { missingIds.push(id); }\n      return device;\n    });\n\n    if (missingIds.length) {\n      return Promise.reject(new InvalidArgumentError(`Devices not found: ${missingIds.join(', ')}`));\n    }\n\n    return new Promise(resolve => {\n      resolve(this._beforeChange(this._name, deviceIds));\n    }).then(() => {\n      this._activeDevices.clear();\n      devices.forEach(this._activeDevices.add, this._activeDevices);\n    });\n  }\n\n  /**\n   * Test the devices by playing audio through them.\n   * @param [soundUrl] - An optional URL. If none is specified, we will\n   *   play a default test tone.\n   * @returns Resolves with the result of the underlying HTMLAudioElements' play() calls.\n   */\n  test(soundUrl: string = DEFAULT_TEST_SOUND_URL): Promise<any> {\n    if (!this._isSupported) {\n      return Promise.reject(new NotSupportedError('This browser does not support audio output selection'));\n    }\n\n    if (!this._activeDevices.size) {\n      return Promise.reject(new InvalidStateError('No active output devices to test'));\n    }\n\n    return Promise.all(Array.from(this._activeDevices).map((device: MediaDeviceInfo) => {\n      let el: HTMLAudioElement;\n\n      // (rrowland) We need to wait for the oncanplay event because of a regression introduced\n      // in Chrome M72: https://bugs.chromium.org/p/chromium/issues/detail?id=930876\n      return new Promise((resolve: Function) => {\n        el = new Audio(soundUrl);\n        (el as any).oncanplay = resolve;\n      }).then(() => (el as any).setSinkId(device.deviceId).then(() => el.play()));\n    }));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}