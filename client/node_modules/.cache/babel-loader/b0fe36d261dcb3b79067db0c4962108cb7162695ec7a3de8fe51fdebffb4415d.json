{"ast":null,"code":"\"use strict\";\n\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = void 0;\nvar LogLevelModule = require(\"loglevel\");\nvar constants_1 = require(\"./constants\");\n/**\n * {@link Log} provides logging features throught the sdk using loglevel module\n * See https://github.com/pimterry/loglevel for documentation\n */\nvar Log = /** @class */function () {\n  /**\n   * @constructor\n   * @param [options] - Optional settings\n   */\n  function Log(options) {\n    try {\n      this._log = (options && options.LogLevelModule ? options.LogLevelModule : LogLevelModule).getLogger(constants_1.PACKAGE_NAME);\n    } catch (_a) {\n      // tslint:disable-next-line\n      console.warn('Cannot create custom logger');\n      this._log = console;\n    }\n  }\n  /**\n   * Create the logger singleton instance if it doesn't exists\n   * @returns The singleton {@link Log} instance\n   */\n  Log.getInstance = function () {\n    if (!Log.instance) {\n      Log.instance = new Log();\n    }\n    return Log.instance;\n  };\n  /**\n   * Log a debug message\n   * @param args - Any number of arguments to be passed to loglevel.debug\n   */\n  Log.prototype.debug = function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    (_a = this._log).debug.apply(_a, args);\n  };\n  /**\n   * Log an error message\n   * @param args - Any number of arguments to be passed to loglevel.error\n   */\n  Log.prototype.error = function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    (_a = this._log).error.apply(_a, args);\n  };\n  /**\n   * Return the `loglevel` instance maintained internally.\n   * @returns The `loglevel` instance.\n   */\n  Log.prototype.getLogLevelInstance = function () {\n    return this._log;\n  };\n  /**\n   * Log an info message\n   * @param args - Any number of arguments to be passed to loglevel.info\n   */\n  Log.prototype.info = function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    (_a = this._log).info.apply(_a, args);\n  };\n  /**\n   * Set a default log level to disable all logging below the given level\n   */\n  Log.prototype.setDefaultLevel = function (level) {\n    if (this._log.setDefaultLevel) {\n      this._log.setDefaultLevel(level);\n    } else {\n      // tslint:disable-next-line\n      console.warn('Logger cannot setDefaultLevel');\n    }\n  };\n  /**\n   * Log a warning message\n   * @param args - Any number of arguments to be passed to loglevel.warn\n   */\n  Log.prototype.warn = function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    (_a = this._log).warn.apply(_a, args);\n  };\n  /**\n   * Log levels\n   */\n  Log.levels = LogLevelModule.levels;\n  return Log;\n}();\nexports.Logger = Log.getInstance().getLogLevelInstance();\nexports.default = Log;","map":{"version":3,"names":["LogLevelModule","require","constants_1","Log","options","_log","getLogger","PACKAGE_NAME","_a","console","warn","getInstance","instance","prototype","debug","args","_i","arguments","length","apply","error","getLogLevelInstance","info","setDefaultLevel","level","levels","exports","Logger","default"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/@twilio/voice-sdk/lib/twilio/log.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n\nimport * as LogLevelModule from 'loglevel';\nimport { PACKAGE_NAME } from './constants';\n\n/**\n * Options that may be passed to the {@link Log} constructor for internal testing.\n * @private\n */\nexport interface LogOptions {\n  /**\n   * Custom loglevel module\n   */\n  LogLevelModule: any;\n}\n\n/**\n * {@link Log} provides logging features throught the sdk using loglevel module\n * See https://github.com/pimterry/loglevel for documentation\n */\nclass Log {\n  /**\n   * Log levels\n   */\n  static levels: LogLevelModule.LogLevel = LogLevelModule.levels;\n\n  /**\n   * Create the logger singleton instance if it doesn't exists\n   * @returns The singleton {@link Log} instance\n   */\n  static getInstance(): Log {\n    if (!Log.instance) {\n      Log.instance = new Log();\n    }\n    return Log.instance;\n  }\n\n  /**\n   * The logger singleton instance\n   */\n  private static instance: Log;\n\n  /**\n   * The loglevel logger instance that will be used in this {@link Log}\n   */\n  private _log: LogLevelModule.Logger;\n\n  /**\n   * @constructor\n   * @param [options] - Optional settings\n   */\n  constructor(options?: LogOptions) {\n    try {\n      this._log = (options && options.LogLevelModule ? options.LogLevelModule : LogLevelModule).getLogger(PACKAGE_NAME);\n    } catch {\n      // tslint:disable-next-line\n      console.warn('Cannot create custom logger');\n      this._log = console as any;\n    }\n  }\n\n  /**\n   * Log a debug message\n   * @param args - Any number of arguments to be passed to loglevel.debug\n   */\n  debug(...args: any[]): void {\n    this._log.debug(...args);\n  }\n\n  /**\n   * Log an error message\n   * @param args - Any number of arguments to be passed to loglevel.error\n   */\n  error(...args: any[]): void {\n    this._log.error(...args);\n  }\n\n  /**\n   * Return the `loglevel` instance maintained internally.\n   * @returns The `loglevel` instance.\n   */\n  getLogLevelInstance(): LogLevelModule.Logger {\n    return this._log;\n  }\n\n  /**\n   * Log an info message\n   * @param args - Any number of arguments to be passed to loglevel.info\n   */\n  info(...args: any[]): void {\n    this._log.info(...args);\n  }\n\n  /**\n   * Set a default log level to disable all logging below the given level\n   */\n  setDefaultLevel(level: LogLevelModule.LogLevelDesc): void {\n    if (this._log.setDefaultLevel) {\n      this._log.setDefaultLevel(level);\n    } else {\n      // tslint:disable-next-line\n      console.warn('Logger cannot setDefaultLevel');\n    }\n  }\n\n  /**\n   * Log a warning message\n   * @param args - Any number of arguments to be passed to loglevel.warn\n   */\n  warn(...args: any[]): void {\n    this._log.warn(...args);\n  }\n}\n\nexport const Logger = Log.getInstance().getLogLevelInstance();\n\nexport default Log;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}