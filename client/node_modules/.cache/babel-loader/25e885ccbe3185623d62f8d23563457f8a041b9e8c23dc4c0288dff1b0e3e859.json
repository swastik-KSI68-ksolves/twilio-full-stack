{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @module Voice\n * @preferred\n * @publicapi\n */\nvar events_1 = require(\"events\");\nvar audiohelper_1 = require(\"./audiohelper\");\nvar connection_1 = require(\"./connection\");\nvar dialtonePlayer_1 = require(\"./dialtonePlayer\");\nvar errors_1 = require(\"./errors\");\nvar log_1 = require(\"./log\");\nvar preflight_1 = require(\"./preflight/preflight\");\nvar regions_1 = require(\"./regions\");\nvar util_1 = require(\"./util\");\nvar C = require('./constants');\nvar Publisher = require('./eventpublisher');\nvar PStream = require('./pstream');\nvar rtc = require('./rtc');\nvar getUserMedia = require('./rtc/getusermedia');\nvar Sound = require('./sound');\nvar REGISTRATION_INTERVAL = 30000;\nvar RINGTONE_PLAY_TIMEOUT = 2000;\nvar hasBeenWarnedHandlers = false;\nvar hasBeenWarnedSounds = false;\n/**\n * Twilio Device. Allows registration for incoming calls, and placing outgoing calls.\n * @publicapi\n */\nvar Device = /** @class */function (_super) {\n  __extends(Device, _super);\n  function Device(token, options) {\n    var _a;\n    var _this = _super.call(this) || this;\n    /**\n     * The AudioHelper instance associated with this {@link Device}.\n     */\n    _this.audio = null;\n    /**\n     * An array of {@link Connection}s. Though only one can be active, multiple may exist when there\n     * are multiple incoming, unanswered {@link Connection}s.\n     */\n    _this.connections = [];\n    /**\n     * Whether or not {@link Device.setup} has been called.\n     */\n    _this.isInitialized = false;\n    /**\n     * Methods to enable/disable each sound. Empty if the {@link Device} has not\n     * yet been set up.\n     */\n    _this.sounds = {};\n    /**\n     * The JWT string currently being used to authenticate this {@link Device}.\n     */\n    _this.token = null;\n    /**\n     * The currently active {@link Connection}, if there is one.\n     */\n    _this._activeConnection = null;\n    /**\n     * The list of chunder URIs that will be passed to PStream\n     */\n    _this._chunderURIs = [];\n    /**\n     * An audio input MediaStream to pass to new {@link Connection} instances.\n     */\n    _this._connectionInputStream = null;\n    /**\n     * An array of {@link Device} IDs to be used to play sounds through, to be passed to\n     * new {@link Connection} instances.\n     */\n    _this._connectionSinkIds = ['default'];\n    /**\n     * The name of the edge the {@link Device} is connected to.\n     */\n    _this._edge = null;\n    /**\n     * Whether each sound is enabled.\n     */\n    _this._enabledSounds = (_a = {}, _a[Device.SoundName.Disconnect] = true, _a[Device.SoundName.Incoming] = true, _a[Device.SoundName.Outgoing] = true, _a);\n    /**\n     * An instance of Logger to use.\n     */\n    _this._log = log_1.default.getInstance();\n    /**\n     * An Insights Event Publisher.\n     */\n    _this._publisher = null;\n    /**\n     * The region the {@link Device} is connected to.\n     */\n    _this._region = null;\n    /**\n     * The current status of the {@link Device}.\n     */\n    _this._status = Device.Status.Offline;\n    /**\n     * Value of 'audio' determines whether we should be registered for incoming calls.\n     */\n    _this.mediaPresence = {\n      audio: true\n    };\n    /**\n     * The options passed to {@link Device} constructor or Device.setup.\n     */\n    _this.options = {\n      allowIncomingWhileBusy: false,\n      audioConstraints: true,\n      closeProtection: false,\n      codecPreferences: [connection_1.default.Codec.PCMU, connection_1.default.Codec.Opus],\n      connectionFactory: connection_1.default,\n      debug: false,\n      dscp: true,\n      enableIceRestart: false,\n      eventgw: 'eventgw.twilio.com',\n      forceAggressiveIceNomination: false,\n      iceServers: [],\n      noRegister: false,\n      pStreamFactory: PStream,\n      preflight: false,\n      rtcConstraints: {},\n      soundFactory: Sound,\n      sounds: {},\n      warnings: true\n    };\n    /**\n     * A timeout ID for a setTimeout schedule to re-register the {@link Device}.\n     */\n    _this.regTimer = null;\n    /**\n     * A Map of Sounds to play.\n     */\n    _this.soundcache = new Map();\n    /**\n     * The Signaling stream.\n     */\n    _this.stream = null;\n    /**\n     * Destroy the {@link Device}, freeing references to be garbage collected.\n     */\n    _this.destroy = function () {\n      _this._disconnectAll();\n      _this._stopRegistrationTimer();\n      if (_this.audio) {\n        _this.audio._unbind();\n      }\n      if (_this.stream) {\n        _this.stream.destroy();\n        _this.stream = null;\n      }\n      if (_this._networkInformation && typeof _this._networkInformation.removeEventListener === 'function') {\n        _this._networkInformation.removeEventListener('change', _this._publishNetworkChange);\n      }\n      if (typeof window !== 'undefined' && window.removeEventListener) {\n        window.removeEventListener('beforeunload', _this._confirmClose);\n        window.removeEventListener('unload', _this.destroy);\n        window.removeEventListener('pagehide', _this.destroy);\n      }\n      events_1.EventEmitter.prototype.removeAllListeners.call(_this);\n    };\n    /**\n     * Called on window's beforeunload event if closeProtection is enabled,\n     * preventing users from accidentally navigating away from an active call.\n     * @param event\n     */\n    _this._confirmClose = function (event) {\n      if (!_this._activeConnection) {\n        return '';\n      }\n      var closeProtection = _this.options.closeProtection || false;\n      var confirmationMsg = typeof closeProtection !== 'string' ? 'A call is currently in-progress. Leaving or reloading this page will end the call.' : closeProtection;\n      (event || window.event).returnValue = confirmationMsg;\n      return confirmationMsg;\n    };\n    /**\n     * Create the default Insights payload\n     * @param [connection]\n     */\n    _this._createDefaultPayload = function (connection) {\n      var payload = {\n        aggressive_nomination: _this.options.forceAggressiveIceNomination,\n        browser_extension: _this._isBrowserExtension,\n        dscp: !!_this.options.dscp,\n        ice_restart_enabled: _this.options.enableIceRestart,\n        platform: rtc.getMediaEngine(),\n        sdk_version: C.RELEASE_VERSION\n      };\n      function setIfDefined(propertyName, value) {\n        if (value) {\n          payload[propertyName] = value;\n        }\n      }\n      if (connection) {\n        var callSid = connection.parameters.CallSid;\n        setIfDefined('call_sid', /^TJ/.test(callSid) ? undefined : callSid);\n        setIfDefined('temp_call_sid', connection.outboundConnectionId);\n        setIfDefined('audio_codec', connection.codec);\n        payload.direction = connection.direction;\n      }\n      setIfDefined('gateway', _this.stream && _this.stream.gateway);\n      setIfDefined('selected_region', _this.options.region);\n      setIfDefined('region', _this.stream && _this.stream.region);\n      return payload;\n    };\n    /**\n     * Disconnect all {@link Connection}s.\n     */\n    _this._disconnectAll = function () {\n      var connections = _this.connections.splice(0);\n      connections.forEach(function (conn) {\n        return conn.disconnect();\n      });\n      if (_this._activeConnection) {\n        _this._activeConnection.disconnect();\n      }\n    };\n    /**\n     * Called when a 'close' event is received from the signaling stream.\n     */\n    _this._onSignalingClose = function () {\n      _this.stream = null;\n    };\n    /**\n     * Called when a 'connected' event is received from the signaling stream.\n     */\n    _this._onSignalingConnected = function (payload) {\n      var region = regions_1.getRegionShortcode(payload.region);\n      _this._edge = regions_1.regionToEdge[region] || payload.region;\n      _this._region = region || payload.region;\n      _this._sendPresence();\n    };\n    /**\n     * Called when an 'error' event is received from the signaling stream.\n     */\n    _this._onSignalingError = function (payload) {\n      if (!payload.error) {\n        return;\n      }\n      var error = __assign({}, payload.error);\n      var sid = payload.callsid;\n      if (sid) {\n        error.connection = _this._findConnection(sid);\n      }\n      if (error.code === 31201) {\n        error.twilioError = new errors_1.AuthorizationErrors.AuthenticationFailed();\n      } else if (error.code === 31204) {\n        error.twilioError = new errors_1.AuthorizationErrors.AccessTokenInvalid();\n      } else if (error.code === 31205) {\n        // Stop trying to register presence after token expires\n        _this._stopRegistrationTimer();\n        error.twilioError = new errors_1.AuthorizationErrors.AccessTokenExpired();\n      } else if (!error.twilioError) {\n        error.twilioError = new errors_1.GeneralErrors.UnknownError();\n      }\n      _this._log.info('Received error: ', error);\n      _this.emit('error', error);\n    };\n    /**\n     * Called when an 'invite' event is received from the signaling stream.\n     */\n    _this._onSignalingInvite = function (payload) {\n      var wasBusy = !!_this._activeConnection;\n      if (wasBusy && !_this.options.allowIncomingWhileBusy) {\n        _this._log.info('Device busy; ignoring incoming invite');\n        return;\n      }\n      if (!payload.callsid || !payload.sdp) {\n        _this.emit('error', {\n          message: 'Malformed invite from gateway',\n          twilioError: new errors_1.ClientErrors.BadRequest()\n        });\n        return;\n      }\n      var callParameters = payload.parameters || {};\n      callParameters.CallSid = callParameters.CallSid || payload.callsid;\n      var customParameters = Object.assign({}, util_1.queryToJson(callParameters.Params));\n      var connection = _this._makeConnection(customParameters, {\n        callParameters: callParameters,\n        offerSdp: payload.sdp\n      });\n      _this.connections.push(connection);\n      connection.once('accept', function () {\n        _this.soundcache.get(Device.SoundName.Incoming).stop();\n        _this._publishNetworkChange();\n      });\n      var play = _this._enabledSounds.incoming && !wasBusy ? function () {\n        return _this.soundcache.get(Device.SoundName.Incoming).play();\n      } : function () {\n        return Promise.resolve();\n      };\n      _this._showIncomingConnection(connection, play);\n    };\n    /**\n     * Called when an 'offline' event is received from the signaling stream.\n     */\n    _this._onSignalingOffline = function () {\n      _this._log.info('Stream is offline');\n      _this._status = Device.Status.Offline;\n      _this._edge = null;\n      _this._region = null;\n      _this.emit('offline', _this);\n    };\n    /**\n     * Called when a 'ready' event is received from the signaling stream.\n     */\n    _this._onSignalingReady = function () {\n      _this._log.info('Stream is ready');\n      _this._status = Device.Status.Ready;\n      _this.emit('ready', _this);\n    };\n    /**\n     * Publish a NetworkInformation#change event to Insights if there's an active {@link Connection}.\n     */\n    _this._publishNetworkChange = function () {\n      if (!_this._activeConnection) {\n        return;\n      }\n      if (_this._networkInformation) {\n        _this._publisher.info('network-information', 'network-change', {\n          connection_type: _this._networkInformation.type,\n          downlink: _this._networkInformation.downlink,\n          downlinkMax: _this._networkInformation.downlinkMax,\n          effective_type: _this._networkInformation.effectiveType,\n          rtt: _this._networkInformation.rtt\n        }, _this._activeConnection);\n      }\n    };\n    /**\n     * Update the input stream being used for calls so that any current call and all future calls\n     * will use the new input stream.\n     * @param inputStream\n     */\n    _this._updateInputStream = function (inputStream) {\n      var connection = _this._activeConnection;\n      if (connection && !inputStream) {\n        return Promise.reject(new errors_1.InvalidStateError('Cannot unset input device while a call is in progress.'));\n      }\n      _this._connectionInputStream = inputStream;\n      return connection ? connection._setInputTracksFromStream(inputStream) : Promise.resolve();\n    };\n    /**\n     * Update the device IDs of output devices being used to play sounds through.\n     * @param type - Whether to update ringtone or speaker sounds\n     * @param sinkIds - An array of device IDs\n     */\n    _this._updateSinkIds = function (type, sinkIds) {\n      var promise = type === 'ringtone' ? _this._updateRingtoneSinkIds(sinkIds) : _this._updateSpeakerSinkIds(sinkIds);\n      return promise.then(function () {\n        _this._publisher.info('audio', type + \"-devices-set\", {\n          audio_device_ids: sinkIds\n        }, _this._activeConnection);\n      }, function (error) {\n        _this._publisher.error('audio', type + \"-devices-set-failed\", {\n          audio_device_ids: sinkIds,\n          message: error.message\n        }, _this._activeConnection);\n        throw error;\n      });\n    };\n    if (window) {\n      var root = window;\n      var browser = root.msBrowser || root.browser || root.chrome;\n      _this._isBrowserExtension = !!browser && !!browser.runtime && !!browser.runtime.id || !!root.safari && !!root.safari.extension;\n    }\n    if (_this._isBrowserExtension) {\n      _this._log.info('Running as browser extension.');\n    }\n    if (navigator) {\n      var n = navigator;\n      _this._networkInformation = n.connection || n.mozConnection || n.webkitConnection;\n    }\n    if (token) {\n      _this.setup(token, options);\n    } else if (options) {\n      throw new errors_1.InvalidArgumentError('Cannot construct a Device with options but without a token');\n    }\n    return _this;\n  }\n  Object.defineProperty(Device, \"audioContext\", {\n    /**\n     * The AudioContext to be used by {@link Device} instances.\n     * @private\n     */\n    get: function () {\n      return Device._audioContext;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Device, \"extension\", {\n    /**\n     * Which sound file extension is supported.\n     * @private\n     */\n    get: function () {\n      // NOTE(mroberts): Node workaround.\n      var a = typeof document !== 'undefined' ? document.createElement('audio') : {\n        canPlayType: false\n      };\n      var canPlayMp3;\n      try {\n        canPlayMp3 = a.canPlayType && !!a.canPlayType('audio/mpeg').replace(/no/, '');\n      } catch (e) {\n        canPlayMp3 = false;\n      }\n      var canPlayVorbis;\n      try {\n        canPlayVorbis = a.canPlayType && !!a.canPlayType('audio/ogg;codecs=\\'vorbis\\'').replace(/no/, '');\n      } catch (e) {\n        canPlayVorbis = false;\n      }\n      return canPlayVorbis && !canPlayMp3 ? 'ogg' : 'mp3';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Device, \"isSupported\", {\n    /**\n     * Whether or not this SDK is supported by the current browser.\n     */\n    get: function () {\n      return rtc.enabled();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Device, \"packageName\", {\n    /**\n     * Package name of the SDK.\n     */\n    get: function () {\n      return C.PACKAGE_NAME;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Run some tests to identify issues, if any, prohibiting successful calling.\n   * @param token - A Twilio JWT token string\n   * @param options\n   */\n  Device.runPreflight = function (token, options) {\n    return new preflight_1.PreflightTest(token, __assign({\n      audioContext: Device._getOrCreateAudioContext()\n    }, options));\n  };\n  /**\n   * String representation of {@link Device} class.\n   * @private\n   */\n  Device.toString = function () {\n    return '[Twilio.Device class]';\n  };\n  Object.defineProperty(Device, \"version\", {\n    /**\n     * Current SDK version.\n     */\n    get: function () {\n      return C.RELEASE_VERSION;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Initializes the AudioContext instance shared across the Client SDK,\n   * or returns the existing instance if one has already been initialized.\n   */\n  Device._getOrCreateAudioContext = function () {\n    if (!Device._audioContext) {\n      if (typeof AudioContext !== 'undefined') {\n        Device._audioContext = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Device._audioContext = new webkitAudioContext();\n      }\n    }\n    return Device._audioContext;\n  };\n  /**\n   * Return the active {@link Connection}. Null or undefined for backward compatibility.\n   */\n  Device.prototype.activeConnection = function () {\n    if (!this.isInitialized) {\n      return null;\n    }\n    // @rrowland This should only return activeConnection, but customers have built around this\n    // broken behavior and in order to not break their apps we are including this until\n    // the next big release.\n    return this._activeConnection || this.connections[0];\n  };\n  /**\n   * @deprecated Set a handler for the cancel event.\n   * @param handler\n   */\n  Device.prototype.cancel = function (handler) {\n    return this._addHandler(Device.EventName.Cancel, handler);\n  };\n  Device.prototype.connect = function (paramsOrHandler, audioConstraints, rtcConfiguration) {\n    if (typeof paramsOrHandler === 'function') {\n      this._addHandler(Device.EventName.Connect, paramsOrHandler);\n      return null;\n    }\n    this._throwUnlessSetup('connect');\n    if (this._activeConnection) {\n      throw new errors_1.InvalidStateError('A Connection is already active');\n    }\n    var params = paramsOrHandler || {};\n    audioConstraints = audioConstraints || this.options && this.options.audioConstraints || {};\n    rtcConfiguration = rtcConfiguration || this.options.rtcConfiguration;\n    var connection = this._activeConnection = this._makeConnection(params, {\n      rtcConfiguration: rtcConfiguration\n    });\n    // Make sure any incoming connections are ignored\n    this.connections.splice(0).forEach(function (conn) {\n      return conn.ignore();\n    });\n    // Stop the incoming sound if it's playing\n    this.soundcache.get(Device.SoundName.Incoming).stop();\n    connection.accept(audioConstraints);\n    this._publishNetworkChange();\n    return connection;\n  };\n  /**\n   * Set a handler for the disconnect event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  Device.prototype.disconnect = function (handler) {\n    return this._addHandler(Device.EventName.Disconnect, handler);\n  };\n  /**\n   * Disconnect all {@link Connection}s.\n   */\n  Device.prototype.disconnectAll = function () {\n    this._throwUnlessSetup('disconnectAll');\n    this._disconnectAll();\n  };\n  Object.defineProperty(Device.prototype, \"edge\", {\n    /**\n     * Returns the {@link Edge} value the {@link Device} is currently connected\n     * to. The value will be `null` when the {@link Device} is offline.\n     */\n    get: function () {\n      return this._edge;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Set a handler for the error event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  Device.prototype.error = function (handler) {\n    return this._addHandler(Device.EventName.Error, handler);\n  };\n  /**\n   * Set a handler for the incoming event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  Device.prototype.incoming = function (handler) {\n    return this._addHandler(Device.EventName.Incoming, handler);\n  };\n  /**\n   * Set a handler for the offline event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  Device.prototype.offline = function (handler) {\n    return this._addHandler(Device.EventName.Offline, handler);\n  };\n  /**\n   * Set a handler for the ready event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  Device.prototype.ready = function (handler) {\n    return this._addHandler(Device.EventName.Ready, handler);\n  };\n  /**\n   * Get the {@link Region} string the {@link Device} is currently connected to, or 'offline'\n   * if not connected.\n   */\n  Device.prototype.region = function () {\n    this._log.warn('`Device.region` is deprecated and will be removed in the next major ' + 'release. Please use `Device.edge` instead.');\n    this._throwUnlessSetup('region');\n    return typeof this._region === 'string' ? this._region : 'offline';\n  };\n  /**\n   * Register to receive incoming calls. Does not need to be called unless {@link Device.unregisterPresence}\n   * has been called directly.\n   */\n  Device.prototype.registerPresence = function () {\n    this._throwUnlessSetup('registerPresence');\n    this.mediaPresence.audio = true;\n    this._sendPresence();\n    return this;\n  };\n  /**\n   * Remove an event listener\n   * @param event - The event name to stop listening for\n   * @param listener - The callback to remove\n   */\n  Device.prototype.removeListener = function (event, listener) {\n    events_1.EventEmitter.prototype.removeListener.call(this, event, listener);\n    return this;\n  };\n  /**\n   * Initialize the {@link Device}.\n   * @param token - A Twilio JWT token string granting this {@link Device} access.\n   * @param [options]\n   */\n  Device.prototype.setup = function (token, options) {\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    if (util_1.isLegacyEdge()) {\n      throw new errors_1.NotSupportedError('Microsoft Edge Legacy (https://support.microsoft.com/en-us/help/4533505/what-is-microsoft-edge-legacy) ' + 'is deprecated and will not be able to connect to Twilio to make or receive calls after September 1st, 2020. ' + 'Please see this documentation for a list of supported browsers ' + 'https://www.twilio.com/docs/voice/client/javascript#supported-browsers');\n    }\n    if (!Device.isSupported && !options.ignoreBrowserSupport) {\n      if (window && window.location && window.location.protocol === 'http:') {\n        throw new errors_1.NotSupportedError(\"twilio.js wasn't able to find WebRTC browser support.           This is most likely because this page is served over http rather than https,           which does not support WebRTC in many browsers. Please load this page over https and           try again.\");\n      }\n      throw new errors_1.NotSupportedError(\"twilio.js 1.3+ SDKs require WebRTC browser support.         For more information, see <https://www.twilio.com/docs/api/client/twilio-js>.         If you have any questions about this announcement, please contact         Twilio Support at <help@twilio.com>.\");\n    }\n    if (!token) {\n      throw new errors_1.InvalidArgumentError('Token is required for Device.setup()');\n    }\n    Object.assign(this.options, options);\n    this._log.setDefaultLevel(this.options.debug ? log_1.default.levels.DEBUG : this.options.warnings ? log_1.default.levels.WARN : log_1.default.levels.SILENT);\n    this._chunderURIs = this.options.chunderw ? [\"wss://\" + this.options.chunderw + \"/signal\"] : regions_1.getChunderURIs(this.options.edge, this.options.region, this._log.warn.bind(this._log)).map(function (uri) {\n      return \"wss://\" + uri + \"/signal\";\n    });\n    if (typeof Device._isUnifiedPlanDefault === 'undefined') {\n      Device._isUnifiedPlanDefault = typeof window !== 'undefined' && typeof RTCPeerConnection !== 'undefined' && typeof RTCRtpTransceiver !== 'undefined' ? util_1.isUnifiedPlanDefault(window, window.navigator, RTCPeerConnection, RTCRtpTransceiver) : false;\n    }\n    Device._getOrCreateAudioContext();\n    if (Device._audioContext && options.fakeLocalDTMF) {\n      if (!Device._dialtonePlayer) {\n        Device._dialtonePlayer = new dialtonePlayer_1.default(Device._audioContext);\n      }\n    } else if (Device._dialtonePlayer) {\n      Device._dialtonePlayer.cleanup();\n      delete Device._dialtonePlayer;\n    }\n    if (this.isInitialized) {\n      this._log.info('Found existing Device; using new token but ignoring options');\n      this.updateToken(token);\n      return this;\n    }\n    this.isInitialized = true;\n    if (this.options.dscp) {\n      this.options.rtcConstraints.optional = [{\n        googDscp: true\n      }];\n    }\n    var getOrSetSound = function (key, value) {\n      if (!hasBeenWarnedSounds) {\n        _this._log.warn('Device.sounds is deprecated and will be removed in the next breaking ' + 'release. Please use the new functionality available on Device.audio.');\n        hasBeenWarnedSounds = true;\n      }\n      if (typeof value !== 'undefined') {\n        _this._enabledSounds[key] = value;\n      }\n      return _this._enabledSounds[key];\n    };\n    [Device.SoundName.Disconnect, Device.SoundName.Incoming, Device.SoundName.Outgoing].forEach(function (eventName) {\n      _this.sounds[eventName] = getOrSetSound.bind(null, eventName);\n    });\n    var defaultSounds = {\n      disconnect: {\n        filename: 'disconnect',\n        maxDuration: 3000\n      },\n      dtmf0: {\n        filename: 'dtmf-0',\n        maxDuration: 1000\n      },\n      dtmf1: {\n        filename: 'dtmf-1',\n        maxDuration: 1000\n      },\n      dtmf2: {\n        filename: 'dtmf-2',\n        maxDuration: 1000\n      },\n      dtmf3: {\n        filename: 'dtmf-3',\n        maxDuration: 1000\n      },\n      dtmf4: {\n        filename: 'dtmf-4',\n        maxDuration: 1000\n      },\n      dtmf5: {\n        filename: 'dtmf-5',\n        maxDuration: 1000\n      },\n      dtmf6: {\n        filename: 'dtmf-6',\n        maxDuration: 1000\n      },\n      dtmf7: {\n        filename: 'dtmf-7',\n        maxDuration: 1000\n      },\n      dtmf8: {\n        filename: 'dtmf-8',\n        maxDuration: 1000\n      },\n      dtmf9: {\n        filename: 'dtmf-9',\n        maxDuration: 1000\n      },\n      dtmfh: {\n        filename: 'dtmf-hash',\n        maxDuration: 1000\n      },\n      dtmfs: {\n        filename: 'dtmf-star',\n        maxDuration: 1000\n      },\n      incoming: {\n        filename: 'incoming',\n        shouldLoop: true\n      },\n      outgoing: {\n        filename: 'outgoing',\n        maxDuration: 3000\n      }\n    };\n    for (var _i = 0, _a = Object.keys(defaultSounds); _i < _a.length; _i++) {\n      var name_1 = _a[_i];\n      var soundDef = defaultSounds[name_1];\n      var defaultUrl = C.SOUNDS_BASE_URL + \"/\" + soundDef.filename + \".\" + Device.extension + (\"?cache=\" + C.RELEASE_VERSION);\n      var soundUrl = this.options.sounds && this.options.sounds[name_1] || defaultUrl;\n      var sound = new this.options.soundFactory(name_1, soundUrl, {\n        audioContext: this.options.disableAudioContextSounds ? null : Device.audioContext,\n        maxDuration: soundDef.maxDuration,\n        shouldLoop: soundDef.shouldLoop\n      });\n      this.soundcache.set(name_1, sound);\n    }\n    this._publisher = (this.options.Publisher || Publisher)('twilio-js-sdk', token, {\n      defaultPayload: this._createDefaultPayload,\n      host: this.options.eventgw,\n      metadata: {\n        app_name: this.options.appName,\n        app_version: this.options.appVersion\n      }\n    });\n    if (this.options.publishEvents === false) {\n      this._publisher.disable();\n    } else {\n      this._publisher.on('error', function (error) {\n        _this._log.warn('Cannot connect to insights.', error);\n      });\n    }\n    if (this._networkInformation && typeof this._networkInformation.addEventListener === 'function') {\n      this._networkInformation.addEventListener('change', this._publishNetworkChange);\n    }\n    this.audio = new (this.options.AudioHelper || audiohelper_1.default)(this._updateSinkIds, this._updateInputStream, this.options.getUserMedia || getUserMedia, {\n      audioContext: Device.audioContext,\n      enabledSounds: this._enabledSounds,\n      enumerateDevices: this.options.enumerateDevices\n    });\n    this.audio.on('deviceChange', function (lostActiveDevices) {\n      var activeConnection = _this._activeConnection;\n      var deviceIds = lostActiveDevices.map(function (device) {\n        return device.deviceId;\n      });\n      _this._publisher.info('audio', 'device-change', {\n        lost_active_device_ids: deviceIds\n      }, activeConnection);\n      if (activeConnection) {\n        activeConnection.mediaStream._onInputDevicesChanged();\n      }\n    });\n    this.mediaPresence.audio = !this.options.noRegister;\n    this.updateToken(token);\n    // Setup close protection and make sure we clean up ongoing calls on unload.\n    if (typeof window !== 'undefined' && window.addEventListener) {\n      window.addEventListener('unload', this.destroy);\n      window.addEventListener('pagehide', this.destroy);\n      if (this.options.closeProtection) {\n        window.addEventListener('beforeunload', this._confirmClose);\n      }\n    }\n    // (rrowland) This maintains backward compatibility, but we should look at\n    // removing this next breaking change. Any error should be caught by the\n    // customer, and anything that's not a fatal error should not be emitted\n    // via error event.\n    this.on(Device.EventName.Error, function () {\n      if (_this.listenerCount('error') > 1) {\n        return;\n      }\n      _this._log.info('Uncaught error event suppressed.');\n    });\n    return this;\n  };\n  /**\n   * Get the status of this {@link Device} instance\n   */\n  Device.prototype.status = function () {\n    this._throwUnlessSetup('status');\n    return this._activeConnection ? Device.Status.Busy : this._status;\n  };\n  /**\n   * String representation of {@link Device} instance.\n   * @private\n   */\n  Device.prototype.toString = function () {\n    return '[Twilio.Device instance]';\n  };\n  /**\n   * Unregister to receiving incoming calls.\n   */\n  Device.prototype.unregisterPresence = function () {\n    this._throwUnlessSetup('unregisterPresence');\n    this.mediaPresence.audio = false;\n    this._sendPresence();\n    return this;\n  };\n  /**\n   * Update the token and re-register.\n   * @param token - The new token JWT string to register with.\n   */\n  Device.prototype.updateToken = function (token) {\n    this._throwUnlessSetup('updateToken');\n    this.token = token;\n    this.register(token);\n  };\n  /**\n   * Add a handler for an EventEmitter and emit a deprecation warning on first call.\n   * @param eventName - Name of the event\n   * @param handler - A handler to call when the event is emitted\n   */\n  Device.prototype._addHandler = function (eventName, handler) {\n    if (!hasBeenWarnedHandlers) {\n      this._log.warn(\"Device callback handlers (connect, error, offline, incoming, cancel, ready, disconnect)         have been deprecated and will be removed in the next breaking release. Instead, the EventEmitter         interface can be used to set event listeners. Example: device.on('\" + eventName + \"', handler)\");\n      hasBeenWarnedHandlers = true;\n    }\n    this.addListener(eventName, handler);\n    return this;\n  };\n  /**\n   * Calls the emit API such that it is asynchronous.\n   * Only use this internal API if you don't want to break the execution after raising an event.\n   * This prevents the issue where events are not dispatched to all handlers when one of the handlers throws an error.\n   * For example, our connection:accept is not triggered if the handler for device:connect handler throws an error.\n   * As a side effect, we are not able to perform our internal routines such as stopping incoming sounds.\n   * See connection:accept inside _makeConnection where we call emit('connect'). This can throw an error.\n   * See connection:accept inside _onSignalingInvite. This handler won't get called if the error above is thrown.\n   * @private\n   */\n  Device.prototype._asyncEmit = function (event) {\n    var _this = this;\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    setTimeout(function () {\n      return _this.emit.apply(_this, __spreadArrays([event], args));\n    });\n  };\n  /**\n   * Find a {@link Connection} by its CallSid.\n   * @param callSid\n   */\n  Device.prototype._findConnection = function (callSid) {\n    return this.connections.find(function (conn) {\n      return conn.parameters.CallSid === callSid || conn.outboundConnectionId === callSid;\n    }) || null;\n  };\n  /**\n   * Create a new {@link Connection}.\n   * @param twimlParams - A flat object containing key:value pairs to be sent to the TwiML app.\n   * @param [options] - Options to be used to instantiate the {@link Connection}.\n   */\n  Device.prototype._makeConnection = function (twimlParams, options) {\n    var _this = this;\n    if (typeof Device._isUnifiedPlanDefault === 'undefined') {\n      throw new errors_1.InvalidStateError('Device has not been initialized.');\n    }\n    var config = {\n      audioHelper: this.audio,\n      getUserMedia: this.options.getUserMedia || getUserMedia,\n      isUnifiedPlanDefault: Device._isUnifiedPlanDefault,\n      pstream: this.stream,\n      publisher: this._publisher,\n      soundcache: this.soundcache\n    };\n    options = Object.assign({\n      MediaStream: this.options.MediaStream || this.options.mediaStreamFactory || rtc.PeerConnection,\n      RTCPeerConnection: this.options.RTCPeerConnection,\n      audioConstraints: this.options.audioConstraints,\n      beforeAccept: function (conn) {\n        if (!_this._activeConnection || _this._activeConnection === conn) {\n          return;\n        }\n        _this._activeConnection.disconnect();\n        _this._removeConnection(_this._activeConnection);\n      },\n      codecPreferences: this.options.codecPreferences,\n      dialtonePlayer: Device._dialtonePlayer,\n      dscp: this.options.dscp,\n      enableIceRestart: this.options.enableIceRestart,\n      enableRingingState: this.options.enableRingingState,\n      forceAggressiveIceNomination: this.options.forceAggressiveIceNomination,\n      getInputStream: function () {\n        return _this.options.fileInputStream || _this._connectionInputStream;\n      },\n      getSinkIds: function () {\n        return _this._connectionSinkIds;\n      },\n      maxAverageBitrate: this.options.maxAverageBitrate,\n      preflight: this.options.preflight,\n      rtcConfiguration: this.options.rtcConfiguration || {\n        iceServers: this.options.iceServers\n      },\n      rtcConstraints: this.options.rtcConstraints,\n      shouldPlayDisconnect: function () {\n        return _this._enabledSounds.disconnect;\n      },\n      twimlParams: twimlParams\n    }, options);\n    var connection = new this.options.connectionFactory(config, options);\n    this._publisher.info('settings', 'init', {\n      RTCPeerConnection: Boolean(this.options.RTCPeerConnection),\n      enumerateDevices: Boolean(this.options.enumerateDevices),\n      getUserMedia: Boolean(this.options.getUserMedia)\n    }, connection);\n    connection.once('accept', function () {\n      _this._removeConnection(connection);\n      _this._activeConnection = connection;\n      if (_this.audio) {\n        _this.audio._maybeStartPollingVolume();\n      }\n      if (connection.direction === connection_1.default.CallDirection.Outgoing && _this._enabledSounds.outgoing) {\n        _this.soundcache.get(Device.SoundName.Outgoing).play();\n      }\n      var data = {\n        edge: _this._edge || _this._region\n      };\n      var selectedEdge = _this.options.edge;\n      if (selectedEdge) {\n        data['selected_edge'] = Array.isArray(selectedEdge) ? selectedEdge : [selectedEdge];\n      }\n      _this._publisher.info('settings', 'edge', data, connection);\n      _this._asyncEmit('connect', connection);\n    });\n    connection.addListener('error', function (error) {\n      if (connection.status() === 'closed') {\n        _this._removeConnection(connection);\n      }\n      if (_this.audio) {\n        _this.audio._maybeStopPollingVolume();\n      }\n      _this._maybeStopIncomingSound();\n      _this._asyncEmit('error', error);\n    });\n    connection.once('cancel', function () {\n      _this._log.info(\"Canceled: \" + connection.parameters.CallSid);\n      _this._removeConnection(connection);\n      if (_this.audio) {\n        _this.audio._maybeStopPollingVolume();\n      }\n      _this._maybeStopIncomingSound();\n      _this._asyncEmit('cancel', connection);\n    });\n    connection.once('disconnect', function () {\n      if (_this.audio) {\n        _this.audio._maybeStopPollingVolume();\n      }\n      _this._removeConnection(connection);\n      _this._asyncEmit('disconnect', connection);\n    });\n    connection.once('reject', function () {\n      _this._log.info(\"Rejected: \" + connection.parameters.CallSid);\n      if (_this.audio) {\n        _this.audio._maybeStopPollingVolume();\n      }\n      _this._removeConnection(connection);\n      _this._maybeStopIncomingSound();\n    });\n    connection.once('transportClose', function () {\n      if (connection.status() !== connection_1.default.State.Pending) {\n        return;\n      }\n      if (_this.audio) {\n        _this.audio._maybeStopPollingVolume();\n      }\n      _this._removeConnection(connection);\n      _this._maybeStopIncomingSound();\n    });\n    return connection;\n  };\n  /**\n   * Stop the incoming sound if no {@link Connection}s remain.\n   */\n  Device.prototype._maybeStopIncomingSound = function () {\n    if (!this.connections.length) {\n      this.soundcache.get(Device.SoundName.Incoming).stop();\n    }\n  };\n  /**\n   * Remove a {@link Connection} from device.connections by reference\n   * @param connection\n   */\n  Device.prototype._removeConnection = function (connection) {\n    if (this._activeConnection === connection) {\n      this._activeConnection = null;\n    }\n    for (var i = this.connections.length - 1; i >= 0; i--) {\n      if (connection === this.connections[i]) {\n        this.connections.splice(i, 1);\n      }\n    }\n  };\n  /**\n   * Register with the signaling server.\n   */\n  Device.prototype._sendPresence = function () {\n    if (!this.stream) {\n      return;\n    }\n    this.stream.register({\n      audio: this.mediaPresence.audio\n    });\n    if (this.mediaPresence.audio) {\n      this._startRegistrationTimer();\n    } else {\n      this._stopRegistrationTimer();\n    }\n  };\n  /**\n   * Set up the connection to the signaling server.\n   * @param token\n   */\n  Device.prototype._setupStream = function (token) {\n    this._log.info('Setting up VSP');\n    this.stream = this.options.pStreamFactory(token, this._chunderURIs, {\n      backoffMaxMs: this.options.backoffMaxMs\n    });\n    this.stream.addListener('close', this._onSignalingClose);\n    this.stream.addListener('connected', this._onSignalingConnected);\n    this.stream.addListener('error', this._onSignalingError);\n    this.stream.addListener('invite', this._onSignalingInvite);\n    this.stream.addListener('offline', this._onSignalingOffline);\n    this.stream.addListener('ready', this._onSignalingReady);\n  };\n  /**\n   * Start playing the incoming ringtone, and subsequently emit the incoming event.\n   * @param connection\n   * @param play - The function to be used to play the sound. Must return a Promise.\n   */\n  Device.prototype._showIncomingConnection = function (connection, play) {\n    var _this = this;\n    var timeout;\n    return Promise.race([play(), new Promise(function (resolve, reject) {\n      timeout = setTimeout(function () {\n        var msg = 'Playing incoming ringtone took too long; it might not play. Continuing execution...';\n        reject(new Error(msg));\n      }, RINGTONE_PLAY_TIMEOUT);\n    })]).catch(function (reason) {\n      _this._log.info(reason.message);\n    }).then(function () {\n      clearTimeout(timeout);\n      _this.emit('incoming', connection);\n    });\n  };\n  /**\n   * Set a timeout to send another register message to the signaling server.\n   */\n  Device.prototype._startRegistrationTimer = function () {\n    var _this = this;\n    this._stopRegistrationTimer();\n    this.regTimer = setTimeout(function () {\n      _this._sendPresence();\n    }, REGISTRATION_INTERVAL);\n  };\n  /**\n   * Stop sending registration messages to the signaling server.\n   */\n  Device.prototype._stopRegistrationTimer = function () {\n    if (this.regTimer) {\n      clearTimeout(this.regTimer);\n    }\n  };\n  /**\n   * Throw an Error if Device.setup has not been called for this instance.\n   * @param methodName - The name of the method being called before setup()\n   */\n  Device.prototype._throwUnlessSetup = function (methodName) {\n    if (!this.isInitialized) {\n      throw new errors_1.InvalidStateError(\"Call Device.setup() before \" + methodName);\n    }\n  };\n  /**\n   * Update the device IDs of output devices being used to play the incoming ringtone through.\n   * @param sinkIds - An array of device IDs\n   */\n  Device.prototype._updateRingtoneSinkIds = function (sinkIds) {\n    return Promise.resolve(this.soundcache.get(Device.SoundName.Incoming).setSinkIds(sinkIds));\n  };\n  /**\n   * Update the device IDs of output devices being used to play the non-ringtone sounds\n   * and Call audio through.\n   * @param sinkIds - An array of device IDs\n   */\n  Device.prototype._updateSpeakerSinkIds = function (sinkIds) {\n    Array.from(this.soundcache.entries()).filter(function (entry) {\n      return entry[0] !== Device.SoundName.Incoming;\n    }).forEach(function (entry) {\n      return entry[1].setSinkIds(sinkIds);\n    });\n    this._connectionSinkIds = sinkIds;\n    var connection = this._activeConnection;\n    return connection ? connection._setSinkIds(sinkIds) : Promise.resolve();\n  };\n  /**\n   * Register the {@link Device}\n   * @param token\n   */\n  Device.prototype.register = function (token) {\n    if (this.stream) {\n      this.stream.setToken(token);\n      this._publisher.setToken(token);\n    } else {\n      this._setupStream(token);\n    }\n  };\n  return Device;\n}(events_1.EventEmitter);\n(function (Device) {\n  /**\n   * All valid {@link Device} event names.\n   */\n  var EventName;\n  (function (EventName) {\n    EventName[\"Cancel\"] = \"cancel\";\n    EventName[\"Connect\"] = \"connect\";\n    EventName[\"Disconnect\"] = \"disconnect\";\n    EventName[\"Error\"] = \"error\";\n    EventName[\"Incoming\"] = \"incoming\";\n    EventName[\"Offline\"] = \"offline\";\n    EventName[\"Ready\"] = \"ready\";\n  })(EventName = Device.EventName || (Device.EventName = {}));\n  /**\n   * All possible {@link Device} statuses.\n   */\n  var Status;\n  (function (Status) {\n    Status[\"Busy\"] = \"busy\";\n    Status[\"Offline\"] = \"offline\";\n    Status[\"Ready\"] = \"ready\";\n  })(Status = Device.Status || (Device.Status = {}));\n  /**\n   * Names of all sounds handled by the {@link Device}.\n   */\n  var SoundName;\n  (function (SoundName) {\n    SoundName[\"Incoming\"] = \"incoming\";\n    SoundName[\"Outgoing\"] = \"outgoing\";\n    SoundName[\"Disconnect\"] = \"disconnect\";\n    SoundName[\"Dtmf0\"] = \"dtmf0\";\n    SoundName[\"Dtmf1\"] = \"dtmf1\";\n    SoundName[\"Dtmf2\"] = \"dtmf2\";\n    SoundName[\"Dtmf3\"] = \"dtmf3\";\n    SoundName[\"Dtmf4\"] = \"dtmf4\";\n    SoundName[\"Dtmf5\"] = \"dtmf5\";\n    SoundName[\"Dtmf6\"] = \"dtmf6\";\n    SoundName[\"Dtmf7\"] = \"dtmf7\";\n    SoundName[\"Dtmf8\"] = \"dtmf8\";\n    SoundName[\"Dtmf9\"] = \"dtmf9\";\n    SoundName[\"DtmfS\"] = \"dtmfs\";\n    SoundName[\"DtmfH\"] = \"dtmfh\";\n  })(SoundName = Device.SoundName || (Device.SoundName = {}));\n})(Device || (Device = {}));\nexports.default = Device;","map":{"version":3,"names":["events_1","require","audiohelper_1","connection_1","dialtonePlayer_1","errors_1","log_1","preflight_1","regions_1","util_1","C","Publisher","PStream","rtc","getUserMedia","Sound","REGISTRATION_INTERVAL","RINGTONE_PLAY_TIMEOUT","hasBeenWarnedHandlers","hasBeenWarnedSounds","Device","_super","__extends","token","options","_this","call","audio","connections","isInitialized","sounds","_activeConnection","_chunderURIs","_connectionInputStream","_connectionSinkIds","_edge","_enabledSounds","_a","SoundName","Disconnect","Incoming","Outgoing","_log","default","getInstance","_publisher","_region","_status","Status","Offline","mediaPresence","allowIncomingWhileBusy","audioConstraints","closeProtection","codecPreferences","Codec","PCMU","Opus","connectionFactory","debug","dscp","enableIceRestart","eventgw","forceAggressiveIceNomination","iceServers","noRegister","pStreamFactory","preflight","rtcConstraints","soundFactory","warnings","regTimer","soundcache","Map","stream","destroy","_disconnectAll","_stopRegistrationTimer","_unbind","_networkInformation","removeEventListener","_publishNetworkChange","window","_confirmClose","EventEmitter","prototype","removeAllListeners","event","confirmationMsg","returnValue","_createDefaultPayload","connection","payload","aggressive_nomination","browser_extension","_isBrowserExtension","ice_restart_enabled","platform","getMediaEngine","sdk_version","RELEASE_VERSION","setIfDefined","propertyName","value","callSid","parameters","CallSid","test","undefined","outboundConnectionId","codec","direction","gateway","region","splice","forEach","conn","disconnect","_onSignalingClose","_onSignalingConnected","getRegionShortcode","regionToEdge","_sendPresence","_onSignalingError","error","__assign","sid","callsid","_findConnection","code","twilioError","AuthorizationErrors","AuthenticationFailed","AccessTokenInvalid","AccessTokenExpired","GeneralErrors","UnknownError","info","emit","_onSignalingInvite","wasBusy","sdp","message","ClientErrors","BadRequest","callParameters","customParameters","Object","assign","queryToJson","Params","_makeConnection","offerSdp","push","once","get","stop","play","incoming","Promise","resolve","_showIncomingConnection","_onSignalingOffline","_onSignalingReady","Ready","connection_type","type","downlink","downlinkMax","effective_type","effectiveType","rtt","_updateInputStream","inputStream","reject","InvalidStateError","_setInputTracksFromStream","_updateSinkIds","sinkIds","promise","_updateRingtoneSinkIds","_updateSpeakerSinkIds","then","audio_device_ids","root","browser","msBrowser","chrome","runtime","id","safari","extension","navigator","n","mozConnection","webkitConnection","setup","InvalidArgumentError","defineProperty","_audioContext","a","document","createElement","canPlayType","canPlayMp3","replace","e","canPlayVorbis","enabled","PACKAGE_NAME","runPreflight","PreflightTest","audioContext","_getOrCreateAudioContext","toString","AudioContext","webkitAudioContext","activeConnection","cancel","handler","_addHandler","EventName","Cancel","connect","paramsOrHandler","rtcConfiguration","Connect","_throwUnlessSetup","params","ignore","accept","disconnectAll","Error","offline","ready","warn","registerPresence","removeListener","listener","isLegacyEdge","NotSupportedError","isSupported","ignoreBrowserSupport","location","protocol","setDefaultLevel","levels","DEBUG","WARN","SILENT","chunderw","getChunderURIs","edge","bind","map","uri","_isUnifiedPlanDefault","RTCPeerConnection","RTCRtpTransceiver","isUnifiedPlanDefault","fakeLocalDTMF","_dialtonePlayer","cleanup","updateToken","optional","googDscp","getOrSetSound","key","eventName","defaultSounds","filename","maxDuration","dtmf0","dtmf1","dtmf2","dtmf3","dtmf4","dtmf5","dtmf6","dtmf7","dtmf8","dtmf9","dtmfh","dtmfs","shouldLoop","outgoing","_i","keys","length","name_1","soundDef","defaultUrl","SOUNDS_BASE_URL","soundUrl","sound","disableAudioContextSounds","set","defaultPayload","host","metadata","app_name","appName","app_version","appVersion","publishEvents","disable","on","addEventListener","AudioHelper","enabledSounds","enumerateDevices","lostActiveDevices","deviceIds","device","deviceId","lost_active_device_ids","mediaStream","_onInputDevicesChanged","listenerCount","status","Busy","unregisterPresence","register","addListener","_asyncEmit","args","arguments","setTimeout","apply","__spreadArrays","find","twimlParams","config","audioHelper","pstream","publisher","MediaStream","mediaStreamFactory","PeerConnection","beforeAccept","_removeConnection","dialtonePlayer","enableRingingState","getInputStream","fileInputStream","getSinkIds","maxAverageBitrate","shouldPlayDisconnect","Boolean","_maybeStartPollingVolume","CallDirection","data","selectedEdge","Array","isArray","_maybeStopPollingVolume","_maybeStopIncomingSound","State","Pending","i","_startRegistrationTimer","_setupStream","backoffMaxMs","timeout","race","msg","catch","reason","clearTimeout","methodName","setSinkIds","from","entries","filter","entry","_setSinkIds","setToken","exports"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/twilio-client/lib/twilio/device.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @preferred\n * @publicapi\n */\nimport { EventEmitter } from 'events';\nimport AudioHelper from './audiohelper';\nimport Connection from './connection';\nimport DialtonePlayer from './dialtonePlayer';\nimport {\n  AuthorizationErrors,\n  ClientErrors,\n  GeneralErrors,\n  InvalidArgumentError,\n  InvalidStateError,\n  NotSupportedError,\n  SignalingErrors,\n  TwilioError,\n} from './errors';\nimport Log from './log';\nimport { PreflightTest } from './preflight/preflight';\nimport {\n  getChunderURIs,\n  getRegionShortcode,\n  Region,\n  regionToEdge,\n} from './regions';\nimport {\n  isLegacyEdge,\n  isUnifiedPlanDefault,\n  queryToJson,\n} from './util';\n\nconst C = require('./constants');\nconst Publisher = require('./eventpublisher');\nconst PStream = require('./pstream');\nconst rtc = require('./rtc');\nconst getUserMedia = require('./rtc/getusermedia');\nconst Sound = require('./sound');\n\n// Placeholders until we convert the respective files to TypeScript.\n/**\n * @private\n */\nexport type IPStream = any;\n/**\n * @private\n */\nexport type IPublisher = any;\n/**\n * @private\n */\nexport type ISound = any;\n\nconst REGISTRATION_INTERVAL = 30000;\nconst RINGTONE_PLAY_TIMEOUT = 2000;\n\ndeclare const RTCRtpTransceiver: any;\ndeclare const webkitAudioContext: typeof AudioContext;\n\nlet hasBeenWarnedHandlers: boolean = false;\nlet hasBeenWarnedSounds: boolean = false;\n\n/**\n * Options that may be passed to the {@link Device} constructor for internal testing.\n * @private\n */\nexport interface IExtendedDeviceOptions extends Device.Options {\n  /**\n   * Custom {@link AudioHelper} constructor\n   */\n  AudioHelper?: any;\n\n  /**\n   * Hostname of the signaling gateway to connect to.\n   */\n  chunderw?: string;\n\n  /**\n   * Custom {@link Connection} constructor\n   */\n  connectionFactory?: Connection;\n\n  /**\n   * Hostname of the event gateway to connect to.\n   */\n  eventgw?: string;\n\n  /**\n   * File input stream to use instead of reading from mic\n   */\n  fileInputStream?: MediaStream;\n\n  /**\n   * A list of specific ICE servers to use. Overridden by {@link Device.Options.rtcConfiguration}.\n   * @deprecated\n   */\n  iceServers?: Object[];\n\n  /**\n   * Ignore browser support, disabling the exception that is thrown when neither WebRTC nor\n   * ORTC are supported.\n   */\n  ignoreBrowserSupport?: boolean;\n\n  /**\n   * Whether to disable audio flag in MediaPresence (rrowland: Do we need this?)\n   */\n  noRegister?: boolean;\n\n  /**\n   * Whether this is a preflight call or not\n   */\n  preflight?: boolean;\n\n  /**\n   * Custom PStream constructor\n   */\n  pStreamFactory?: IPStream;\n\n  /**\n   * Custom Publisher constructor\n   */\n  Publisher?: IPublisher;\n\n  /**\n   * Whether Insights events should be published\n   */\n  publishEvents?: boolean;\n\n  /**\n   * RTC Constraints to pass to getUserMedia when making or accepting a Call.\n   * The format of this object depends on browser.\n   */\n  rtcConstraints?: Object;\n\n  /**\n   * Custom Sound constructor\n   */\n  soundFactory?: ISound;\n}\n\n/**\n * A sound definition used to initialize a Sound file.\n * @private\n */\nexport interface ISoundDefinition {\n  /**\n   * Name of the sound file.\n   */\n  filename: string;\n\n  /**\n   * The amount of time this sound file should play before being stopped automatically.\n   */\n  maxDuration?: number;\n\n  /**\n   * Whether or not this sound should loop after playthrough finishes.\n   */\n  shouldLoop?: boolean;\n}\n\n/**\n * Twilio Device. Allows registration for incoming calls, and placing outgoing calls.\n * @publicapi\n */\nclass Device extends EventEmitter {\n  /**\n   * The AudioContext to be used by {@link Device} instances.\n   * @private\n   */\n  static get audioContext(): AudioContext | undefined {\n    return Device._audioContext;\n  }\n\n  /**\n   * Which sound file extension is supported.\n   * @private\n   */\n  static get extension(): 'mp3' | 'ogg' {\n    // NOTE(mroberts): Node workaround.\n    const a: any = typeof document !== 'undefined'\n      ? document.createElement('audio') : { canPlayType: false };\n\n    let canPlayMp3;\n    try {\n      canPlayMp3 = a.canPlayType && !!a.canPlayType('audio/mpeg').replace(/no/, '');\n    } catch (e) {\n      canPlayMp3 = false;\n    }\n\n    let canPlayVorbis;\n    try {\n      canPlayVorbis = a.canPlayType && !!a.canPlayType('audio/ogg;codecs=\\'vorbis\\'').replace(/no/, '');\n    } catch (e) {\n      canPlayVorbis = false;\n    }\n\n    return (canPlayVorbis && !canPlayMp3) ? 'ogg' : 'mp3';\n  }\n\n  /**\n   * Whether or not this SDK is supported by the current browser.\n   */\n  static get isSupported(): boolean { return rtc.enabled(); }\n\n  /**\n   * Package name of the SDK.\n   */\n  static get packageName(): string { return C.PACKAGE_NAME; }\n\n  /**\n   * Run some tests to identify issues, if any, prohibiting successful calling.\n   * @param token - A Twilio JWT token string\n   * @param options\n   */\n  static runPreflight(token: string, options?: PreflightTest.Options): PreflightTest {\n    return new PreflightTest(token, { audioContext: Device._getOrCreateAudioContext(), ...options });\n  }\n\n  /**\n   * String representation of {@link Device} class.\n   * @private\n   */\n  static toString(): string {\n    return '[Twilio.Device class]';\n  }\n\n  /**\n   * Current SDK version.\n   */\n  static get version(): string { return C.RELEASE_VERSION; }\n\n  /**\n   * An AudioContext to share between {@link Device}s.\n   */\n  private static _audioContext?: AudioContext;\n\n  /**\n   * A DialtonePlayer to play mock DTMF sounds through.\n   */\n  private static _dialtonePlayer?: DialtonePlayer;\n\n  /**\n   * Whether or not the browser uses unified-plan SDP by default.\n   */\n  private static _isUnifiedPlanDefault: boolean | undefined;\n\n  /**\n   * Initializes the AudioContext instance shared across the Client SDK,\n   * or returns the existing instance if one has already been initialized.\n   */\n  private static _getOrCreateAudioContext(): AudioContext | undefined {\n    if (!Device._audioContext) {\n      if (typeof AudioContext !== 'undefined') {\n        Device._audioContext = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Device._audioContext = new webkitAudioContext();\n      }\n    }\n    return Device._audioContext;\n  }\n\n  /**\n   * The AudioHelper instance associated with this {@link Device}.\n   */\n  audio: AudioHelper | null = null;\n\n  /**\n   * An array of {@link Connection}s. Though only one can be active, multiple may exist when there\n   * are multiple incoming, unanswered {@link Connection}s.\n   */\n  connections: Connection[] = [];\n\n  /**\n   * Whether or not {@link Device.setup} has been called.\n   */\n  isInitialized: boolean = false;\n\n  /**\n   * Methods to enable/disable each sound. Empty if the {@link Device} has not\n   * yet been set up.\n   */\n  readonly sounds: Partial<Record<Device.SoundName, (value?: boolean) => void>> = { };\n\n  /**\n   * The JWT string currently being used to authenticate this {@link Device}.\n   */\n  token: string | null = null;\n\n  /**\n   * The currently active {@link Connection}, if there is one.\n   */\n  private _activeConnection: Connection | null = null;\n\n  /**\n   * The list of chunder URIs that will be passed to PStream\n   */\n  private _chunderURIs: string[] = [];\n\n  /**\n   * An audio input MediaStream to pass to new {@link Connection} instances.\n   */\n  private _connectionInputStream: MediaStream | null = null;\n\n  /**\n   * An array of {@link Device} IDs to be used to play sounds through, to be passed to\n   * new {@link Connection} instances.\n   */\n  private _connectionSinkIds: string[] = ['default'];\n\n  /**\n   * The name of the edge the {@link Device} is connected to.\n   */\n  private _edge: string | null = null;\n\n  /**\n   * Whether each sound is enabled.\n   */\n  private _enabledSounds: Record<Device.ToggleableSound, boolean> = {\n    [Device.SoundName.Disconnect]: true,\n    [Device.SoundName.Incoming]: true,\n    [Device.SoundName.Outgoing]: true,\n  };\n\n  /**\n   * Whether SDK is run as a browser extension\n   */\n  private _isBrowserExtension: boolean;\n\n  /**\n   * An instance of Logger to use.\n   */\n  private _log: Log = Log.getInstance();\n\n  /**\n   * Network related information\n   * See https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API\n   */\n  private _networkInformation: any;\n\n  /**\n   * An Insights Event Publisher.\n   */\n  private _publisher: IPublisher | null = null;\n\n  /**\n   * The region the {@link Device} is connected to.\n   */\n  private _region: string | null = null;\n\n  /**\n   * The current status of the {@link Device}.\n   */\n  private _status: Device.Status = Device.Status.Offline;\n\n  /**\n   * Value of 'audio' determines whether we should be registered for incoming calls.\n   */\n  private mediaPresence: { audio: boolean } = { audio: true };\n\n  /**\n   * The options passed to {@link Device} constructor or Device.setup.\n   */\n  private options: Device.Options = {\n    allowIncomingWhileBusy: false,\n    audioConstraints: true,\n    closeProtection: false,\n    codecPreferences: [Connection.Codec.PCMU, Connection.Codec.Opus],\n    connectionFactory: Connection,\n    debug: false,\n    dscp: true,\n    enableIceRestart: false,\n    eventgw: 'eventgw.twilio.com',\n    forceAggressiveIceNomination: false,\n    iceServers: [],\n    noRegister: false,\n    pStreamFactory: PStream,\n    preflight: false,\n    rtcConstraints: { },\n    soundFactory: Sound,\n    sounds: { },\n    warnings: true,\n  };\n\n  /**\n   * A timeout ID for a setTimeout schedule to re-register the {@link Device}.\n   */\n  private regTimer: NodeJS.Timer | null = null;\n\n  /**\n   * A Map of Sounds to play.\n   */\n  private soundcache: Map<Device.SoundName, ISound> = new Map();\n\n  /**\n   * The Signaling stream.\n   */\n  private stream: IPStream | null = null;\n\n  /**\n   * Construct a {@link Device} instance, without setting up up. {@link Device.setup} must\n   * be called later to initialize the {@link Device}.\n   * @constructor\n   * @param [token] - A Twilio JWT token string granting this {@link Device} access.\n   * @param [options]\n   */\n  constructor();\n  /**\n   * Construct a {@link Device} instance, and set it up as part of the construction.\n   * @constructor\n   * @param [token] - A Twilio JWT token string granting this {@link Device} access.\n   * @param [options]\n   */\n  constructor(token: string, options?: Device.Options);\n  constructor(token?: string, options?: Device.Options) {\n    super();\n\n    if (window) {\n      const root: any = window as any;\n      const browser: any = root.msBrowser || root.browser || root.chrome;\n\n      this._isBrowserExtension = (!!browser && !!browser.runtime && !!browser.runtime.id)\n        || (!!root.safari && !!root.safari.extension);\n    }\n\n    if (this._isBrowserExtension) {\n      this._log.info('Running as browser extension.');\n    }\n\n    if (navigator) {\n      const n = navigator as any;\n      this._networkInformation = n.connection\n        || n.mozConnection\n        || n.webkitConnection;\n    }\n\n    if (token) {\n      this.setup(token, options);\n    } else if (options) {\n      throw new InvalidArgumentError('Cannot construct a Device with options but without a token');\n    }\n  }\n\n  /**\n   * Return the active {@link Connection}. Null or undefined for backward compatibility.\n   */\n  activeConnection(): Connection | null | undefined {\n    if (!this.isInitialized) {\n      return null;\n    }\n    // @rrowland This should only return activeConnection, but customers have built around this\n    // broken behavior and in order to not break their apps we are including this until\n    // the next big release.\n    return this._activeConnection || this.connections[0];\n  }\n\n  /**\n   * @deprecated Set a handler for the cancel event.\n   * @param handler\n   */\n  cancel(handler: (connection: Connection) => any): this {\n    return this._addHandler(Device.EventName.Cancel, handler);\n  }\n\n  /**\n   * Make an outgoing Call.\n   * @param [params] - A flat object containing key:value pairs to be sent to the TwiML app.\n   * @param [audioConstraints]\n   * @param [rtcConfiguration] - An RTCConfiguration to override the one set in `Device.setup`.\n   */\n  connect(params?: Record<string, string>,\n          audioConstraints?: MediaTrackConstraints | boolean,\n          rtcConfiguration?: RTCConfiguration): Connection;\n  /**\n   * Add a listener for the connect event.\n   * @param handler - A handler to set on the connect event.\n   */\n  connect(handler: (connection: Connection) => any): null;\n  connect(paramsOrHandler?: Record<string, string> | ((connection: Connection) => any),\n          audioConstraints?: MediaTrackConstraints | boolean,\n          rtcConfiguration?: RTCConfiguration): Connection | null {\n    if (typeof paramsOrHandler === 'function') {\n      this._addHandler(Device.EventName.Connect, paramsOrHandler);\n      return null;\n    }\n\n    this._throwUnlessSetup('connect');\n\n    if (this._activeConnection) {\n      throw new InvalidStateError('A Connection is already active');\n    }\n\n    const params: Record<string, string> = paramsOrHandler || { };\n    audioConstraints = audioConstraints || this.options && this.options.audioConstraints || { };\n    rtcConfiguration = rtcConfiguration || this.options.rtcConfiguration;\n\n    const connection = this._activeConnection = this._makeConnection(params, { rtcConfiguration });\n\n    // Make sure any incoming connections are ignored\n    this.connections.splice(0).forEach(conn => conn.ignore());\n\n    // Stop the incoming sound if it's playing\n    this.soundcache.get(Device.SoundName.Incoming).stop();\n\n    connection.accept(audioConstraints);\n    this._publishNetworkChange();\n    return connection;\n  }\n\n  /**\n   * Destroy the {@link Device}, freeing references to be garbage collected.\n   */\n  destroy = (): void => {\n    this._disconnectAll();\n    this._stopRegistrationTimer();\n\n    if (this.audio) {\n      this.audio._unbind();\n    }\n\n    if (this.stream) {\n      this.stream.destroy();\n      this.stream = null;\n    }\n\n    if (this._networkInformation && typeof this._networkInformation.removeEventListener === 'function') {\n      this._networkInformation.removeEventListener('change', this._publishNetworkChange);\n    }\n\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('beforeunload', this._confirmClose);\n      window.removeEventListener('unload', this.destroy);\n      window.removeEventListener('pagehide', this.destroy);\n    }\n\n    EventEmitter.prototype.removeAllListeners.call(this);\n  }\n\n  /**\n   * Set a handler for the disconnect event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  disconnect(handler: (connection: Connection) => any): this {\n    return this._addHandler(Device.EventName.Disconnect, handler);\n  }\n\n  /**\n   * Disconnect all {@link Connection}s.\n   */\n  disconnectAll(): void {\n    this._throwUnlessSetup('disconnectAll');\n    this._disconnectAll();\n  }\n\n  /**\n   * Returns the {@link Edge} value the {@link Device} is currently connected\n   * to. The value will be `null` when the {@link Device} is offline.\n   */\n  get edge(): string | null {\n    return this._edge;\n  }\n\n  /**\n   * Set a handler for the error event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  error(handler: (error: Connection) => any): this {\n    return this._addHandler(Device.EventName.Error, handler);\n  }\n\n  /**\n   * Set a handler for the incoming event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  incoming(handler: (connection: Connection) => any): this {\n    return this._addHandler(Device.EventName.Incoming, handler);\n  }\n\n  /**\n   * Set a handler for the offline event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  offline(handler: (device: Device) => any): this {\n    return this._addHandler(Device.EventName.Offline, handler);\n  }\n\n  /**\n   * Set a handler for the ready event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  ready(handler: (device: Device) => any): this {\n    return this._addHandler(Device.EventName.Ready, handler);\n  }\n\n  /**\n   * Get the {@link Region} string the {@link Device} is currently connected to, or 'offline'\n   * if not connected.\n   */\n  region(): string {\n    this._log.warn(\n      '`Device.region` is deprecated and will be removed in the next major ' +\n      'release. Please use `Device.edge` instead.',\n    );\n    this._throwUnlessSetup('region');\n    return typeof this._region === 'string' ? this._region : 'offline';\n  }\n\n  /**\n   * Register to receive incoming calls. Does not need to be called unless {@link Device.unregisterPresence}\n   * has been called directly.\n   */\n  registerPresence(): this {\n    this._throwUnlessSetup('registerPresence');\n    this.mediaPresence.audio = true;\n    this._sendPresence();\n    return this;\n  }\n\n  /**\n   * Remove an event listener\n   * @param event - The event name to stop listening for\n   * @param listener - The callback to remove\n   */\n  removeListener(event: Device.EventName, listener: (...args: any[]) => void): this {\n    EventEmitter.prototype.removeListener.call(this, event, listener);\n    return this;\n  }\n\n  /**\n   * Initialize the {@link Device}.\n   * @param token - A Twilio JWT token string granting this {@link Device} access.\n   * @param [options]\n   */\n  setup(token: string, options: Device.Options = { }): this {\n    if (isLegacyEdge()) {\n      throw new NotSupportedError(\n        'Microsoft Edge Legacy (https://support.microsoft.com/en-us/help/4533505/what-is-microsoft-edge-legacy) ' +\n        'is deprecated and will not be able to connect to Twilio to make or receive calls after September 1st, 2020. ' +\n        'Please see this documentation for a list of supported browsers ' +\n        'https://www.twilio.com/docs/voice/client/javascript#supported-browsers',\n      );\n    }\n    if (!Device.isSupported && !options.ignoreBrowserSupport) {\n      if (window && window.location && window.location.protocol === 'http:') {\n        throw new NotSupportedError(`twilio.js wasn't able to find WebRTC browser support. \\\n          This is most likely because this page is served over http rather than https, \\\n          which does not support WebRTC in many browsers. Please load this page over https and \\\n          try again.`);\n      }\n\n      throw new NotSupportedError(`twilio.js 1.3+ SDKs require WebRTC browser support. \\\n        For more information, see <https://www.twilio.com/docs/api/client/twilio-js>. \\\n        If you have any questions about this announcement, please contact \\\n        Twilio Support at <help@twilio.com>.`);\n    }\n\n    if (!token) {\n      throw new InvalidArgumentError('Token is required for Device.setup()');\n    }\n\n    Object.assign(this.options, options);\n\n    this._log.setDefaultLevel(\n      this.options.debug\n        ? Log.levels.DEBUG\n        : this.options.warnings\n          ? Log.levels.WARN\n          : Log.levels.SILENT,\n    );\n\n    this._chunderURIs = this.options.chunderw\n      ? [`wss://${this.options.chunderw}/signal`]\n      : getChunderURIs(\n          this.options.edge,\n          this.options.region,\n          this._log.warn.bind(this._log),\n        ).map((uri: string) => `wss://${uri}/signal`);\n\n    if (typeof Device._isUnifiedPlanDefault === 'undefined') {\n      Device._isUnifiedPlanDefault = typeof window !== 'undefined'\n        && typeof RTCPeerConnection !== 'undefined'\n        && typeof RTCRtpTransceiver !== 'undefined'\n      ? isUnifiedPlanDefault(window, window.navigator, RTCPeerConnection, RTCRtpTransceiver)\n      : false;\n    }\n\n    Device._getOrCreateAudioContext();\n\n    if (Device._audioContext && options.fakeLocalDTMF) {\n      if (!Device._dialtonePlayer) {\n        Device._dialtonePlayer = new DialtonePlayer(Device._audioContext);\n      }\n    } else if (Device._dialtonePlayer) {\n      Device._dialtonePlayer.cleanup();\n      delete Device._dialtonePlayer;\n    }\n\n    if (this.isInitialized) {\n      this._log.info('Found existing Device; using new token but ignoring options');\n      this.updateToken(token);\n      return this;\n    }\n\n    this.isInitialized = true;\n\n    if (this.options.dscp) {\n      (this.options.rtcConstraints as any).optional = [{ googDscp: true }];\n    }\n\n    const getOrSetSound = (key: Device.ToggleableSound, value?: boolean) => {\n      if (!hasBeenWarnedSounds) {\n        this._log.warn('Device.sounds is deprecated and will be removed in the next breaking ' +\n          'release. Please use the new functionality available on Device.audio.');\n        hasBeenWarnedSounds = true;\n      }\n\n      if (typeof value !== 'undefined') {\n        this._enabledSounds[key] = value;\n      }\n\n      return this._enabledSounds[key];\n    };\n\n    [Device.SoundName.Disconnect, Device.SoundName.Incoming, Device.SoundName.Outgoing]\n        .forEach((eventName: Device.SoundName) => {\n      this.sounds[eventName] = getOrSetSound.bind(null, eventName);\n    });\n\n    const defaultSounds: Record<string, ISoundDefinition> = {\n      disconnect: { filename: 'disconnect', maxDuration: 3000 },\n      dtmf0: { filename: 'dtmf-0', maxDuration: 1000 },\n      dtmf1: { filename: 'dtmf-1', maxDuration: 1000 },\n      dtmf2: { filename: 'dtmf-2', maxDuration: 1000 },\n      dtmf3: { filename: 'dtmf-3', maxDuration: 1000 },\n      dtmf4: { filename: 'dtmf-4', maxDuration: 1000 },\n      dtmf5: { filename: 'dtmf-5', maxDuration: 1000 },\n      dtmf6: { filename: 'dtmf-6', maxDuration: 1000 },\n      dtmf7: { filename: 'dtmf-7', maxDuration: 1000 },\n      dtmf8: { filename: 'dtmf-8', maxDuration: 1000 },\n      dtmf9: { filename: 'dtmf-9', maxDuration: 1000 },\n      dtmfh: { filename: 'dtmf-hash', maxDuration: 1000 },\n      dtmfs: { filename: 'dtmf-star', maxDuration: 1000 },\n      incoming: { filename: 'incoming', shouldLoop: true },\n      outgoing: { filename: 'outgoing', maxDuration: 3000 },\n    };\n\n    for (const name of Object.keys(defaultSounds)) {\n      const soundDef: ISoundDefinition = defaultSounds[name];\n\n      const defaultUrl: string = `${C.SOUNDS_BASE_URL}/${soundDef.filename}.${Device.extension}`\n        + `?cache=${C.RELEASE_VERSION}`;\n\n      const soundUrl: string = this.options.sounds && this.options.sounds[name as Device.SoundName] || defaultUrl;\n      const sound: any = new this.options.soundFactory(name, soundUrl, {\n        audioContext: this.options.disableAudioContextSounds ? null : Device.audioContext,\n        maxDuration: soundDef.maxDuration,\n        shouldLoop: soundDef.shouldLoop,\n      });\n\n      this.soundcache.set(name as Device.SoundName, sound);\n    }\n\n    this._publisher = (this.options.Publisher || Publisher)('twilio-js-sdk', token, {\n      defaultPayload: this._createDefaultPayload,\n      host: this.options.eventgw,\n      metadata: {\n        app_name: this.options.appName,\n        app_version: this.options.appVersion,\n      },\n    } as any);\n\n    if (this.options.publishEvents === false) {\n      this._publisher.disable();\n    } else {\n      this._publisher.on('error', (error: Error) => {\n        this._log.warn('Cannot connect to insights.', error);\n      });\n    }\n\n    if (this._networkInformation && typeof this._networkInformation.addEventListener === 'function') {\n      this._networkInformation.addEventListener('change', this._publishNetworkChange);\n    }\n\n    this.audio = new (this.options.AudioHelper || AudioHelper)\n        (this._updateSinkIds, this._updateInputStream, this.options.getUserMedia || getUserMedia, {\n      audioContext: Device.audioContext,\n      enabledSounds: this._enabledSounds,\n      enumerateDevices: this.options.enumerateDevices,\n    }) as AudioHelper;\n\n    this.audio.on('deviceChange', (lostActiveDevices: MediaDeviceInfo[]) => {\n      const activeConnection: Connection | null = this._activeConnection;\n      const deviceIds: string[] = lostActiveDevices.map((device: MediaDeviceInfo) => device.deviceId);\n\n      this._publisher.info('audio', 'device-change', {\n        lost_active_device_ids: deviceIds,\n      }, activeConnection);\n\n      if (activeConnection) {\n        activeConnection.mediaStream._onInputDevicesChanged();\n      }\n    });\n\n    this.mediaPresence.audio = !this.options.noRegister;\n    this.updateToken(token);\n\n    // Setup close protection and make sure we clean up ongoing calls on unload.\n    if (typeof window !== 'undefined' && window.addEventListener) {\n      window.addEventListener('unload', this.destroy);\n      window.addEventListener('pagehide', this.destroy);\n      if (this.options.closeProtection) {\n        window.addEventListener('beforeunload', this._confirmClose);\n      }\n    }\n\n    // (rrowland) This maintains backward compatibility, but we should look at\n    // removing this next breaking change. Any error should be caught by the\n    // customer, and anything that's not a fatal error should not be emitted\n    // via error event.\n    this.on(Device.EventName.Error, () => {\n      if (this.listenerCount('error') > 1) { return; }\n      this._log.info('Uncaught error event suppressed.');\n    });\n\n    return this;\n  }\n\n  /**\n   * Get the status of this {@link Device} instance\n   */\n  status(): Device.Status {\n    this._throwUnlessSetup('status');\n    return this._activeConnection ? Device.Status.Busy : this._status;\n  }\n\n  /**\n   * String representation of {@link Device} instance.\n   * @private\n   */\n  toString() {\n    return '[Twilio.Device instance]';\n  }\n\n  /**\n   * Unregister to receiving incoming calls.\n   */\n  unregisterPresence(): this {\n    this._throwUnlessSetup('unregisterPresence');\n\n    this.mediaPresence.audio = false;\n    this._sendPresence();\n    return this;\n  }\n\n  /**\n   * Update the token and re-register.\n   * @param token - The new token JWT string to register with.\n   */\n  updateToken(token: string): void {\n    this._throwUnlessSetup('updateToken');\n    this.token = token;\n    this.register(token);\n  }\n\n  /**\n   * Add a handler for an EventEmitter and emit a deprecation warning on first call.\n   * @param eventName - Name of the event\n   * @param handler - A handler to call when the event is emitted\n   */\n  private _addHandler(eventName: Device.EventName, handler: (...args: any[]) => any): this {\n    if (!hasBeenWarnedHandlers) {\n      this._log.warn(`Device callback handlers (connect, error, offline, incoming, cancel, ready, disconnect) \\\n        have been deprecated and will be removed in the next breaking release. Instead, the EventEmitter \\\n        interface can be used to set event listeners. Example: device.on('${eventName}', handler)`);\n      hasBeenWarnedHandlers = true;\n    }\n\n    this.addListener(eventName, handler);\n    return this;\n  }\n\n  /**\n   * Calls the emit API such that it is asynchronous.\n   * Only use this internal API if you don't want to break the execution after raising an event.\n   * This prevents the issue where events are not dispatched to all handlers when one of the handlers throws an error.\n   * For example, our connection:accept is not triggered if the handler for device:connect handler throws an error.\n   * As a side effect, we are not able to perform our internal routines such as stopping incoming sounds.\n   * See connection:accept inside _makeConnection where we call emit('connect'). This can throw an error.\n   * See connection:accept inside _onSignalingInvite. This handler won't get called if the error above is thrown.\n   * @private\n   */\n  private _asyncEmit(event: string | symbol, ...args: any[]): void {\n    setTimeout(() => this.emit(event, ...args));\n  }\n\n  /**\n   * Called on window's beforeunload event if closeProtection is enabled,\n   * preventing users from accidentally navigating away from an active call.\n   * @param event\n   */\n  private _confirmClose = (event: any): string => {\n    if (!this._activeConnection) { return ''; }\n\n    const closeProtection: boolean | string = this.options.closeProtection || false;\n    const confirmationMsg: string = typeof closeProtection !== 'string'\n      ? 'A call is currently in-progress. Leaving or reloading this page will end the call.'\n      : closeProtection;\n\n    (event || window.event).returnValue = confirmationMsg;\n    return confirmationMsg;\n  }\n\n  /**\n   * Create the default Insights payload\n   * @param [connection]\n   */\n  private _createDefaultPayload = (connection?: Connection): Record<string, any> => {\n    const payload: Record<string, any> = {\n      aggressive_nomination: this.options.forceAggressiveIceNomination,\n      browser_extension: this._isBrowserExtension,\n      dscp: !!this.options.dscp,\n      ice_restart_enabled: this.options.enableIceRestart,\n      platform: rtc.getMediaEngine(),\n      sdk_version: C.RELEASE_VERSION,\n    };\n\n    function setIfDefined(propertyName: string, value: string | undefined | null) {\n      if (value) { payload[propertyName] = value; }\n    }\n\n    if (connection) {\n      const callSid = connection.parameters.CallSid;\n      setIfDefined('call_sid', /^TJ/.test(callSid) ? undefined : callSid);\n      setIfDefined('temp_call_sid', connection.outboundConnectionId);\n      setIfDefined('audio_codec', connection.codec);\n      payload.direction = connection.direction;\n    }\n\n    setIfDefined('gateway', this.stream && this.stream.gateway);\n    setIfDefined('selected_region', this.options.region);\n    setIfDefined('region', this.stream && this.stream.region);\n\n    return payload;\n  }\n\n  /**\n   * Disconnect all {@link Connection}s.\n   */\n  private _disconnectAll = (): void => {\n    const connections = this.connections.splice(0);\n    connections.forEach((conn: Connection) => conn.disconnect());\n\n    if (this._activeConnection) {\n      this._activeConnection.disconnect();\n    }\n  }\n\n  /**\n   * Find a {@link Connection} by its CallSid.\n   * @param callSid\n   */\n  private _findConnection(callSid: string): Connection | null {\n    return this.connections.find(conn => conn.parameters.CallSid === callSid\n      || conn.outboundConnectionId === callSid) || null;\n  }\n\n  /**\n   * Create a new {@link Connection}.\n   * @param twimlParams - A flat object containing key:value pairs to be sent to the TwiML app.\n   * @param [options] - Options to be used to instantiate the {@link Connection}.\n   */\n  private _makeConnection(twimlParams: Record<string, string>, options?: Connection.Options): Connection {\n    if (typeof Device._isUnifiedPlanDefault === 'undefined') {\n      throw new InvalidStateError('Device has not been initialized.');\n    }\n\n    const config: Connection.Config = {\n      audioHelper: this.audio,\n      getUserMedia: this.options.getUserMedia || getUserMedia,\n      isUnifiedPlanDefault: Device._isUnifiedPlanDefault,\n      pstream: this.stream,\n      publisher: this._publisher,\n      soundcache: this.soundcache,\n    };\n\n    options = Object.assign({\n      MediaStream: this.options.MediaStream\n        || this.options.mediaStreamFactory\n        || rtc.PeerConnection,\n      RTCPeerConnection: this.options.RTCPeerConnection,\n      audioConstraints: this.options.audioConstraints,\n      beforeAccept: (conn: Connection) => {\n        if (!this._activeConnection || this._activeConnection === conn) {\n          return;\n        }\n\n        this._activeConnection.disconnect();\n        this._removeConnection(this._activeConnection);\n      },\n      codecPreferences: this.options.codecPreferences,\n      dialtonePlayer: Device._dialtonePlayer,\n      dscp: this.options.dscp,\n      enableIceRestart: this.options.enableIceRestart,\n      enableRingingState: this.options.enableRingingState,\n      forceAggressiveIceNomination: this.options.forceAggressiveIceNomination,\n      getInputStream: (): MediaStream | null => this.options.fileInputStream || this._connectionInputStream,\n      getSinkIds: (): string[] => this._connectionSinkIds,\n      maxAverageBitrate: this.options.maxAverageBitrate,\n      preflight: this.options.preflight,\n      rtcConfiguration: this.options.rtcConfiguration || { iceServers: this.options.iceServers },\n      rtcConstraints: this.options.rtcConstraints,\n      shouldPlayDisconnect: () => this._enabledSounds.disconnect,\n      twimlParams,\n    }, options);\n\n    const connection = new this.options.connectionFactory(config, options);\n    this._publisher.info('settings', 'init', {\n      RTCPeerConnection: Boolean(this.options.RTCPeerConnection),\n      enumerateDevices: Boolean(this.options.enumerateDevices),\n      getUserMedia: Boolean(this.options.getUserMedia),\n    }, connection);\n\n    connection.once('accept', () => {\n      this._removeConnection(connection);\n      this._activeConnection = connection;\n      if (this.audio) {\n        this.audio._maybeStartPollingVolume();\n      }\n\n      if (connection.direction === Connection.CallDirection.Outgoing && this._enabledSounds.outgoing) {\n        this.soundcache.get(Device.SoundName.Outgoing).play();\n      }\n\n      const data: any = { edge: this._edge || this._region };\n      const selectedEdge = this.options.edge;\n      if (selectedEdge) {\n        data['selected_edge'] = Array.isArray(selectedEdge) ? selectedEdge : [selectedEdge];\n      }\n\n      this._publisher.info('settings', 'edge', data, connection);\n      this._asyncEmit('connect', connection);\n    });\n\n    connection.addListener('error', (error: Connection.Error) => {\n      if (connection.status() === 'closed') {\n        this._removeConnection(connection);\n      }\n      if (this.audio) {\n        this.audio._maybeStopPollingVolume();\n      }\n      this._maybeStopIncomingSound();\n      this._asyncEmit('error', error);\n    });\n\n    connection.once('cancel', () => {\n      this._log.info(`Canceled: ${connection.parameters.CallSid}`);\n      this._removeConnection(connection);\n      if (this.audio) {\n        this.audio._maybeStopPollingVolume();\n      }\n      this._maybeStopIncomingSound();\n      this._asyncEmit('cancel', connection);\n    });\n\n    connection.once('disconnect', () => {\n      if (this.audio) {\n        this.audio._maybeStopPollingVolume();\n      }\n      this._removeConnection(connection);\n      this._asyncEmit('disconnect', connection);\n    });\n\n    connection.once('reject', () => {\n      this._log.info(`Rejected: ${connection.parameters.CallSid}`);\n      if (this.audio) {\n        this.audio._maybeStopPollingVolume();\n      }\n      this._removeConnection(connection);\n      this._maybeStopIncomingSound();\n    });\n\n    connection.once('transportClose', () => {\n      if (connection.status() !== Connection.State.Pending) {\n        return;\n      }\n      if (this.audio) {\n        this.audio._maybeStopPollingVolume();\n      }\n      this._removeConnection(connection);\n      this._maybeStopIncomingSound();\n    });\n\n    return connection;\n  }\n\n  /**\n   * Stop the incoming sound if no {@link Connection}s remain.\n   */\n  private _maybeStopIncomingSound(): void {\n    if (!this.connections.length) {\n      this.soundcache.get(Device.SoundName.Incoming).stop();\n    }\n  }\n\n  /**\n   * Called when a 'close' event is received from the signaling stream.\n   */\n  private _onSignalingClose = () => {\n    this.stream = null;\n  }\n\n  /**\n   * Called when a 'connected' event is received from the signaling stream.\n   */\n  private _onSignalingConnected = (payload: Record<string, any>) => {\n    const region = getRegionShortcode(payload.region);\n    this._edge = regionToEdge[region as Region] || payload.region;\n    this._region = region || payload.region;\n    this._sendPresence();\n  }\n\n  /**\n   * Called when an 'error' event is received from the signaling stream.\n   */\n  private _onSignalingError = (payload: Record<string, any>) => {\n    if (!payload.error) { return; }\n\n    const error = { ...payload.error };\n    const sid = payload.callsid;\n    if (sid) {\n      error.connection = this._findConnection(sid);\n    }\n\n    if (error.code === 31201) {\n      error.twilioError = new AuthorizationErrors.AuthenticationFailed();\n    } else if (error.code === 31204) {\n      error.twilioError = new AuthorizationErrors.AccessTokenInvalid();\n    } else if (error.code === 31205) {\n      // Stop trying to register presence after token expires\n      this._stopRegistrationTimer();\n      error.twilioError = new AuthorizationErrors.AccessTokenExpired();\n    } else if (!error.twilioError) {\n      error.twilioError = new GeneralErrors.UnknownError();\n    }\n\n    this._log.info('Received error: ', error);\n    this.emit('error', error);\n  }\n\n  /**\n   * Called when an 'invite' event is received from the signaling stream.\n   */\n  private _onSignalingInvite = (payload: Record<string, any>) => {\n    const wasBusy = !!this._activeConnection;\n    if (wasBusy && !this.options.allowIncomingWhileBusy) {\n      this._log.info('Device busy; ignoring incoming invite');\n      return;\n    }\n\n    if (!payload.callsid || !payload.sdp) {\n      this.emit('error', { message: 'Malformed invite from gateway', twilioError: new ClientErrors.BadRequest() });\n      return;\n    }\n\n    const callParameters = payload.parameters || { };\n    callParameters.CallSid = callParameters.CallSid || payload.callsid;\n\n    const customParameters = Object.assign({ }, queryToJson(callParameters.Params));\n    const connection = this._makeConnection(customParameters, {\n      callParameters,\n      offerSdp: payload.sdp,\n    });\n\n    this.connections.push(connection);\n\n    connection.once('accept', () => {\n      this.soundcache.get(Device.SoundName.Incoming).stop();\n      this._publishNetworkChange();\n    });\n\n    const play = (this._enabledSounds.incoming && !wasBusy)\n      ? () => this.soundcache.get(Device.SoundName.Incoming).play()\n      : () => Promise.resolve();\n\n    this._showIncomingConnection(connection, play);\n  }\n\n  /**\n   * Called when an 'offline' event is received from the signaling stream.\n   */\n  private _onSignalingOffline = () => {\n    this._log.info('Stream is offline');\n    this._status = Device.Status.Offline;\n    this._edge = null;\n    this._region = null;\n    this.emit('offline', this);\n  }\n\n  /**\n   * Called when a 'ready' event is received from the signaling stream.\n   */\n  private _onSignalingReady = () => {\n    this._log.info('Stream is ready');\n    this._status = Device.Status.Ready;\n    this.emit('ready', this);\n  }\n\n  /**\n   * Publish a NetworkInformation#change event to Insights if there's an active {@link Connection}.\n   */\n  private _publishNetworkChange = () => {\n    if (!this._activeConnection) {\n      return;\n    }\n\n    if (this._networkInformation) {\n      this._publisher.info('network-information', 'network-change', {\n        connection_type: this._networkInformation.type,\n        downlink: this._networkInformation.downlink,\n        downlinkMax: this._networkInformation.downlinkMax,\n        effective_type: this._networkInformation.effectiveType,\n        rtt: this._networkInformation.rtt,\n      }, this._activeConnection);\n    }\n  }\n\n  /**\n   * Remove a {@link Connection} from device.connections by reference\n   * @param connection\n   */\n  private _removeConnection(connection: Connection): void {\n    if (this._activeConnection === connection) {\n      this._activeConnection = null;\n    }\n\n    for (let i = this.connections.length - 1; i >= 0; i--) {\n      if (connection === this.connections[i]) {\n        this.connections.splice(i, 1);\n      }\n    }\n  }\n\n  /**\n   * Register with the signaling server.\n   */\n  private _sendPresence(): void {\n    if (!this.stream) { return; }\n\n    this.stream.register({ audio: this.mediaPresence.audio });\n    if (this.mediaPresence.audio) {\n      this._startRegistrationTimer();\n    } else {\n      this._stopRegistrationTimer();\n    }\n  }\n\n  /**\n   * Set up the connection to the signaling server.\n   * @param token\n   */\n  private _setupStream(token: string) {\n    this._log.info('Setting up VSP');\n    this.stream = this.options.pStreamFactory(token, this._chunderURIs, {\n      backoffMaxMs: this.options.backoffMaxMs,\n    });\n\n    this.stream.addListener('close', this._onSignalingClose);\n    this.stream.addListener('connected', this._onSignalingConnected);\n    this.stream.addListener('error', this._onSignalingError);\n    this.stream.addListener('invite', this._onSignalingInvite);\n    this.stream.addListener('offline', this._onSignalingOffline);\n    this.stream.addListener('ready', this._onSignalingReady);\n  }\n\n  /**\n   * Start playing the incoming ringtone, and subsequently emit the incoming event.\n   * @param connection\n   * @param play - The function to be used to play the sound. Must return a Promise.\n   */\n  private _showIncomingConnection(connection: Connection, play: Function): Promise<void> {\n    let timeout: NodeJS.Timer;\n    return Promise.race([\n      play(),\n      new Promise((resolve, reject) => {\n        timeout = setTimeout(() => {\n          const msg = 'Playing incoming ringtone took too long; it might not play. Continuing execution...';\n          reject(new Error(msg));\n        }, RINGTONE_PLAY_TIMEOUT);\n      }),\n    ]).catch(reason => {\n      this._log.info(reason.message);\n    }).then(() => {\n      clearTimeout(timeout);\n      this.emit('incoming', connection);\n    });\n  }\n\n  /**\n   * Set a timeout to send another register message to the signaling server.\n   */\n  private _startRegistrationTimer(): void {\n    this._stopRegistrationTimer();\n    this.regTimer = setTimeout(() => {\n      this._sendPresence();\n    }, REGISTRATION_INTERVAL);\n  }\n\n  /**\n   * Stop sending registration messages to the signaling server.\n   */\n  private _stopRegistrationTimer(): void {\n    if (this.regTimer) {\n      clearTimeout(this.regTimer);\n    }\n  }\n\n  /**\n   * Throw an Error if Device.setup has not been called for this instance.\n   * @param methodName - The name of the method being called before setup()\n   */\n  private _throwUnlessSetup(methodName: string) {\n    if (!this.isInitialized) { throw new InvalidStateError(`Call Device.setup() before ${methodName}`); }\n  }\n\n  /**\n   * Update the input stream being used for calls so that any current call and all future calls\n   * will use the new input stream.\n   * @param inputStream\n   */\n  private _updateInputStream = (inputStream: MediaStream | null): Promise<void> => {\n    const connection: Connection | null = this._activeConnection;\n\n    if (connection && !inputStream) {\n      return Promise.reject(new InvalidStateError('Cannot unset input device while a call is in progress.'));\n    }\n\n    this._connectionInputStream = inputStream;\n    return connection\n      ? connection._setInputTracksFromStream(inputStream)\n      : Promise.resolve();\n  }\n\n  /**\n   * Update the device IDs of output devices being used to play the incoming ringtone through.\n   * @param sinkIds - An array of device IDs\n   */\n  private _updateRingtoneSinkIds(sinkIds: string[]): Promise<void> {\n    return Promise.resolve(this.soundcache.get(Device.SoundName.Incoming).setSinkIds(sinkIds));\n  }\n\n  /**\n   * Update the device IDs of output devices being used to play sounds through.\n   * @param type - Whether to update ringtone or speaker sounds\n   * @param sinkIds - An array of device IDs\n   */\n  private _updateSinkIds = (type: 'ringtone' | 'speaker', sinkIds: string[]): Promise<void> => {\n    const promise: Promise<void> = type === 'ringtone'\n      ? this._updateRingtoneSinkIds(sinkIds)\n      : this._updateSpeakerSinkIds(sinkIds);\n\n    return promise.then(() => {\n      this._publisher.info('audio', `${type}-devices-set`, {\n        audio_device_ids: sinkIds,\n      }, this._activeConnection);\n    }, error => {\n      this._publisher.error('audio', `${type}-devices-set-failed`, {\n        audio_device_ids: sinkIds,\n        message: error.message,\n      }, this._activeConnection);\n\n      throw error;\n    });\n  }\n\n  /**\n   * Update the device IDs of output devices being used to play the non-ringtone sounds\n   * and Call audio through.\n   * @param sinkIds - An array of device IDs\n   */\n  private _updateSpeakerSinkIds(sinkIds: string[]): Promise<void> {\n    Array.from(this.soundcache.entries())\n      .filter(entry => entry[0] !== Device.SoundName.Incoming)\n      .forEach(entry => entry[1].setSinkIds(sinkIds));\n\n    this._connectionSinkIds = sinkIds;\n    const connection = this._activeConnection;\n    return connection\n      ? connection._setSinkIds(sinkIds)\n      : Promise.resolve();\n  }\n\n  /**\n   * Register the {@link Device}\n   * @param token\n   */\n  private register(token: string): void {\n    if (this.stream) {\n      this.stream.setToken(token);\n      this._publisher.setToken(token);\n    } else {\n      this._setupStream(token);\n    }\n  }\n}\n\nnamespace Device {\n  /**\n   * Emitted when an incoming {@link Connection} is canceled.\n   * @param connection - The canceled {@link Connection}.\n   * @example `device.on('cancel', connection => { })`\n   * @event\n   */\n  declare function cancelEvent(connection: Connection): void;\n\n  /**\n   * Emitted when a {@link Connection} has been opened.\n   * @param connection - The {@link Connection} that was opened.\n   * @example `device.on('connect', connection => { })`\n   * @event\n   */\n  declare function connectEvent(connection: Connection): void;\n\n  /**\n   * Emitted when a {@link Connection} has been disconnected.\n   * @param connection - The {@link Connection} that was disconnected.\n   * @example `device.on('disconnect', connection => { })`\n   * @event\n   */\n  declare function disconnectEvent(connection: Connection): void;\n\n  /**\n   * Emitted when the {@link Device} receives an error.\n   * @param error\n   * @example `device.on('error', connection => { })`\n   * @event\n   */\n  declare function errorEvent(error: Connection): void;\n\n  /**\n   * Emitted when an incoming {@link Connection} is received.\n   * @param connection - The incoming {@link Connection}.\n   * @example `device.on('incoming', connection => { })`\n   * @event\n   */\n  declare function incomingEvent(connection: Connection): void;\n\n  /**\n   * Emitted when the {@link Device} goes offline.\n   * @param device\n   * @example `device.on('offline', device => { })`\n   * @event\n   */\n  declare function offlineEvent(device: Device): void;\n\n  /**\n   * Emitted when the {@link Device} is connected to signaling and ready.\n   * @param device\n   * @example `device.on('ready', device => { })`\n   * @event\n   */\n  declare function readyEvent(device: Device): void;\n\n  /**\n   * All valid {@link Device} event names.\n   */\n  export enum EventName {\n    Cancel = 'cancel',\n    Connect = 'connect',\n    Disconnect = 'disconnect',\n    Error = 'error',\n    Incoming = 'incoming',\n    Offline = 'offline',\n    Ready = 'ready',\n  }\n\n  /**\n   * All possible {@link Device} statuses.\n   */\n  export enum Status {\n    Busy = 'busy',\n    Offline = 'offline',\n    Ready = 'ready',\n  }\n\n  /**\n   * Names of all sounds handled by the {@link Device}.\n   */\n  export enum SoundName {\n    Incoming = 'incoming',\n    Outgoing = 'outgoing',\n    Disconnect = 'disconnect',\n    Dtmf0 = 'dtmf0',\n    Dtmf1 = 'dtmf1',\n    Dtmf2 = 'dtmf2',\n    Dtmf3 = 'dtmf3',\n    Dtmf4 = 'dtmf4',\n    Dtmf5 = 'dtmf5',\n    Dtmf6 = 'dtmf6',\n    Dtmf7 = 'dtmf7',\n    Dtmf8 = 'dtmf8',\n    Dtmf9 = 'dtmf9',\n    DtmfS = 'dtmfs',\n    DtmfH = 'dtmfh',\n  }\n\n  /**\n   * Names of all togglable sounds.\n   */\n  export type ToggleableSound = Device.SoundName.Incoming | Device.SoundName.Outgoing | Device.SoundName.Disconnect;\n\n  /**\n   * The error format used by errors emitted from {@link Device}.\n   */\n  export interface Error {\n    /**\n     * Error code\n     */\n    code: number;\n\n    /**\n     * Reference to the {@link Connection}\n     * This is usually available if the error is coming from {@link Connection}\n     */\n    connection?: Connection;\n\n    /**\n     * The info object from rtc/peerconnection or eventpublisher. May contain code and message (duplicated here).\n     */\n    info?: { code?: number, message?: string };\n\n    /**\n     * Error message\n     */\n    message: string;\n\n    /**\n     * Twilio Voice related error\n     */\n    twilioError?: TwilioError;\n  }\n\n  /**\n   * Options that may be passed to the {@link Device} constructor, or Device.setup via public API\n   */\n  export interface Options {\n    [key: string]: any;\n\n    /**\n     * Whether the Device should raise the {@link incomingEvent} event when a new call invite is\n     * received while already on an active call. Default behavior is false.\n     */\n    allowIncomingWhileBusy?: boolean;\n\n    /**\n     * A name for the application that is instantiating the {@link Device}. This is used to improve logging\n     * in Insights by associating Insights data with a specific application, particularly in the case where\n     * one account may be connected to by multiple applications.\n     */\n    appName?: string;\n\n    /**\n     * A version for the application that is instantiating the {@link Device}. This is used to improve logging\n     * in Insights by associating Insights data with a specific version of the given application. This can help\n     * track down when application-level bugs were introduced.\n     */\n    appVersion?: string;\n\n    /**\n     * Audio Constraints to pass to getUserMedia when making or accepting a Call.\n     * This is placed directly under `audio` of the MediaStreamConstraints object.\n     */\n    audioConstraints?: MediaTrackConstraints | boolean;\n\n    /**\n     * Whether to enable close protection, to prevent users from accidentally\n     * navigating away from the page during a call. If string, the value will\n     * be used as a custom message.\n     */\n    closeProtection?: boolean | string;\n\n    /**\n     * An ordered array of codec names, from most to least preferred.\n     */\n    codecPreferences?: Connection.Codec[];\n\n    /**\n     * Whether to enable debug logging.\n     */\n    debug?: boolean;\n\n    /**\n     * Whether AudioContext sounds should be disabled. Useful for trouble shooting sound issues\n     * that may be caused by AudioContext-specific sounds. If set to true, will fall back to\n     * HTMLAudioElement sounds.\n     */\n    disableAudioContextSounds?: boolean;\n\n    /**\n     * Whether to use googDscp in RTC constraints.\n     */\n    dscp?: boolean;\n\n    /**\n     * The edge value corresponds to the geographic location that the client\n     * will use to connect to Twilio infrastructure. The default value is\n     * \"roaming\" which automatically selects an edge based on the latency of the\n     * client relative to available edges. You may not specify both `edge` and\n     * `region` in the Device options. Specifying both `edge` and `region` will\n     * result in an `InvalidArgumentException`.\n     */\n    edge?: string[] | string;\n\n    /**\n     * Whether to automatically restart ICE when media connection fails\n     */\n    enableIceRestart?: boolean;\n\n    /**\n     * Whether the ringing state should be enabled on {@link Connection} objects. This is required\n     * to enable answerOnBridge functionality.\n     */\n    enableRingingState?: boolean;\n\n    /**\n     * Overrides the native MediaDevices.enumerateDevices API.\n     */\n    enumerateDevices?: any;\n\n    /**\n     * Whether or not to override the local DTMF sounds with fake dialtones. This won't affect\n     * the DTMF tone sent over the connection, but will prevent double-send issues caused by\n     * using real DTMF tones for user interface. In 2.0, this will be enabled by default.\n     */\n    fakeLocalDTMF?: boolean;\n\n    /**\n     * Experimental feature.\n     * Whether to use ICE Aggressive nomination.\n     */\n    forceAggressiveIceNomination?: boolean;\n\n    /**\n     * Overrides the native MediaDevices.getUserMedia API.\n     */\n    getUserMedia?: any;\n\n    /**\n     * The maximum average audio bitrate to use, in bits per second (bps) based on\n     * [RFC-7587 7.1](https://tools.ietf.org/html/rfc7587#section-7.1). By default, the setting\n     * is not used. If you specify 0, then the setting is not used. Any positive integer is allowed,\n     * but values outside the range 6000 to 510000 are ignored and treated as 0. The recommended\n     * bitrate for speech is between 8000 and 40000 bps as noted in\n     * [RFC-7587 3.1.1](https://tools.ietf.org/html/rfc7587#section-3.1.1).\n     */\n    maxAverageBitrate?: number;\n\n    /**\n     * The region code of the region to connect to.\n     *\n     * @deprecated\n     *\n     * CLIENT-7519 This parameter is deprecated in favor of the `edge`\n     * parameter. You may not specify both `edge` and `region` in the Device\n     * options.\n     *\n     * This parameter will be removed in the next major version release.\n     *\n     * The following table lists the new edge names to region name mappings.\n     * Instead of passing the `region` value in `options.region`, please pass the\n     * following `edge` value in `options.edge`.\n     *\n     * | Region Value | Edge Value   |\n     * |:-------------|:-------------|\n     * | au1          | sydney       |\n     * | br1          | sao-paulo    |\n     * | ie1          | dublin       |\n     * | de1          | frankfurt    |\n     * | jp1          | tokyo        |\n     * | sg1          | singapore    |\n     * | us1          | ashburn      |\n     * | us2          | umatilla     |\n     * | gll          | roaming      |\n     * | us1-ix       | ashburn-ix   |\n     * | us2-ix       | san-jose-ix  |\n     * | ie1-ix       | london-ix    |\n     * | de1-ix       | frankfurt-ix |\n     * | sg1-ix       | singapore-ix |\n     */\n    region?: string;\n\n    /**\n     * An RTCConfiguration to pass to the RTCPeerConnection constructor.\n     */\n    rtcConfiguration?: RTCConfiguration;\n\n    /**\n     * Overrides the native RTCPeerConnection class.\n     */\n    RTCPeerConnection?: any;\n\n    /**\n     * A mapping of custom sound URLs by sound name.\n     */\n    sounds?: Partial<Record<Device.SoundName, string>>;\n\n    /**\n     * Whether to enable warn logging.\n     */\n    warnings?: boolean;\n  }\n}\n\nexport default Device;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAMA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,aAAA,GAAAD,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,gBAAA,GAAAH,OAAA;AACA,IAAAI,QAAA,GAAAJ,OAAA;AAUA,IAAAK,KAAA,GAAAL,OAAA;AACA,IAAAM,WAAA,GAAAN,OAAA;AACA,IAAAO,SAAA,GAAAP,OAAA;AAMA,IAAAQ,MAAA,GAAAR,OAAA;AAMA,IAAMS,CAAC,GAAGT,OAAO,CAAC,aAAa,CAAC;AAChC,IAAMU,SAAS,GAAGV,OAAO,CAAC,kBAAkB,CAAC;AAC7C,IAAMW,OAAO,GAAGX,OAAO,CAAC,WAAW,CAAC;AACpC,IAAMY,GAAG,GAAGZ,OAAO,CAAC,OAAO,CAAC;AAC5B,IAAMa,YAAY,GAAGb,OAAO,CAAC,oBAAoB,CAAC;AAClD,IAAMc,KAAK,GAAGd,OAAO,CAAC,SAAS,CAAC;AAgBhC,IAAMe,qBAAqB,GAAG,KAAK;AACnC,IAAMC,qBAAqB,GAAG,IAAI;AAKlC,IAAIC,qBAAqB,GAAY,KAAK;AAC1C,IAAIC,mBAAmB,GAAY,KAAK;AAsGxC;;;;AAIA,IAAAC,MAAA,0BAAAC,MAAA;EAAqBC,SAAA,CAAAF,MAAA,EAAAC,MAAA;EAyPnB,SAAAD,OAAYG,KAAc,EAAEC,OAAwB;;IAApD,IAAAC,KAAA,GACEJ,MAAA,CAAAK,IAAA,MAAO;IAzJT;;;IAGAD,KAAA,CAAAE,KAAK,GAAuB,IAAI;IAEhC;;;;IAIAF,KAAA,CAAAG,WAAW,GAAiB,EAAE;IAE9B;;;IAGAH,KAAA,CAAAI,aAAa,GAAY,KAAK;IAE9B;;;;IAISJ,KAAA,CAAAK,MAAM,GAAiE,EAAG;IAEnF;;;IAGAL,KAAA,CAAAF,KAAK,GAAkB,IAAI;IAE3B;;;IAGQE,KAAA,CAAAM,iBAAiB,GAAsB,IAAI;IAEnD;;;IAGQN,KAAA,CAAAO,YAAY,GAAa,EAAE;IAEnC;;;IAGQP,KAAA,CAAAQ,sBAAsB,GAAuB,IAAI;IAEzD;;;;IAIQR,KAAA,CAAAS,kBAAkB,GAAa,CAAC,SAAS,CAAC;IAElD;;;IAGQT,KAAA,CAAAU,KAAK,GAAkB,IAAI;IAEnC;;;IAGQV,KAAA,CAAAW,cAAc,IAAAC,EAAA,OACpBA,EAAA,CAACjB,MAAM,CAACkB,SAAS,CAACC,UAAU,IAAG,IAAI,EACnCF,EAAA,CAACjB,MAAM,CAACkB,SAAS,CAACE,QAAQ,IAAG,IAAI,EACjCH,EAAA,CAACjB,MAAM,CAACkB,SAAS,CAACG,QAAQ,IAAG,IAAI,E;IAQnC;;;IAGQhB,KAAA,CAAAiB,IAAI,GAAQpC,KAAA,CAAAqC,OAAG,CAACC,WAAW,EAAE;IAQrC;;;IAGQnB,KAAA,CAAAoB,UAAU,GAAsB,IAAI;IAE5C;;;IAGQpB,KAAA,CAAAqB,OAAO,GAAkB,IAAI;IAErC;;;IAGQrB,KAAA,CAAAsB,OAAO,GAAkB3B,MAAM,CAAC4B,MAAM,CAACC,OAAO;IAEtD;;;IAGQxB,KAAA,CAAAyB,aAAa,GAAuB;MAAEvB,KAAK,EAAE;IAAI,CAAE;IAE3D;;;IAGQF,KAAA,CAAAD,OAAO,GAAmB;MAChC2B,sBAAsB,EAAE,KAAK;MAC7BC,gBAAgB,EAAE,IAAI;MACtBC,eAAe,EAAE,KAAK;MACtBC,gBAAgB,EAAE,CAACnD,YAAA,CAAAwC,OAAU,CAACY,KAAK,CAACC,IAAI,EAAErD,YAAA,CAAAwC,OAAU,CAACY,KAAK,CAACE,IAAI,CAAC;MAChEC,iBAAiB,EAAEvD,YAAA,CAAAwC,OAAU;MAC7BgB,KAAK,EAAE,KAAK;MACZC,IAAI,EAAE,IAAI;MACVC,gBAAgB,EAAE,KAAK;MACvBC,OAAO,EAAE,oBAAoB;MAC7BC,4BAA4B,EAAE,KAAK;MACnCC,UAAU,EAAE,EAAE;MACdC,UAAU,EAAE,KAAK;MACjBC,cAAc,EAAEtD,OAAO;MACvBuD,SAAS,EAAE,KAAK;MAChBC,cAAc,EAAE,EAAG;MACnBC,YAAY,EAAEtD,KAAK;MACnBe,MAAM,EAAE,EAAG;MACXwC,QAAQ,EAAE;KACX;IAED;;;IAGQ7C,KAAA,CAAA8C,QAAQ,GAAwB,IAAI;IAE5C;;;IAGQ9C,KAAA,CAAA+C,UAAU,GAAkC,IAAIC,GAAG,EAAE;IAE7D;;;IAGQhD,KAAA,CAAAiD,MAAM,GAAoB,IAAI;IAgHtC;;;IAGAjD,KAAA,CAAAkD,OAAO,GAAG;MACRlD,KAAI,CAACmD,cAAc,EAAE;MACrBnD,KAAI,CAACoD,sBAAsB,EAAE;MAE7B,IAAIpD,KAAI,CAACE,KAAK,EAAE;QACdF,KAAI,CAACE,KAAK,CAACmD,OAAO,EAAE;;MAGtB,IAAIrD,KAAI,CAACiD,MAAM,EAAE;QACfjD,KAAI,CAACiD,MAAM,CAACC,OAAO,EAAE;QACrBlD,KAAI,CAACiD,MAAM,GAAG,IAAI;;MAGpB,IAAIjD,KAAI,CAACsD,mBAAmB,IAAI,OAAOtD,KAAI,CAACsD,mBAAmB,CAACC,mBAAmB,KAAK,UAAU,EAAE;QAClGvD,KAAI,CAACsD,mBAAmB,CAACC,mBAAmB,CAAC,QAAQ,EAAEvD,KAAI,CAACwD,qBAAqB,CAAC;;MAGpF,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACF,mBAAmB,EAAE;QAC/DE,MAAM,CAACF,mBAAmB,CAAC,cAAc,EAAEvD,KAAI,CAAC0D,aAAa,CAAC;QAC9DD,MAAM,CAACF,mBAAmB,CAAC,QAAQ,EAAEvD,KAAI,CAACkD,OAAO,CAAC;QAClDO,MAAM,CAACF,mBAAmB,CAAC,UAAU,EAAEvD,KAAI,CAACkD,OAAO,CAAC;;MAGtD3E,QAAA,CAAAoF,YAAY,CAACC,SAAS,CAACC,kBAAkB,CAAC5D,IAAI,CAACD,KAAI,CAAC;IACtD,CAAC;IA4WD;;;;;IAKQA,KAAA,CAAA0D,aAAa,GAAG,UAACI,KAAU;MACjC,IAAI,CAAC9D,KAAI,CAACM,iBAAiB,EAAE;QAAE,OAAO,EAAE;;MAExC,IAAMsB,eAAe,GAAqB5B,KAAI,CAACD,OAAO,CAAC6B,eAAe,IAAI,KAAK;MAC/E,IAAMmC,eAAe,GAAW,OAAOnC,eAAe,KAAK,QAAQ,GAC/D,oFAAoF,GACpFA,eAAe;MAEnB,CAACkC,KAAK,IAAIL,MAAM,CAACK,KAAK,EAAEE,WAAW,GAAGD,eAAe;MACrD,OAAOA,eAAe;IACxB,CAAC;IAED;;;;IAIQ/D,KAAA,CAAAiE,qBAAqB,GAAG,UAACC,UAAuB;MACtD,IAAMC,OAAO,GAAwB;QACnCC,qBAAqB,EAAEpE,KAAI,CAACD,OAAO,CAACuC,4BAA4B;QAChE+B,iBAAiB,EAAErE,KAAI,CAACsE,mBAAmB;QAC3CnC,IAAI,EAAE,CAAC,CAACnC,KAAI,CAACD,OAAO,CAACoC,IAAI;QACzBoC,mBAAmB,EAAEvE,KAAI,CAACD,OAAO,CAACqC,gBAAgB;QAClDoC,QAAQ,EAAEpF,GAAG,CAACqF,cAAc,EAAE;QAC9BC,WAAW,EAAEzF,CAAC,CAAC0F;OAChB;MAED,SAASC,YAAYA,CAACC,YAAoB,EAAEC,KAAgC;QAC1E,IAAIA,KAAK,EAAE;UAAEX,OAAO,CAACU,YAAY,CAAC,GAAGC,KAAK;;MAC5C;MAEA,IAAIZ,UAAU,EAAE;QACd,IAAMa,OAAO,GAAGb,UAAU,CAACc,UAAU,CAACC,OAAO;QAC7CL,YAAY,CAAC,UAAU,EAAE,KAAK,CAACM,IAAI,CAACH,OAAO,CAAC,GAAGI,SAAS,GAAGJ,OAAO,CAAC;QACnEH,YAAY,CAAC,eAAe,EAAEV,UAAU,CAACkB,oBAAoB,CAAC;QAC9DR,YAAY,CAAC,aAAa,EAAEV,UAAU,CAACmB,KAAK,CAAC;QAC7ClB,OAAO,CAACmB,SAAS,GAAGpB,UAAU,CAACoB,SAAS;;MAG1CV,YAAY,CAAC,SAAS,EAAE5E,KAAI,CAACiD,MAAM,IAAIjD,KAAI,CAACiD,MAAM,CAACsC,OAAO,CAAC;MAC3DX,YAAY,CAAC,iBAAiB,EAAE5E,KAAI,CAACD,OAAO,CAACyF,MAAM,CAAC;MACpDZ,YAAY,CAAC,QAAQ,EAAE5E,KAAI,CAACiD,MAAM,IAAIjD,KAAI,CAACiD,MAAM,CAACuC,MAAM,CAAC;MAEzD,OAAOrB,OAAO;IAChB,CAAC;IAED;;;IAGQnE,KAAA,CAAAmD,cAAc,GAAG;MACvB,IAAMhD,WAAW,GAAGH,KAAI,CAACG,WAAW,CAACsF,MAAM,CAAC,CAAC,CAAC;MAC9CtF,WAAW,CAACuF,OAAO,CAAC,UAACC,IAAgB;QAAK,OAAAA,IAAI,CAACC,UAAU,EAAE;MAAjB,CAAiB,CAAC;MAE5D,IAAI5F,KAAI,CAACM,iBAAiB,EAAE;QAC1BN,KAAI,CAACM,iBAAiB,CAACsF,UAAU,EAAE;;IAEvC,CAAC;IAqJD;;;IAGQ5F,KAAA,CAAA6F,iBAAiB,GAAG;MAC1B7F,KAAI,CAACiD,MAAM,GAAG,IAAI;IACpB,CAAC;IAED;;;IAGQjD,KAAA,CAAA8F,qBAAqB,GAAG,UAAC3B,OAA4B;MAC3D,IAAMqB,MAAM,GAAGzG,SAAA,CAAAgH,kBAAkB,CAAC5B,OAAO,CAACqB,MAAM,CAAC;MACjDxF,KAAI,CAACU,KAAK,GAAG3B,SAAA,CAAAiH,YAAY,CAACR,MAAgB,CAAC,IAAIrB,OAAO,CAACqB,MAAM;MAC7DxF,KAAI,CAACqB,OAAO,GAAGmE,MAAM,IAAIrB,OAAO,CAACqB,MAAM;MACvCxF,KAAI,CAACiG,aAAa,EAAE;IACtB,CAAC;IAED;;;IAGQjG,KAAA,CAAAkG,iBAAiB,GAAG,UAAC/B,OAA4B;MACvD,IAAI,CAACA,OAAO,CAACgC,KAAK,EAAE;QAAE;;MAEtB,IAAMA,KAAK,GAAAC,QAAA,KAAQjC,OAAO,CAACgC,KAAK,CAAE;MAClC,IAAME,GAAG,GAAGlC,OAAO,CAACmC,OAAO;MAC3B,IAAID,GAAG,EAAE;QACPF,KAAK,CAACjC,UAAU,GAAGlE,KAAI,CAACuG,eAAe,CAACF,GAAG,CAAC;;MAG9C,IAAIF,KAAK,CAACK,IAAI,KAAK,KAAK,EAAE;QACxBL,KAAK,CAACM,WAAW,GAAG,IAAI7H,QAAA,CAAA8H,mBAAmB,CAACC,oBAAoB,EAAE;OACnE,MAAM,IAAIR,KAAK,CAACK,IAAI,KAAK,KAAK,EAAE;QAC/BL,KAAK,CAACM,WAAW,GAAG,IAAI7H,QAAA,CAAA8H,mBAAmB,CAACE,kBAAkB,EAAE;OACjE,MAAM,IAAIT,KAAK,CAACK,IAAI,KAAK,KAAK,EAAE;QAC/B;QACAxG,KAAI,CAACoD,sBAAsB,EAAE;QAC7B+C,KAAK,CAACM,WAAW,GAAG,IAAI7H,QAAA,CAAA8H,mBAAmB,CAACG,kBAAkB,EAAE;OACjE,MAAM,IAAI,CAACV,KAAK,CAACM,WAAW,EAAE;QAC7BN,KAAK,CAACM,WAAW,GAAG,IAAI7H,QAAA,CAAAkI,aAAa,CAACC,YAAY,EAAE;;MAGtD/G,KAAI,CAACiB,IAAI,CAAC+F,IAAI,CAAC,kBAAkB,EAAEb,KAAK,CAAC;MACzCnG,KAAI,CAACiH,IAAI,CAAC,OAAO,EAAEd,KAAK,CAAC;IAC3B,CAAC;IAED;;;IAGQnG,KAAA,CAAAkH,kBAAkB,GAAG,UAAC/C,OAA4B;MACxD,IAAMgD,OAAO,GAAG,CAAC,CAACnH,KAAI,CAACM,iBAAiB;MACxC,IAAI6G,OAAO,IAAI,CAACnH,KAAI,CAACD,OAAO,CAAC2B,sBAAsB,EAAE;QACnD1B,KAAI,CAACiB,IAAI,CAAC+F,IAAI,CAAC,uCAAuC,CAAC;QACvD;;MAGF,IAAI,CAAC7C,OAAO,CAACmC,OAAO,IAAI,CAACnC,OAAO,CAACiD,GAAG,EAAE;QACpCpH,KAAI,CAACiH,IAAI,CAAC,OAAO,EAAE;UAAEI,OAAO,EAAE,+BAA+B;UAAEZ,WAAW,EAAE,IAAI7H,QAAA,CAAA0I,YAAY,CAACC,UAAU;QAAE,CAAE,CAAC;QAC5G;;MAGF,IAAMC,cAAc,GAAGrD,OAAO,CAACa,UAAU,IAAI,EAAG;MAChDwC,cAAc,CAACvC,OAAO,GAAGuC,cAAc,CAACvC,OAAO,IAAId,OAAO,CAACmC,OAAO;MAElE,IAAMmB,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAG,EAAE3I,MAAA,CAAA4I,WAAW,CAACJ,cAAc,CAACK,MAAM,CAAC,CAAC;MAC/E,IAAM3D,UAAU,GAAGlE,KAAI,CAAC8H,eAAe,CAACL,gBAAgB,EAAE;QACxDD,cAAc,EAAAA,cAAA;QACdO,QAAQ,EAAE5D,OAAO,CAACiD;OACnB,CAAC;MAEFpH,KAAI,CAACG,WAAW,CAAC6H,IAAI,CAAC9D,UAAU,CAAC;MAEjCA,UAAU,CAAC+D,IAAI,CAAC,QAAQ,EAAE;QACxBjI,KAAI,CAAC+C,UAAU,CAACmF,GAAG,CAACvI,MAAM,CAACkB,SAAS,CAACE,QAAQ,CAAC,CAACoH,IAAI,EAAE;QACrDnI,KAAI,CAACwD,qBAAqB,EAAE;MAC9B,CAAC,CAAC;MAEF,IAAM4E,IAAI,GAAIpI,KAAI,CAACW,cAAc,CAAC0H,QAAQ,IAAI,CAAClB,OAAO,GAClD;QAAM,OAAAnH,KAAI,CAAC+C,UAAU,CAACmF,GAAG,CAACvI,MAAM,CAACkB,SAAS,CAACE,QAAQ,CAAC,CAACqH,IAAI,EAAE;MAArD,CAAqD,GAC3D;QAAM,OAAAE,OAAO,CAACC,OAAO,EAAE;MAAjB,CAAiB;MAE3BvI,KAAI,CAACwI,uBAAuB,CAACtE,UAAU,EAAEkE,IAAI,CAAC;IAChD,CAAC;IAED;;;IAGQpI,KAAA,CAAAyI,mBAAmB,GAAG;MAC5BzI,KAAI,CAACiB,IAAI,CAAC+F,IAAI,CAAC,mBAAmB,CAAC;MACnChH,KAAI,CAACsB,OAAO,GAAG3B,MAAM,CAAC4B,MAAM,CAACC,OAAO;MACpCxB,KAAI,CAACU,KAAK,GAAG,IAAI;MACjBV,KAAI,CAACqB,OAAO,GAAG,IAAI;MACnBrB,KAAI,CAACiH,IAAI,CAAC,SAAS,EAAEjH,KAAI,CAAC;IAC5B,CAAC;IAED;;;IAGQA,KAAA,CAAA0I,iBAAiB,GAAG;MAC1B1I,KAAI,CAACiB,IAAI,CAAC+F,IAAI,CAAC,iBAAiB,CAAC;MACjChH,KAAI,CAACsB,OAAO,GAAG3B,MAAM,CAAC4B,MAAM,CAACoH,KAAK;MAClC3I,KAAI,CAACiH,IAAI,CAAC,OAAO,EAAEjH,KAAI,CAAC;IAC1B,CAAC;IAED;;;IAGQA,KAAA,CAAAwD,qBAAqB,GAAG;MAC9B,IAAI,CAACxD,KAAI,CAACM,iBAAiB,EAAE;QAC3B;;MAGF,IAAIN,KAAI,CAACsD,mBAAmB,EAAE;QAC5BtD,KAAI,CAACoB,UAAU,CAAC4F,IAAI,CAAC,qBAAqB,EAAE,gBAAgB,EAAE;UAC5D4B,eAAe,EAAE5I,KAAI,CAACsD,mBAAmB,CAACuF,IAAI;UAC9CC,QAAQ,EAAE9I,KAAI,CAACsD,mBAAmB,CAACwF,QAAQ;UAC3CC,WAAW,EAAE/I,KAAI,CAACsD,mBAAmB,CAACyF,WAAW;UACjDC,cAAc,EAAEhJ,KAAI,CAACsD,mBAAmB,CAAC2F,aAAa;UACtDC,GAAG,EAAElJ,KAAI,CAACsD,mBAAmB,CAAC4F;SAC/B,EAAElJ,KAAI,CAACM,iBAAiB,CAAC;;IAE9B,CAAC;IAoGD;;;;;IAKQN,KAAA,CAAAmJ,kBAAkB,GAAG,UAACC,WAA+B;MAC3D,IAAMlF,UAAU,GAAsBlE,KAAI,CAACM,iBAAiB;MAE5D,IAAI4D,UAAU,IAAI,CAACkF,WAAW,EAAE;QAC9B,OAAOd,OAAO,CAACe,MAAM,CAAC,IAAIzK,QAAA,CAAA0K,iBAAiB,CAAC,wDAAwD,CAAC,CAAC;;MAGxGtJ,KAAI,CAACQ,sBAAsB,GAAG4I,WAAW;MACzC,OAAOlF,UAAU,GACbA,UAAU,CAACqF,yBAAyB,CAACH,WAAW,CAAC,GACjDd,OAAO,CAACC,OAAO,EAAE;IACvB,CAAC;IAUD;;;;;IAKQvI,KAAA,CAAAwJ,cAAc,GAAG,UAACX,IAA4B,EAAEY,OAAiB;MACvE,IAAMC,OAAO,GAAkBb,IAAI,KAAK,UAAU,GAC9C7I,KAAI,CAAC2J,sBAAsB,CAACF,OAAO,CAAC,GACpCzJ,KAAI,CAAC4J,qBAAqB,CAACH,OAAO,CAAC;MAEvC,OAAOC,OAAO,CAACG,IAAI,CAAC;QAClB7J,KAAI,CAACoB,UAAU,CAAC4F,IAAI,CAAC,OAAO,EAAK6B,IAAI,iBAAc,EAAE;UACnDiB,gBAAgB,EAAEL;SACnB,EAAEzJ,KAAI,CAACM,iBAAiB,CAAC;MAC5B,CAAC,EAAE,UAAA6F,KAAK;QACNnG,KAAI,CAACoB,UAAU,CAAC+E,KAAK,CAAC,OAAO,EAAK0C,IAAI,wBAAqB,EAAE;UAC3DiB,gBAAgB,EAAEL,OAAO;UACzBpC,OAAO,EAAElB,KAAK,CAACkB;SAChB,EAAErH,KAAI,CAACM,iBAAiB,CAAC;QAE1B,MAAM6F,KAAK;MACb,CAAC,CAAC;IACJ,CAAC;IAh8BC,IAAI1C,MAAM,EAAE;MACV,IAAMsG,IAAI,GAAQtG,MAAa;MAC/B,IAAMuG,OAAO,GAAQD,IAAI,CAACE,SAAS,IAAIF,IAAI,CAACC,OAAO,IAAID,IAAI,CAACG,MAAM;MAElElK,KAAI,CAACsE,mBAAmB,GAAI,CAAC,CAAC0F,OAAO,IAAI,CAAC,CAACA,OAAO,CAACG,OAAO,IAAI,CAAC,CAACH,OAAO,CAACG,OAAO,CAACC,EAAE,IAC5E,CAAC,CAACL,IAAI,CAACM,MAAM,IAAI,CAAC,CAACN,IAAI,CAACM,MAAM,CAACC,SAAU;;IAGjD,IAAItK,KAAI,CAACsE,mBAAmB,EAAE;MAC5BtE,KAAI,CAACiB,IAAI,CAAC+F,IAAI,CAAC,+BAA+B,CAAC;;IAGjD,IAAIuD,SAAS,EAAE;MACb,IAAMC,CAAC,GAAGD,SAAgB;MAC1BvK,KAAI,CAACsD,mBAAmB,GAAGkH,CAAC,CAACtG,UAAU,IAClCsG,CAAC,CAACC,aAAa,IACfD,CAAC,CAACE,gBAAgB;;IAGzB,IAAI5K,KAAK,EAAE;MACTE,KAAI,CAAC2K,KAAK,CAAC7K,KAAK,EAAEC,OAAO,CAAC;KAC3B,MAAM,IAAIA,OAAO,EAAE;MAClB,MAAM,IAAInB,QAAA,CAAAgM,oBAAoB,CAAC,4DAA4D,CAAC;;;EAEhG;EA/QAlD,MAAA,CAAAmD,cAAA,CAAWlL,MAAA,gBAAY;IAJvB;;;;SAIA,SAAAuI,CAAA;MACE,OAAOvI,MAAM,CAACmL,aAAa;IAC7B,CAAC;;;;EAMDpD,MAAA,CAAAmD,cAAA,CAAWlL,MAAA,aAAS;IAJpB;;;;SAIA,SAAAuI,CAAA;MACE;MACA,IAAM6C,CAAC,GAAQ,OAAOC,QAAQ,KAAK,WAAW,GAC1CA,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC,GAAG;QAAEC,WAAW,EAAE;MAAK,CAAE;MAE5D,IAAIC,UAAU;MACd,IAAI;QACFA,UAAU,GAAGJ,CAAC,CAACG,WAAW,IAAI,CAAC,CAACH,CAAC,CAACG,WAAW,CAAC,YAAY,CAAC,CAACE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;OAC9E,CAAC,OAAOC,CAAC,EAAE;QACVF,UAAU,GAAG,KAAK;;MAGpB,IAAIG,aAAa;MACjB,IAAI;QACFA,aAAa,GAAGP,CAAC,CAACG,WAAW,IAAI,CAAC,CAACH,CAAC,CAACG,WAAW,CAAC,6BAA6B,CAAC,CAACE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;OAClG,CAAC,OAAOC,CAAC,EAAE;QACVC,aAAa,GAAG,KAAK;;MAGvB,OAAQA,aAAa,IAAI,CAACH,UAAU,GAAI,KAAK,GAAG,KAAK;IACvD,CAAC;;;;EAKDzD,MAAA,CAAAmD,cAAA,CAAWlL,MAAA,eAAW;IAHtB;;;SAGA,SAAAuI,CAAA;MAAoC,OAAO9I,GAAG,CAACmM,OAAO,EAAE;IAAE,CAAC;;;;EAK3D7D,MAAA,CAAAmD,cAAA,CAAWlL,MAAA,eAAW;IAHtB;;;SAGA,SAAAuI,CAAA;MAAmC,OAAOjJ,CAAC,CAACuM,YAAY;IAAE,CAAC;;;;EAE3D;;;;;EAKO7L,MAAA,CAAA8L,YAAY,GAAnB,UAAoB3L,KAAa,EAAEC,OAA+B;IAChE,OAAO,IAAIjB,WAAA,CAAA4M,aAAa,CAAC5L,KAAK,EAAAsG,QAAA;MAAIuF,YAAY,EAAEhM,MAAM,CAACiM,wBAAwB;IAAE,GAAK7L,OAAO,EAAG;EAClG,CAAC;EAED;;;;EAIOJ,MAAA,CAAAkM,QAAQ,GAAf;IACE,OAAO,uBAAuB;EAChC,CAAC;EAKDnE,MAAA,CAAAmD,cAAA,CAAWlL,MAAA,WAAO;IAHlB;;;SAGA,SAAAuI,CAAA;MAA+B,OAAOjJ,CAAC,CAAC0F,eAAe;IAAE,CAAC;;;;EAiB1D;;;;EAIehF,MAAA,CAAAiM,wBAAwB,GAAvC;IACE,IAAI,CAACjM,MAAM,CAACmL,aAAa,EAAE;MACzB,IAAI,OAAOgB,YAAY,KAAK,WAAW,EAAE;QACvCnM,MAAM,CAACmL,aAAa,GAAG,IAAIgB,YAAY,EAAE;OAC1C,MAAM,IAAI,OAAOC,kBAAkB,KAAK,WAAW,EAAE;QACpDpM,MAAM,CAACmL,aAAa,GAAG,IAAIiB,kBAAkB,EAAE;;;IAGnD,OAAOpM,MAAM,CAACmL,aAAa;EAC7B,CAAC;EAuLD;;;EAGAnL,MAAA,CAAAiE,SAAA,CAAAoI,gBAAgB,GAAhB;IACE,IAAI,CAAC,IAAI,CAAC5L,aAAa,EAAE;MACvB,OAAO,IAAI;;IAEb;IACA;IACA;IACA,OAAO,IAAI,CAACE,iBAAiB,IAAI,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC;EACtD,CAAC;EAED;;;;EAIAR,MAAA,CAAAiE,SAAA,CAAAqI,MAAM,GAAN,UAAOC,OAAwC;IAC7C,OAAO,IAAI,CAACC,WAAW,CAACxM,MAAM,CAACyM,SAAS,CAACC,MAAM,EAAEH,OAAO,CAAC;EAC3D,CAAC;EAgBDvM,MAAA,CAAAiE,SAAA,CAAA0I,OAAO,GAAP,UAAQC,eAA4E,EAC5E5K,gBAAkD,EAClD6K,gBAAmC;IACzC,IAAI,OAAOD,eAAe,KAAK,UAAU,EAAE;MACzC,IAAI,CAACJ,WAAW,CAACxM,MAAM,CAACyM,SAAS,CAACK,OAAO,EAAEF,eAAe,CAAC;MAC3D,OAAO,IAAI;;IAGb,IAAI,CAACG,iBAAiB,CAAC,SAAS,CAAC;IAEjC,IAAI,IAAI,CAACpM,iBAAiB,EAAE;MAC1B,MAAM,IAAI1B,QAAA,CAAA0K,iBAAiB,CAAC,gCAAgC,CAAC;;IAG/D,IAAMqD,MAAM,GAA2BJ,eAAe,IAAI,EAAG;IAC7D5K,gBAAgB,GAAGA,gBAAgB,IAAI,IAAI,CAAC5B,OAAO,IAAI,IAAI,CAACA,OAAO,CAAC4B,gBAAgB,IAAI,EAAG;IAC3F6K,gBAAgB,GAAGA,gBAAgB,IAAI,IAAI,CAACzM,OAAO,CAACyM,gBAAgB;IAEpE,IAAMtI,UAAU,GAAG,IAAI,CAAC5D,iBAAiB,GAAG,IAAI,CAACwH,eAAe,CAAC6E,MAAM,EAAE;MAAEH,gBAAgB,EAAAA;IAAA,CAAE,CAAC;IAE9F;IACA,IAAI,CAACrM,WAAW,CAACsF,MAAM,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,UAAAC,IAAI;MAAI,OAAAA,IAAI,CAACiH,MAAM,EAAE;IAAb,CAAa,CAAC;IAEzD;IACA,IAAI,CAAC7J,UAAU,CAACmF,GAAG,CAACvI,MAAM,CAACkB,SAAS,CAACE,QAAQ,CAAC,CAACoH,IAAI,EAAE;IAErDjE,UAAU,CAAC2I,MAAM,CAAClL,gBAAgB,CAAC;IACnC,IAAI,CAAC6B,qBAAqB,EAAE;IAC5B,OAAOU,UAAU;EACnB,CAAC;EA+BD;;;;;EAKAvE,MAAA,CAAAiE,SAAA,CAAAgC,UAAU,GAAV,UAAWsG,OAAwC;IACjD,OAAO,IAAI,CAACC,WAAW,CAACxM,MAAM,CAACyM,SAAS,CAACtL,UAAU,EAAEoL,OAAO,CAAC;EAC/D,CAAC;EAED;;;EAGAvM,MAAA,CAAAiE,SAAA,CAAAkJ,aAAa,GAAb;IACE,IAAI,CAACJ,iBAAiB,CAAC,eAAe,CAAC;IACvC,IAAI,CAACvJ,cAAc,EAAE;EACvB,CAAC;EAMDuE,MAAA,CAAAmD,cAAA,CAAIlL,MAAA,CAAAiE,SAAA,QAAI;IAJR;;;;SAIA,SAAAsE,CAAA;MACE,OAAO,IAAI,CAACxH,KAAK;IACnB,CAAC;;;;EAED;;;;;EAKAf,MAAA,CAAAiE,SAAA,CAAAuC,KAAK,GAAL,UAAM+F,OAAmC;IACvC,OAAO,IAAI,CAACC,WAAW,CAACxM,MAAM,CAACyM,SAAS,CAACW,KAAK,EAAEb,OAAO,CAAC;EAC1D,CAAC;EAED;;;;;EAKAvM,MAAA,CAAAiE,SAAA,CAAAyE,QAAQ,GAAR,UAAS6D,OAAwC;IAC/C,OAAO,IAAI,CAACC,WAAW,CAACxM,MAAM,CAACyM,SAAS,CAACrL,QAAQ,EAAEmL,OAAO,CAAC;EAC7D,CAAC;EAED;;;;;EAKAvM,MAAA,CAAAiE,SAAA,CAAAoJ,OAAO,GAAP,UAAQd,OAAgC;IACtC,OAAO,IAAI,CAACC,WAAW,CAACxM,MAAM,CAACyM,SAAS,CAAC5K,OAAO,EAAE0K,OAAO,CAAC;EAC5D,CAAC;EAED;;;;;EAKAvM,MAAA,CAAAiE,SAAA,CAAAqJ,KAAK,GAAL,UAAMf,OAAgC;IACpC,OAAO,IAAI,CAACC,WAAW,CAACxM,MAAM,CAACyM,SAAS,CAACzD,KAAK,EAAEuD,OAAO,CAAC;EAC1D,CAAC;EAED;;;;EAIAvM,MAAA,CAAAiE,SAAA,CAAA4B,MAAM,GAAN;IACE,IAAI,CAACvE,IAAI,CAACiM,IAAI,CACZ,sEAAsE,GACtE,4CAA4C,CAC7C;IACD,IAAI,CAACR,iBAAiB,CAAC,QAAQ,CAAC;IAChC,OAAO,OAAO,IAAI,CAACrL,OAAO,KAAK,QAAQ,GAAG,IAAI,CAACA,OAAO,GAAG,SAAS;EACpE,CAAC;EAED;;;;EAIA1B,MAAA,CAAAiE,SAAA,CAAAuJ,gBAAgB,GAAhB;IACE,IAAI,CAACT,iBAAiB,CAAC,kBAAkB,CAAC;IAC1C,IAAI,CAACjL,aAAa,CAACvB,KAAK,GAAG,IAAI;IAC/B,IAAI,CAAC+F,aAAa,EAAE;IACpB,OAAO,IAAI;EACb,CAAC;EAED;;;;;EAKAtG,MAAA,CAAAiE,SAAA,CAAAwJ,cAAc,GAAd,UAAetJ,KAAuB,EAAEuJ,QAAkC;IACxE9O,QAAA,CAAAoF,YAAY,CAACC,SAAS,CAACwJ,cAAc,CAACnN,IAAI,CAAC,IAAI,EAAE6D,KAAK,EAAEuJ,QAAQ,CAAC;IACjE,OAAO,IAAI;EACb,CAAC;EAED;;;;;EAKA1N,MAAA,CAAAiE,SAAA,CAAA+G,KAAK,GAAL,UAAM7K,KAAa,EAAEC,OAA6B;IAAlD,IAAAC,KAAA;IAAqB,IAAAD,OAAA;MAAAA,OAAA,KAA6B;IAAA;IAChD,IAAIf,MAAA,CAAAsO,YAAY,EAAE,EAAE;MAClB,MAAM,IAAI1O,QAAA,CAAA2O,iBAAiB,CACzB,yGAAyG,GACzG,8GAA8G,GAC9G,iEAAiE,GACjE,wEAAwE,CACzE;;IAEH,IAAI,CAAC5N,MAAM,CAAC6N,WAAW,IAAI,CAACzN,OAAO,CAAC0N,oBAAoB,EAAE;MACxD,IAAIhK,MAAM,IAAIA,MAAM,CAACiK,QAAQ,IAAIjK,MAAM,CAACiK,QAAQ,CAACC,QAAQ,KAAK,OAAO,EAAE;QACrE,MAAM,IAAI/O,QAAA,CAAA2O,iBAAiB,CAAC,kQAGf,CAAC;;MAGhB,MAAM,IAAI3O,QAAA,CAAA2O,iBAAiB,CAAC,kQAGW,CAAC;;IAG1C,IAAI,CAACzN,KAAK,EAAE;MACV,MAAM,IAAIlB,QAAA,CAAAgM,oBAAoB,CAAC,sCAAsC,CAAC;;IAGxElD,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC5H,OAAO,EAAEA,OAAO,CAAC;IAEpC,IAAI,CAACkB,IAAI,CAAC2M,eAAe,CACvB,IAAI,CAAC7N,OAAO,CAACmC,KAAK,GACdrD,KAAA,CAAAqC,OAAG,CAAC2M,MAAM,CAACC,KAAK,GAChB,IAAI,CAAC/N,OAAO,CAAC8C,QAAQ,GACnBhE,KAAA,CAAAqC,OAAG,CAAC2M,MAAM,CAACE,IAAI,GACflP,KAAA,CAAAqC,OAAG,CAAC2M,MAAM,CAACG,MAAM,CACxB;IAED,IAAI,CAACzN,YAAY,GAAG,IAAI,CAACR,OAAO,CAACkO,QAAQ,GACrC,CAAC,WAAS,IAAI,CAAClO,OAAO,CAACkO,QAAQ,YAAS,CAAC,GACzClP,SAAA,CAAAmP,cAAc,CACZ,IAAI,CAACnO,OAAO,CAACoO,IAAI,EACjB,IAAI,CAACpO,OAAO,CAACyF,MAAM,EACnB,IAAI,CAACvE,IAAI,CAACiM,IAAI,CAACkB,IAAI,CAAC,IAAI,CAACnN,IAAI,CAAC,CAC/B,CAACoN,GAAG,CAAC,UAACC,GAAW;MAAK,kBAASA,GAAG,YAAS;IAArB,CAAqB,CAAC;IAEjD,IAAI,OAAO3O,MAAM,CAAC4O,qBAAqB,KAAK,WAAW,EAAE;MACvD5O,MAAM,CAAC4O,qBAAqB,GAAG,OAAO9K,MAAM,KAAK,WAAW,IACvD,OAAO+K,iBAAiB,KAAK,WAAW,IACxC,OAAOC,iBAAiB,KAAK,WAAW,GAC3CzP,MAAA,CAAA0P,oBAAoB,CAACjL,MAAM,EAAEA,MAAM,CAAC8G,SAAS,EAAEiE,iBAAiB,EAAEC,iBAAiB,CAAC,GACpF,KAAK;;IAGT9O,MAAM,CAACiM,wBAAwB,EAAE;IAEjC,IAAIjM,MAAM,CAACmL,aAAa,IAAI/K,OAAO,CAAC4O,aAAa,EAAE;MACjD,IAAI,CAAChP,MAAM,CAACiP,eAAe,EAAE;QAC3BjP,MAAM,CAACiP,eAAe,GAAG,IAAIjQ,gBAAA,CAAAuC,OAAc,CAACvB,MAAM,CAACmL,aAAa,CAAC;;KAEpE,MAAM,IAAInL,MAAM,CAACiP,eAAe,EAAE;MACjCjP,MAAM,CAACiP,eAAe,CAACC,OAAO,EAAE;MAChC,OAAOlP,MAAM,CAACiP,eAAe;;IAG/B,IAAI,IAAI,CAACxO,aAAa,EAAE;MACtB,IAAI,CAACa,IAAI,CAAC+F,IAAI,CAAC,6DAA6D,CAAC;MAC7E,IAAI,CAAC8H,WAAW,CAAChP,KAAK,CAAC;MACvB,OAAO,IAAI;;IAGb,IAAI,CAACM,aAAa,GAAG,IAAI;IAEzB,IAAI,IAAI,CAACL,OAAO,CAACoC,IAAI,EAAE;MACpB,IAAI,CAACpC,OAAO,CAAC4C,cAAsB,CAACoM,QAAQ,GAAG,CAAC;QAAEC,QAAQ,EAAE;MAAI,CAAE,CAAC;;IAGtE,IAAMC,aAAa,GAAG,SAAAA,CAACC,GAA2B,EAAEpK,KAAe;MACjE,IAAI,CAACpF,mBAAmB,EAAE;QACxBM,KAAI,CAACiB,IAAI,CAACiM,IAAI,CAAC,uEAAuE,GACpF,sEAAsE,CAAC;QACzExN,mBAAmB,GAAG,IAAI;;MAG5B,IAAI,OAAOoF,KAAK,KAAK,WAAW,EAAE;QAChC9E,KAAI,CAACW,cAAc,CAACuO,GAAG,CAAC,GAAGpK,KAAK;;MAGlC,OAAO9E,KAAI,CAACW,cAAc,CAACuO,GAAG,CAAC;IACjC,CAAC;IAED,CAACvP,MAAM,CAACkB,SAAS,CAACC,UAAU,EAAEnB,MAAM,CAACkB,SAAS,CAACE,QAAQ,EAAEpB,MAAM,CAACkB,SAAS,CAACG,QAAQ,CAAC,CAC9E0E,OAAO,CAAC,UAACyJ,SAA2B;MACvCnP,KAAI,CAACK,MAAM,CAAC8O,SAAS,CAAC,GAAGF,aAAa,CAACb,IAAI,CAAC,IAAI,EAAEe,SAAS,CAAC;IAC9D,CAAC,CAAC;IAEF,IAAMC,aAAa,GAAqC;MACtDxJ,UAAU,EAAE;QAAEyJ,QAAQ,EAAE,YAAY;QAAEC,WAAW,EAAE;MAAI,CAAE;MACzDC,KAAK,EAAE;QAAEF,QAAQ,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAI,CAAE;MAChDE,KAAK,EAAE;QAAEH,QAAQ,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAI,CAAE;MAChDG,KAAK,EAAE;QAAEJ,QAAQ,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAI,CAAE;MAChDI,KAAK,EAAE;QAAEL,QAAQ,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAI,CAAE;MAChDK,KAAK,EAAE;QAAEN,QAAQ,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAI,CAAE;MAChDM,KAAK,EAAE;QAAEP,QAAQ,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAI,CAAE;MAChDO,KAAK,EAAE;QAAER,QAAQ,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAI,CAAE;MAChDQ,KAAK,EAAE;QAAET,QAAQ,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAI,CAAE;MAChDS,KAAK,EAAE;QAAEV,QAAQ,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAI,CAAE;MAChDU,KAAK,EAAE;QAAEX,QAAQ,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAI,CAAE;MAChDW,KAAK,EAAE;QAAEZ,QAAQ,EAAE,WAAW;QAAEC,WAAW,EAAE;MAAI,CAAE;MACnDY,KAAK,EAAE;QAAEb,QAAQ,EAAE,WAAW;QAAEC,WAAW,EAAE;MAAI,CAAE;MACnDjH,QAAQ,EAAE;QAAEgH,QAAQ,EAAE,UAAU;QAAEc,UAAU,EAAE;MAAI,CAAE;MACpDC,QAAQ,EAAE;QAAEf,QAAQ,EAAE,UAAU;QAAEC,WAAW,EAAE;MAAI;KACpD;IAED,KAAmB,IAAAe,EAAA,IAA0B,EAA1BzP,EAAA,GAAA8G,MAAM,CAAC4I,IAAI,CAAClB,aAAa,CAAC,EAA1BiB,EAAA,GAAAzP,EAAA,CAAA2P,MAA0B,EAA1BF,EAAA,EAA0B,EAAE;MAA1C,IAAMG,MAAI,GAAA5P,EAAA,CAAAyP,EAAA;MACb,IAAMI,QAAQ,GAAqBrB,aAAa,CAACoB,MAAI,CAAC;MAEtD,IAAME,UAAU,GAAczR,CAAC,CAAC0R,eAAe,SAAIF,QAAQ,CAACpB,QAAQ,SAAI1P,MAAM,CAAC2K,SAAW,IACtF,YAAUrL,CAAC,CAAC0F,eAAiB;MAEjC,IAAMiM,QAAQ,GAAW,IAAI,CAAC7Q,OAAO,CAACM,MAAM,IAAI,IAAI,CAACN,OAAO,CAACM,MAAM,CAACmQ,MAAwB,CAAC,IAAIE,UAAU;MAC3G,IAAMG,KAAK,GAAQ,IAAI,IAAI,CAAC9Q,OAAO,CAAC6C,YAAY,CAAC4N,MAAI,EAAEI,QAAQ,EAAE;QAC/DjF,YAAY,EAAE,IAAI,CAAC5L,OAAO,CAAC+Q,yBAAyB,GAAG,IAAI,GAAGnR,MAAM,CAACgM,YAAY;QACjF2D,WAAW,EAAEmB,QAAQ,CAACnB,WAAW;QACjCa,UAAU,EAAEM,QAAQ,CAACN;OACtB,CAAC;MAEF,IAAI,CAACpN,UAAU,CAACgO,GAAG,CAACP,MAAwB,EAAEK,KAAK,CAAC;;IAGtD,IAAI,CAACzP,UAAU,GAAG,CAAC,IAAI,CAACrB,OAAO,CAACb,SAAS,IAAIA,SAAS,EAAE,eAAe,EAAEY,KAAK,EAAE;MAC9EkR,cAAc,EAAE,IAAI,CAAC/M,qBAAqB;MAC1CgN,IAAI,EAAE,IAAI,CAAClR,OAAO,CAACsC,OAAO;MAC1B6O,QAAQ,EAAE;QACRC,QAAQ,EAAE,IAAI,CAACpR,OAAO,CAACqR,OAAO;QAC9BC,WAAW,EAAE,IAAI,CAACtR,OAAO,CAACuR;;KAEtB,CAAC;IAET,IAAI,IAAI,CAACvR,OAAO,CAACwR,aAAa,KAAK,KAAK,EAAE;MACxC,IAAI,CAACnQ,UAAU,CAACoQ,OAAO,EAAE;KAC1B,MAAM;MACL,IAAI,CAACpQ,UAAU,CAACqQ,EAAE,CAAC,OAAO,EAAE,UAACtL,KAAY;QACvCnG,KAAI,CAACiB,IAAI,CAACiM,IAAI,CAAC,6BAA6B,EAAE/G,KAAK,CAAC;MACtD,CAAC,CAAC;;IAGJ,IAAI,IAAI,CAAC7C,mBAAmB,IAAI,OAAO,IAAI,CAACA,mBAAmB,CAACoO,gBAAgB,KAAK,UAAU,EAAE;MAC/F,IAAI,CAACpO,mBAAmB,CAACoO,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAClO,qBAAqB,CAAC;;IAGjF,IAAI,CAACtD,KAAK,GAAG,KAAK,IAAI,CAACH,OAAO,CAAC4R,WAAW,IAAIlT,aAAA,CAAAyC,OAAW,EACpD,IAAI,CAACsI,cAAc,EAAE,IAAI,CAACL,kBAAkB,EAAE,IAAI,CAACpJ,OAAO,CAACV,YAAY,IAAIA,YAAY,EAAE;MAC5FsM,YAAY,EAAEhM,MAAM,CAACgM,YAAY;MACjCiG,aAAa,EAAE,IAAI,CAACjR,cAAc;MAClCkR,gBAAgB,EAAE,IAAI,CAAC9R,OAAO,CAAC8R;KAChC,CAAgB;IAEjB,IAAI,CAAC3R,KAAK,CAACuR,EAAE,CAAC,cAAc,EAAE,UAACK,iBAAoC;MACjE,IAAM9F,gBAAgB,GAAsBhM,KAAI,CAACM,iBAAiB;MAClE,IAAMyR,SAAS,GAAaD,iBAAiB,CAACzD,GAAG,CAAC,UAAC2D,MAAuB;QAAK,OAAAA,MAAM,CAACC,QAAQ;MAAf,CAAe,CAAC;MAE/FjS,KAAI,CAACoB,UAAU,CAAC4F,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE;QAC7CkL,sBAAsB,EAAEH;OACzB,EAAE/F,gBAAgB,CAAC;MAEpB,IAAIA,gBAAgB,EAAE;QACpBA,gBAAgB,CAACmG,WAAW,CAACC,sBAAsB,EAAE;;IAEzD,CAAC,CAAC;IAEF,IAAI,CAAC3Q,aAAa,CAACvB,KAAK,GAAG,CAAC,IAAI,CAACH,OAAO,CAACyC,UAAU;IACnD,IAAI,CAACsM,WAAW,CAAChP,KAAK,CAAC;IAEvB;IACA,IAAI,OAAO2D,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACiO,gBAAgB,EAAE;MAC5DjO,MAAM,CAACiO,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACxO,OAAO,CAAC;MAC/CO,MAAM,CAACiO,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAACxO,OAAO,CAAC;MACjD,IAAI,IAAI,CAACnD,OAAO,CAAC6B,eAAe,EAAE;QAChC6B,MAAM,CAACiO,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAChO,aAAa,CAAC;;;IAI/D;IACA;IACA;IACA;IACA,IAAI,CAAC+N,EAAE,CAAC9R,MAAM,CAACyM,SAAS,CAACW,KAAK,EAAE;MAC9B,IAAI/M,KAAI,CAACqS,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAAE;;MACvCrS,KAAI,CAACiB,IAAI,CAAC+F,IAAI,CAAC,kCAAkC,CAAC;IACpD,CAAC,CAAC;IAEF,OAAO,IAAI;EACb,CAAC;EAED;;;EAGArH,MAAA,CAAAiE,SAAA,CAAA0O,MAAM,GAAN;IACE,IAAI,CAAC5F,iBAAiB,CAAC,QAAQ,CAAC;IAChC,OAAO,IAAI,CAACpM,iBAAiB,GAAGX,MAAM,CAAC4B,MAAM,CAACgR,IAAI,GAAG,IAAI,CAACjR,OAAO;EACnE,CAAC;EAED;;;;EAIA3B,MAAA,CAAAiE,SAAA,CAAAiI,QAAQ,GAAR;IACE,OAAO,0BAA0B;EACnC,CAAC;EAED;;;EAGAlM,MAAA,CAAAiE,SAAA,CAAA4O,kBAAkB,GAAlB;IACE,IAAI,CAAC9F,iBAAiB,CAAC,oBAAoB,CAAC;IAE5C,IAAI,CAACjL,aAAa,CAACvB,KAAK,GAAG,KAAK;IAChC,IAAI,CAAC+F,aAAa,EAAE;IACpB,OAAO,IAAI;EACb,CAAC;EAED;;;;EAIAtG,MAAA,CAAAiE,SAAA,CAAAkL,WAAW,GAAX,UAAYhP,KAAa;IACvB,IAAI,CAAC4M,iBAAiB,CAAC,aAAa,CAAC;IACrC,IAAI,CAAC5M,KAAK,GAAGA,KAAK;IAClB,IAAI,CAAC2S,QAAQ,CAAC3S,KAAK,CAAC;EACtB,CAAC;EAED;;;;;EAKQH,MAAA,CAAAiE,SAAA,CAAAuI,WAAW,GAAnB,UAAoBgD,SAA2B,EAAEjD,OAAgC;IAC/E,IAAI,CAACzM,qBAAqB,EAAE;MAC1B,IAAI,CAACwB,IAAI,CAACiM,IAAI,CAAC,gRAEuDiC,SAAS,gBAAa,CAAC;MAC7F1P,qBAAqB,GAAG,IAAI;;IAG9B,IAAI,CAACiT,WAAW,CAACvD,SAAS,EAAEjD,OAAO,CAAC;IACpC,OAAO,IAAI;EACb,CAAC;EAED;;;;;;;;;;EAUQvM,MAAA,CAAAiE,SAAA,CAAA+O,UAAU,GAAlB,UAAmB7O,KAAsB;IAAzC,IAAA9D,KAAA;IAA2C,IAAA4S,IAAA;SAAA,IAAAvC,EAAA,IAAc,EAAdA,EAAA,GAAAwC,SAAA,CAAAtC,MAAc,EAAdF,EAAA,EAAc;MAAduC,IAAA,CAAAvC,EAAA,QAAAwC,SAAA,CAAAxC,EAAA;;IACzCyC,UAAU,CAAC;MAAM,OAAA9S,KAAI,CAACiH,IAAI,CAAA8L,KAAA,CAAT/S,KAAI,EAAAgT,cAAA,EAAMlP,KAAK,GAAK8O,IAAI;IAAxB,CAAyB,CAAC;EAC7C,CAAC;EAgED;;;;EAIQjT,MAAA,CAAAiE,SAAA,CAAA2C,eAAe,GAAvB,UAAwBxB,OAAe;IACrC,OAAO,IAAI,CAAC5E,WAAW,CAAC8S,IAAI,CAAC,UAAAtN,IAAI;MAAI,OAAAA,IAAI,CAACX,UAAU,CAACC,OAAO,KAAKF,OAAO,IACnEY,IAAI,CAACP,oBAAoB,KAAKL,OAAO;IADL,CACK,CAAC,IAAI,IAAI;EACrD,CAAC;EAED;;;;;EAKQpF,MAAA,CAAAiE,SAAA,CAAAkE,eAAe,GAAvB,UAAwBoL,WAAmC,EAAEnT,OAA4B;IAAzF,IAAAC,KAAA;IACE,IAAI,OAAOL,MAAM,CAAC4O,qBAAqB,KAAK,WAAW,EAAE;MACvD,MAAM,IAAI3P,QAAA,CAAA0K,iBAAiB,CAAC,kCAAkC,CAAC;;IAGjE,IAAM6J,MAAM,GAAsB;MAChCC,WAAW,EAAE,IAAI,CAAClT,KAAK;MACvBb,YAAY,EAAE,IAAI,CAACU,OAAO,CAACV,YAAY,IAAIA,YAAY;MACvDqP,oBAAoB,EAAE/O,MAAM,CAAC4O,qBAAqB;MAClD8E,OAAO,EAAE,IAAI,CAACpQ,MAAM;MACpBqQ,SAAS,EAAE,IAAI,CAAClS,UAAU;MAC1B2B,UAAU,EAAE,IAAI,CAACA;KAClB;IAEDhD,OAAO,GAAG2H,MAAM,CAACC,MAAM,CAAC;MACtB4L,WAAW,EAAE,IAAI,CAACxT,OAAO,CAACwT,WAAW,IAChC,IAAI,CAACxT,OAAO,CAACyT,kBAAkB,IAC/BpU,GAAG,CAACqU,cAAc;MACvBjF,iBAAiB,EAAE,IAAI,CAACzO,OAAO,CAACyO,iBAAiB;MACjD7M,gBAAgB,EAAE,IAAI,CAAC5B,OAAO,CAAC4B,gBAAgB;MAC/C+R,YAAY,EAAE,SAAAA,CAAC/N,IAAgB;QAC7B,IAAI,CAAC3F,KAAI,CAACM,iBAAiB,IAAIN,KAAI,CAACM,iBAAiB,KAAKqF,IAAI,EAAE;UAC9D;;QAGF3F,KAAI,CAACM,iBAAiB,CAACsF,UAAU,EAAE;QACnC5F,KAAI,CAAC2T,iBAAiB,CAAC3T,KAAI,CAACM,iBAAiB,CAAC;MAChD,CAAC;MACDuB,gBAAgB,EAAE,IAAI,CAAC9B,OAAO,CAAC8B,gBAAgB;MAC/C+R,cAAc,EAAEjU,MAAM,CAACiP,eAAe;MACtCzM,IAAI,EAAE,IAAI,CAACpC,OAAO,CAACoC,IAAI;MACvBC,gBAAgB,EAAE,IAAI,CAACrC,OAAO,CAACqC,gBAAgB;MAC/CyR,kBAAkB,EAAE,IAAI,CAAC9T,OAAO,CAAC8T,kBAAkB;MACnDvR,4BAA4B,EAAE,IAAI,CAACvC,OAAO,CAACuC,4BAA4B;MACvEwR,cAAc,EAAE,SAAAA,CAAA;QAA0B,OAAA9T,KAAI,CAACD,OAAO,CAACgU,eAAe,IAAI/T,KAAI,CAACQ,sBAAsB;MAA3D,CAA2D;MACrGwT,UAAU,EAAE,SAAAA,CAAA;QAAgB,OAAAhU,KAAI,CAACS,kBAAkB;MAAvB,CAAuB;MACnDwT,iBAAiB,EAAE,IAAI,CAAClU,OAAO,CAACkU,iBAAiB;MACjDvR,SAAS,EAAE,IAAI,CAAC3C,OAAO,CAAC2C,SAAS;MACjC8J,gBAAgB,EAAE,IAAI,CAACzM,OAAO,CAACyM,gBAAgB,IAAI;QAAEjK,UAAU,EAAE,IAAI,CAACxC,OAAO,CAACwC;MAAU,CAAE;MAC1FI,cAAc,EAAE,IAAI,CAAC5C,OAAO,CAAC4C,cAAc;MAC3CuR,oBAAoB,EAAE,SAAAA,CAAA;QAAM,OAAAlU,KAAI,CAACW,cAAc,CAACiF,UAAU;MAA9B,CAA8B;MAC1DsN,WAAW,EAAAA;KACZ,EAAEnT,OAAO,CAAC;IAEX,IAAMmE,UAAU,GAAG,IAAI,IAAI,CAACnE,OAAO,CAACkC,iBAAiB,CAACkR,MAAM,EAAEpT,OAAO,CAAC;IACtE,IAAI,CAACqB,UAAU,CAAC4F,IAAI,CAAC,UAAU,EAAE,MAAM,EAAE;MACvCwH,iBAAiB,EAAE2F,OAAO,CAAC,IAAI,CAACpU,OAAO,CAACyO,iBAAiB,CAAC;MAC1DqD,gBAAgB,EAAEsC,OAAO,CAAC,IAAI,CAACpU,OAAO,CAAC8R,gBAAgB,CAAC;MACxDxS,YAAY,EAAE8U,OAAO,CAAC,IAAI,CAACpU,OAAO,CAACV,YAAY;KAChD,EAAE6E,UAAU,CAAC;IAEdA,UAAU,CAAC+D,IAAI,CAAC,QAAQ,EAAE;MACxBjI,KAAI,CAAC2T,iBAAiB,CAACzP,UAAU,CAAC;MAClClE,KAAI,CAACM,iBAAiB,GAAG4D,UAAU;MACnC,IAAIlE,KAAI,CAACE,KAAK,EAAE;QACdF,KAAI,CAACE,KAAK,CAACkU,wBAAwB,EAAE;;MAGvC,IAAIlQ,UAAU,CAACoB,SAAS,KAAK5G,YAAA,CAAAwC,OAAU,CAACmT,aAAa,CAACrT,QAAQ,IAAIhB,KAAI,CAACW,cAAc,CAACyP,QAAQ,EAAE;QAC9FpQ,KAAI,CAAC+C,UAAU,CAACmF,GAAG,CAACvI,MAAM,CAACkB,SAAS,CAACG,QAAQ,CAAC,CAACoH,IAAI,EAAE;;MAGvD,IAAMkM,IAAI,GAAQ;QAAEnG,IAAI,EAAEnO,KAAI,CAACU,KAAK,IAAIV,KAAI,CAACqB;MAAO,CAAE;MACtD,IAAMkT,YAAY,GAAGvU,KAAI,CAACD,OAAO,CAACoO,IAAI;MACtC,IAAIoG,YAAY,EAAE;QAChBD,IAAI,CAAC,eAAe,CAAC,GAAGE,KAAK,CAACC,OAAO,CAACF,YAAY,CAAC,GAAGA,YAAY,GAAG,CAACA,YAAY,CAAC;;MAGrFvU,KAAI,CAACoB,UAAU,CAAC4F,IAAI,CAAC,UAAU,EAAE,MAAM,EAAEsN,IAAI,EAAEpQ,UAAU,CAAC;MAC1DlE,KAAI,CAAC2S,UAAU,CAAC,SAAS,EAAEzO,UAAU,CAAC;IACxC,CAAC,CAAC;IAEFA,UAAU,CAACwO,WAAW,CAAC,OAAO,EAAE,UAACvM,KAAuB;MACtD,IAAIjC,UAAU,CAACoO,MAAM,EAAE,KAAK,QAAQ,EAAE;QACpCtS,KAAI,CAAC2T,iBAAiB,CAACzP,UAAU,CAAC;;MAEpC,IAAIlE,KAAI,CAACE,KAAK,EAAE;QACdF,KAAI,CAACE,KAAK,CAACwU,uBAAuB,EAAE;;MAEtC1U,KAAI,CAAC2U,uBAAuB,EAAE;MAC9B3U,KAAI,CAAC2S,UAAU,CAAC,OAAO,EAAExM,KAAK,CAAC;IACjC,CAAC,CAAC;IAEFjC,UAAU,CAAC+D,IAAI,CAAC,QAAQ,EAAE;MACxBjI,KAAI,CAACiB,IAAI,CAAC+F,IAAI,CAAC,eAAa9C,UAAU,CAACc,UAAU,CAACC,OAAS,CAAC;MAC5DjF,KAAI,CAAC2T,iBAAiB,CAACzP,UAAU,CAAC;MAClC,IAAIlE,KAAI,CAACE,KAAK,EAAE;QACdF,KAAI,CAACE,KAAK,CAACwU,uBAAuB,EAAE;;MAEtC1U,KAAI,CAAC2U,uBAAuB,EAAE;MAC9B3U,KAAI,CAAC2S,UAAU,CAAC,QAAQ,EAAEzO,UAAU,CAAC;IACvC,CAAC,CAAC;IAEFA,UAAU,CAAC+D,IAAI,CAAC,YAAY,EAAE;MAC5B,IAAIjI,KAAI,CAACE,KAAK,EAAE;QACdF,KAAI,CAACE,KAAK,CAACwU,uBAAuB,EAAE;;MAEtC1U,KAAI,CAAC2T,iBAAiB,CAACzP,UAAU,CAAC;MAClClE,KAAI,CAAC2S,UAAU,CAAC,YAAY,EAAEzO,UAAU,CAAC;IAC3C,CAAC,CAAC;IAEFA,UAAU,CAAC+D,IAAI,CAAC,QAAQ,EAAE;MACxBjI,KAAI,CAACiB,IAAI,CAAC+F,IAAI,CAAC,eAAa9C,UAAU,CAACc,UAAU,CAACC,OAAS,CAAC;MAC5D,IAAIjF,KAAI,CAACE,KAAK,EAAE;QACdF,KAAI,CAACE,KAAK,CAACwU,uBAAuB,EAAE;;MAEtC1U,KAAI,CAAC2T,iBAAiB,CAACzP,UAAU,CAAC;MAClClE,KAAI,CAAC2U,uBAAuB,EAAE;IAChC,CAAC,CAAC;IAEFzQ,UAAU,CAAC+D,IAAI,CAAC,gBAAgB,EAAE;MAChC,IAAI/D,UAAU,CAACoO,MAAM,EAAE,KAAK5T,YAAA,CAAAwC,OAAU,CAAC0T,KAAK,CAACC,OAAO,EAAE;QACpD;;MAEF,IAAI7U,KAAI,CAACE,KAAK,EAAE;QACdF,KAAI,CAACE,KAAK,CAACwU,uBAAuB,EAAE;;MAEtC1U,KAAI,CAAC2T,iBAAiB,CAACzP,UAAU,CAAC;MAClClE,KAAI,CAAC2U,uBAAuB,EAAE;IAChC,CAAC,CAAC;IAEF,OAAOzQ,UAAU;EACnB,CAAC;EAED;;;EAGQvE,MAAA,CAAAiE,SAAA,CAAA+Q,uBAAuB,GAA/B;IACE,IAAI,CAAC,IAAI,CAACxU,WAAW,CAACoQ,MAAM,EAAE;MAC5B,IAAI,CAACxN,UAAU,CAACmF,GAAG,CAACvI,MAAM,CAACkB,SAAS,CAACE,QAAQ,CAAC,CAACoH,IAAI,EAAE;;EAEzD,CAAC;EA4HD;;;;EAIQxI,MAAA,CAAAiE,SAAA,CAAA+P,iBAAiB,GAAzB,UAA0BzP,UAAsB;IAC9C,IAAI,IAAI,CAAC5D,iBAAiB,KAAK4D,UAAU,EAAE;MACzC,IAAI,CAAC5D,iBAAiB,GAAG,IAAI;;IAG/B,KAAK,IAAIwU,CAAC,GAAG,IAAI,CAAC3U,WAAW,CAACoQ,MAAM,GAAG,CAAC,EAAEuE,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACrD,IAAI5Q,UAAU,KAAK,IAAI,CAAC/D,WAAW,CAAC2U,CAAC,CAAC,EAAE;QACtC,IAAI,CAAC3U,WAAW,CAACsF,MAAM,CAACqP,CAAC,EAAE,CAAC,CAAC;;;EAGnC,CAAC;EAED;;;EAGQnV,MAAA,CAAAiE,SAAA,CAAAqC,aAAa,GAArB;IACE,IAAI,CAAC,IAAI,CAAChD,MAAM,EAAE;MAAE;;IAEpB,IAAI,CAACA,MAAM,CAACwP,QAAQ,CAAC;MAAEvS,KAAK,EAAE,IAAI,CAACuB,aAAa,CAACvB;IAAK,CAAE,CAAC;IACzD,IAAI,IAAI,CAACuB,aAAa,CAACvB,KAAK,EAAE;MAC5B,IAAI,CAAC6U,uBAAuB,EAAE;KAC/B,MAAM;MACL,IAAI,CAAC3R,sBAAsB,EAAE;;EAEjC,CAAC;EAED;;;;EAIQzD,MAAA,CAAAiE,SAAA,CAAAoR,YAAY,GAApB,UAAqBlV,KAAa;IAChC,IAAI,CAACmB,IAAI,CAAC+F,IAAI,CAAC,gBAAgB,CAAC;IAChC,IAAI,CAAC/D,MAAM,GAAG,IAAI,CAAClD,OAAO,CAAC0C,cAAc,CAAC3C,KAAK,EAAE,IAAI,CAACS,YAAY,EAAE;MAClE0U,YAAY,EAAE,IAAI,CAAClV,OAAO,CAACkV;KAC5B,CAAC;IAEF,IAAI,CAAChS,MAAM,CAACyP,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC7M,iBAAiB,CAAC;IACxD,IAAI,CAAC5C,MAAM,CAACyP,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC5M,qBAAqB,CAAC;IAChE,IAAI,CAAC7C,MAAM,CAACyP,WAAW,CAAC,OAAO,EAAE,IAAI,CAACxM,iBAAiB,CAAC;IACxD,IAAI,CAACjD,MAAM,CAACyP,WAAW,CAAC,QAAQ,EAAE,IAAI,CAACxL,kBAAkB,CAAC;IAC1D,IAAI,CAACjE,MAAM,CAACyP,WAAW,CAAC,SAAS,EAAE,IAAI,CAACjK,mBAAmB,CAAC;IAC5D,IAAI,CAACxF,MAAM,CAACyP,WAAW,CAAC,OAAO,EAAE,IAAI,CAAChK,iBAAiB,CAAC;EAC1D,CAAC;EAED;;;;;EAKQ/I,MAAA,CAAAiE,SAAA,CAAA4E,uBAAuB,GAA/B,UAAgCtE,UAAsB,EAAEkE,IAAc;IAAtE,IAAApI,KAAA;IACE,IAAIkV,OAAqB;IACzB,OAAO5M,OAAO,CAAC6M,IAAI,CAAC,CAClB/M,IAAI,EAAE,EACN,IAAIE,OAAO,CAAC,UAACC,OAAO,EAAEc,MAAM;MAC1B6L,OAAO,GAAGpC,UAAU,CAAC;QACnB,IAAMsC,GAAG,GAAG,qFAAqF;QACjG/L,MAAM,CAAC,IAAI0D,KAAK,CAACqI,GAAG,CAAC,CAAC;MACxB,CAAC,EAAE5V,qBAAqB,CAAC;IAC3B,CAAC,CAAC,CACH,CAAC,CAAC6V,KAAK,CAAC,UAAAC,MAAM;MACbtV,KAAI,CAACiB,IAAI,CAAC+F,IAAI,CAACsO,MAAM,CAACjO,OAAO,CAAC;IAChC,CAAC,CAAC,CAACwC,IAAI,CAAC;MACN0L,YAAY,CAACL,OAAO,CAAC;MACrBlV,KAAI,CAACiH,IAAI,CAAC,UAAU,EAAE/C,UAAU,CAAC;IACnC,CAAC,CAAC;EACJ,CAAC;EAED;;;EAGQvE,MAAA,CAAAiE,SAAA,CAAAmR,uBAAuB,GAA/B;IAAA,IAAA/U,KAAA;IACE,IAAI,CAACoD,sBAAsB,EAAE;IAC7B,IAAI,CAACN,QAAQ,GAAGgQ,UAAU,CAAC;MACzB9S,KAAI,CAACiG,aAAa,EAAE;IACtB,CAAC,EAAE1G,qBAAqB,CAAC;EAC3B,CAAC;EAED;;;EAGQI,MAAA,CAAAiE,SAAA,CAAAR,sBAAsB,GAA9B;IACE,IAAI,IAAI,CAACN,QAAQ,EAAE;MACjByS,YAAY,CAAC,IAAI,CAACzS,QAAQ,CAAC;;EAE/B,CAAC;EAED;;;;EAIQnD,MAAA,CAAAiE,SAAA,CAAA8I,iBAAiB,GAAzB,UAA0B8I,UAAkB;IAC1C,IAAI,CAAC,IAAI,CAACpV,aAAa,EAAE;MAAE,MAAM,IAAIxB,QAAA,CAAA0K,iBAAiB,CAAC,gCAA8BkM,UAAY,CAAC;;EACpG,CAAC;EAoBD;;;;EAIQ7V,MAAA,CAAAiE,SAAA,CAAA+F,sBAAsB,GAA9B,UAA+BF,OAAiB;IAC9C,OAAOnB,OAAO,CAACC,OAAO,CAAC,IAAI,CAACxF,UAAU,CAACmF,GAAG,CAACvI,MAAM,CAACkB,SAAS,CAACE,QAAQ,CAAC,CAAC0U,UAAU,CAAChM,OAAO,CAAC,CAAC;EAC5F,CAAC;EA0BD;;;;;EAKQ9J,MAAA,CAAAiE,SAAA,CAAAgG,qBAAqB,GAA7B,UAA8BH,OAAiB;IAC7C+K,KAAK,CAACkB,IAAI,CAAC,IAAI,CAAC3S,UAAU,CAAC4S,OAAO,EAAE,CAAC,CAClCC,MAAM,CAAC,UAAAC,KAAK;MAAI,OAAAA,KAAK,CAAC,CAAC,CAAC,KAAKlW,MAAM,CAACkB,SAAS,CAACE,QAAQ;IAAtC,CAAsC,CAAC,CACvD2E,OAAO,CAAC,UAAAmQ,KAAK;MAAI,OAAAA,KAAK,CAAC,CAAC,CAAC,CAACJ,UAAU,CAAChM,OAAO,CAAC;IAA5B,CAA4B,CAAC;IAEjD,IAAI,CAAChJ,kBAAkB,GAAGgJ,OAAO;IACjC,IAAMvF,UAAU,GAAG,IAAI,CAAC5D,iBAAiB;IACzC,OAAO4D,UAAU,GACbA,UAAU,CAAC4R,WAAW,CAACrM,OAAO,CAAC,GAC/BnB,OAAO,CAACC,OAAO,EAAE;EACvB,CAAC;EAED;;;;EAIQ5I,MAAA,CAAAiE,SAAA,CAAA6O,QAAQ,GAAhB,UAAiB3S,KAAa;IAC5B,IAAI,IAAI,CAACmD,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAAC8S,QAAQ,CAACjW,KAAK,CAAC;MAC3B,IAAI,CAACsB,UAAU,CAAC2U,QAAQ,CAACjW,KAAK,CAAC;KAChC,MAAM;MACL,IAAI,CAACkV,YAAY,CAAClV,KAAK,CAAC;;EAE5B,CAAC;EACH,OAAAH,MAAC;AAAD,CAAC,CA3tCoBpB,QAAA,CAAAoF,YAAY;AA6tCjC,WAAUhE,MAAM;EAyDd;;;EAGA,IAAYyM,SAQX;EARD,WAAYA,SAAS;IACnBA,SAAA,qBAAiB;IACjBA,SAAA,uBAAmB;IACnBA,SAAA,6BAAyB;IACzBA,SAAA,mBAAe;IACfA,SAAA,yBAAqB;IACrBA,SAAA,uBAAmB;IACnBA,SAAA,mBAAe;EACjB,CAAC,EARWA,SAAS,GAATzM,MAAA,CAAAyM,SAAS,KAATzM,MAAA,CAAAyM,SAAS;EAUrB;;;EAGA,IAAY7K,MAIX;EAJD,WAAYA,MAAM;IAChBA,MAAA,iBAAa;IACbA,MAAA,uBAAmB;IACnBA,MAAA,mBAAe;EACjB,CAAC,EAJWA,MAAM,GAAN5B,MAAA,CAAA4B,MAAM,KAAN5B,MAAA,CAAA4B,MAAM;EAMlB;;;EAGA,IAAYV,SAgBX;EAhBD,WAAYA,SAAS;IACnBA,SAAA,yBAAqB;IACrBA,SAAA,yBAAqB;IACrBA,SAAA,6BAAyB;IACzBA,SAAA,mBAAe;IACfA,SAAA,mBAAe;IACfA,SAAA,mBAAe;IACfA,SAAA,mBAAe;IACfA,SAAA,mBAAe;IACfA,SAAA,mBAAe;IACfA,SAAA,mBAAe;IACfA,SAAA,mBAAe;IACfA,SAAA,mBAAe;IACfA,SAAA,mBAAe;IACfA,SAAA,mBAAe;IACfA,SAAA,mBAAe;EACjB,CAAC,EAhBWA,SAAS,GAATlB,MAAA,CAAAkB,SAAS,KAATlB,MAAA,CAAAkB,SAAS;AA+NvB,CAAC,EAjTSlB,MAAM,KAANA,MAAM;AAmThBqW,OAAA,CAAA9U,OAAA,GAAevB,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}