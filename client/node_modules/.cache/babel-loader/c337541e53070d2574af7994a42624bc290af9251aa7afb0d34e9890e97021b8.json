{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @module Voice\n * @publicapi\n * @internal\n */\nvar events_1 = require(\"events\");\nvar device_1 = require(\"./device\");\nvar errors_1 = require(\"./errors\");\nvar log_1 = require(\"./log\");\nvar icecandidate_1 = require(\"./rtc/icecandidate\");\nvar statsMonitor_1 = require(\"./statsMonitor\");\nvar util_1 = require(\"./util\");\nvar Backoff = require('backoff');\nvar C = require('./constants');\nvar PeerConnection = require('./rtc').PeerConnection;\nvar getPreferredCodecInfo = require('./rtc/sdp').getPreferredCodecInfo;\nvar BACKOFF_CONFIG = {\n  factor: 1.1,\n  initialDelay: 1,\n  maxDelay: 30000,\n  randomisationFactor: 0.5\n};\nvar DTMF_INTER_TONE_GAP = 70;\nvar DTMF_PAUSE_DURATION = 500;\nvar DTMF_TONE_DURATION = 160;\nvar METRICS_BATCH_SIZE = 10;\nvar METRICS_DELAY = 5000;\nvar MEDIA_DISCONNECT_ERROR = {\n  disconnect: true,\n  info: {\n    code: 31003,\n    message: 'Connection with Twilio was interrupted.',\n    twilioError: new errors_1.MediaErrors.ConnectionError()\n  }\n};\nvar MULTIPLE_THRESHOLD_WARNING_NAMES = {\n  // The stat `packetsLostFraction` is monitored by two separate thresholds,\n  // `maxAverage` and `max`. Each threshold emits a different warning name.\n  packetsLostFraction: {\n    max: 'packet-loss',\n    maxAverage: 'packets-lost-fraction'\n  }\n};\nvar WARNING_NAMES = {\n  audioInputLevel: 'audio-input-level',\n  audioOutputLevel: 'audio-output-level',\n  bytesReceived: 'bytes-received',\n  bytesSent: 'bytes-sent',\n  jitter: 'jitter',\n  mos: 'mos',\n  rtt: 'rtt'\n};\nvar WARNING_PREFIXES = {\n  max: 'high-',\n  maxAverage: 'high-',\n  maxDuration: 'constant-',\n  min: 'low-',\n  minStandardDeviation: 'constant-'\n};\nvar hasBeenWarnedHandlers = false;\n/**\n * A {@link Connection} represents a media and signaling connection to a TwiML application.\n * @publicapi\n */\nvar Connection = /** @class */function (_super) {\n  __extends(Connection, _super);\n  /**\n   * @constructor\n   * @private\n   * @param config - Mandatory configuration options\n   * @param [options] - Optional settings\n   */\n  function Connection(config, options) {\n    var _this = _super.call(this) || this;\n    /**\n     * Call parameters received from Twilio for an incoming call.\n     */\n    _this.parameters = {};\n    /**\n     * The number of times input volume has been the same consecutively.\n     */\n    _this._inputVolumeStreak = 0;\n    /**\n     * Whether the call has been answered.\n     */\n    _this._isAnswered = false;\n    /**\n     * Whether the call has been cancelled.\n     */\n    _this._isCancelled = false;\n    /**\n     * The most recent public input volume value. 0 -> 1 representing -100 to -30 dB.\n     */\n    _this._latestInputVolume = 0;\n    /**\n     * The most recent public output volume value. 0 -> 1 representing -100 to -30 dB.\n     */\n    _this._latestOutputVolume = 0;\n    /**\n     * An instance of Logger to use.\n     */\n    _this._log = log_1.default.getInstance();\n    /**\n     * A batch of metrics samples to send to Insights. Gets cleared after\n     * each send and appended to on each new sample.\n     */\n    _this._metricsSamples = [];\n    /**\n     * The number of times output volume has been the same consecutively.\n     */\n    _this._outputVolumeStreak = 0;\n    /**\n     * A Map of Sounds to play.\n     */\n    _this._soundcache = new Map();\n    /**\n     * State of the {@link Connection}.\n     */\n    _this._status = Connection.State.Pending;\n    /**\n     * Options passed to this {@link Connection}.\n     */\n    _this.options = {\n      enableRingingState: false,\n      mediaStreamFactory: PeerConnection,\n      offerSdp: null,\n      shouldPlayDisconnect: function () {\n        return true;\n      }\n    };\n    /**\n     * Whether the {@link Connection} should send a hangup on disconnect.\n     */\n    _this.sendHangup = true;\n    /**\n     * String representation of {@link Connection} instance.\n     * @private\n     */\n    _this.toString = function () {\n      return '[Twilio.Connection instance]';\n    };\n    _this._emitWarning = function (groupPrefix, warningName, threshold, value, wasCleared, warningData) {\n      var groupSuffix = wasCleared ? '-cleared' : '-raised';\n      var groupName = groupPrefix + \"warning\" + groupSuffix;\n      // Ignore constant input if the Connection is muted (Expected)\n      if (warningName === 'constant-audio-input-level' && _this.isMuted()) {\n        return;\n      }\n      var level = wasCleared ? 'info' : 'warning';\n      // Avoid throwing false positives as warnings until we refactor volume metrics\n      if (warningName === 'constant-audio-output-level') {\n        level = 'info';\n      }\n      var payloadData = {\n        threshold: threshold\n      };\n      if (value) {\n        if (value instanceof Array) {\n          payloadData.values = value.map(function (val) {\n            if (typeof val === 'number') {\n              return Math.round(val * 100) / 100;\n            }\n            return value;\n          });\n        } else {\n          payloadData.value = value;\n        }\n      }\n      _this._publisher.post(level, groupName, warningName, {\n        data: payloadData\n      }, _this);\n      if (warningName !== 'constant-audio-output-level') {\n        var emitName = wasCleared ? 'warning-cleared' : 'warning';\n        _this.emit(emitName, warningName, warningData && !wasCleared ? warningData : null);\n      }\n    };\n    /**\n     * Called when the {@link Connection} is answered.\n     * @param payload\n     */\n    _this._onAnswer = function (payload) {\n      // answerOnBridge=false will send a 183 which we need to catch in _onRinging when\n      // the enableRingingState flag is disabled. In that case, we will receive a 200 after\n      // the callee accepts the call firing a second `accept` event if we don't\n      // short circuit here.\n      if (_this._isAnswered) {\n        return;\n      }\n      _this._setCallSid(payload);\n      _this._isAnswered = true;\n      _this._maybeTransitionToOpen();\n    };\n    /**\n     * Called when the {@link Connection} is cancelled.\n     * @param payload\n     */\n    _this._onCancel = function (payload) {\n      // (rrowland) Is this check necessary? Verify, and if so move to pstream / VSP module.\n      var callsid = payload.callsid;\n      if (_this.parameters.CallSid === callsid) {\n        _this._isCancelled = true;\n        _this._publisher.info('connection', 'cancel', null, _this);\n        _this._cleanupEventListeners();\n        _this.mediaStream.close();\n        _this._status = Connection.State.Closed;\n        _this.emit('cancel');\n        _this.pstream.removeListener('cancel', _this._onCancel);\n      }\n    };\n    /**\n     * Called when the {@link Connection} is hung up.\n     * @param payload\n     */\n    _this._onHangup = function (payload) {\n      /**\n       *  see if callsid passed in message matches either callsid or outbound id\n       *  connection should always have either callsid or outbound id\n       *  if no callsid passed hangup anyways\n       */\n      if (payload.callsid && (_this.parameters.CallSid || _this.outboundConnectionId)) {\n        if (payload.callsid !== _this.parameters.CallSid && payload.callsid !== _this.outboundConnectionId) {\n          return;\n        }\n      } else if (payload.callsid) {\n        // hangup is for another connection\n        return;\n      }\n      _this._log.info('Received HANGUP from gateway');\n      if (payload.error) {\n        var error = {\n          code: payload.error.code || 31000,\n          connection: _this,\n          message: payload.error.message || 'Error sent from gateway in HANGUP',\n          twilioError: new errors_1.GeneralErrors.ConnectionError()\n        };\n        _this._log.error('Received an error from the gateway:', error);\n        _this.emit('error', error);\n      }\n      _this.sendHangup = false;\n      _this._publisher.info('connection', 'disconnected-by-remote', null, _this);\n      _this._disconnect(null, true);\n      _this._cleanupEventListeners();\n    };\n    /**\n     * Called when there is a media failure.\n     * Manages all media-related states and takes action base on the states\n     * @param type - Type of media failure\n     */\n    _this._onMediaFailure = function (type) {\n      var _a = Connection.MediaFailure,\n        ConnectionDisconnected = _a.ConnectionDisconnected,\n        ConnectionFailed = _a.ConnectionFailed,\n        IceGatheringFailed = _a.IceGatheringFailed,\n        LowBytes = _a.LowBytes;\n      // These types signifies the end of a single ICE cycle\n      var isEndOfIceCycle = type === ConnectionFailed || type === IceGatheringFailed;\n      // Default behavior on ice failures with disabled ice restart.\n      if (!_this.options.enableIceRestart && isEndOfIceCycle\n      // All browsers except chrome doesn't update pc.iceConnectionState and pc.connectionState\n      // after issuing an ICE Restart, which we use to determine if ICE Restart is complete.\n      // Since we cannot detect if ICE Restart is complete, we will not retry.\n      || !util_1.isChrome(window, window.navigator) && type === ConnectionFailed) {\n        return _this.mediaStream.onerror(MEDIA_DISCONNECT_ERROR);\n      }\n      // Ignore any other type of media failure if ice restart is disabled\n      if (!_this.options.enableIceRestart) {\n        return;\n      }\n      // Ignore subsequent requests if ice restart is in progress\n      if (_this._status === Connection.State.Reconnecting) {\n        // This is a retry. Previous ICE Restart failed\n        if (isEndOfIceCycle) {\n          // We already exceeded max retry time.\n          if (Date.now() - _this._mediaReconnectStartTime > BACKOFF_CONFIG.maxDelay) {\n            _this._log.info('Exceeded max ICE retries');\n            return _this.mediaStream.onerror(MEDIA_DISCONNECT_ERROR);\n          }\n          // Issue ICE restart with backoff\n          _this._mediaReconnectBackoff.backoff();\n        }\n        return;\n      }\n      var pc = _this.mediaStream.version.pc;\n      var isIceDisconnected = pc && pc.iceConnectionState === 'disconnected';\n      var hasLowBytesWarning = _this._monitor.hasActiveWarning('bytesSent', 'min') || _this._monitor.hasActiveWarning('bytesReceived', 'min');\n      // Only certain conditions can trigger media reconnection\n      if (type === LowBytes && isIceDisconnected || type === ConnectionDisconnected && hasLowBytesWarning || isEndOfIceCycle) {\n        var mediaReconnectionError = {\n          code: 53405,\n          message: 'Media connection failed.',\n          twilioError: new errors_1.MediaErrors.ConnectionError()\n        };\n        _this._log.warn('ICE Connection disconnected.');\n        _this._publisher.warn('connection', 'error', mediaReconnectionError, _this);\n        _this._publisher.info('connection', 'reconnecting', null, _this);\n        _this._mediaReconnectStartTime = Date.now();\n        _this._status = Connection.State.Reconnecting;\n        _this._mediaReconnectBackoff.reset();\n        _this._mediaReconnectBackoff.backoff();\n        _this.emit('reconnecting', mediaReconnectionError);\n      }\n    };\n    /**\n     * Called when media connection is restored\n     */\n    _this._onMediaReconnected = function () {\n      // Only trigger once.\n      // This can trigger on pc.onIceConnectionChange and pc.onConnectionChange.\n      if (_this._status !== Connection.State.Reconnecting) {\n        return;\n      }\n      _this._log.info('ICE Connection reestablished.');\n      _this._publisher.info('connection', 'reconnected', null, _this);\n      _this._status = Connection.State.Open;\n      _this.emit('reconnected');\n    };\n    /**\n     * When we get a RINGING signal from PStream, update the {@link Connection} status.\n     * @param payload\n     */\n    _this._onRinging = function (payload) {\n      _this._setCallSid(payload);\n      // If we're not in 'connecting' or 'ringing' state, this event was received out of order.\n      if (_this._status !== Connection.State.Connecting && _this._status !== Connection.State.Ringing) {\n        return;\n      }\n      var hasEarlyMedia = !!payload.sdp;\n      if (_this.options.enableRingingState) {\n        _this._status = Connection.State.Ringing;\n        _this._publisher.info('connection', 'outgoing-ringing', {\n          hasEarlyMedia: hasEarlyMedia\n        }, _this);\n        _this.emit('ringing', hasEarlyMedia);\n        // answerOnBridge=false will send a 183, which we need to interpret as `answer` when\n        // the enableRingingState flag is disabled in order to maintain a non-breaking API from 1.4.24\n      } else if (hasEarlyMedia) {\n        _this._onAnswer(payload);\n      }\n    };\n    /**\n     * Called each time StatsMonitor emits a sample.\n     * Emits stats event and batches the call stats metrics and sends them to Insights.\n     * @param sample\n     */\n    _this._onRTCSample = function (sample) {\n      var callMetrics = __assign(__assign({}, sample), {\n        inputVolume: _this._latestInputVolume,\n        outputVolume: _this._latestOutputVolume\n      });\n      _this._codec = callMetrics.codecName;\n      _this._metricsSamples.push(callMetrics);\n      if (_this._metricsSamples.length >= METRICS_BATCH_SIZE) {\n        _this._publishMetrics();\n      }\n      _this.emit('sample', sample);\n    };\n    /**\n     * Called when we receive a transportClose event from pstream.\n     * Re-emits the event.\n     */\n    _this._onTransportClose = function () {\n      _this._log.error('Received transportClose from pstream');\n      _this.emit('transportClose');\n    };\n    /**\n     * Re-emit an StatsMonitor warning as a {@link Connection}.warning or .warning-cleared event.\n     * @param warningData\n     * @param wasCleared - Whether this is a -cleared or -raised event.\n     */\n    _this._reemitWarning = function (warningData, wasCleared) {\n      var groupPrefix = /^audio/.test(warningData.name) ? 'audio-level-' : 'network-quality-';\n      var warningPrefix = WARNING_PREFIXES[warningData.threshold.name];\n      /**\n       * NOTE: There are two \"packet-loss\" warnings: `high-packet-loss` and\n       * `high-packets-lost-fraction`, so in this case we need to use a different\n       * `WARNING_NAME` mapping.\n       */\n      var warningName;\n      if (warningData.name in MULTIPLE_THRESHOLD_WARNING_NAMES) {\n        warningName = MULTIPLE_THRESHOLD_WARNING_NAMES[warningData.name][warningData.threshold.name];\n      } else if (warningData.name in WARNING_NAMES) {\n        warningName = WARNING_NAMES[warningData.name];\n      }\n      var warning = warningPrefix + warningName;\n      _this._emitWarning(groupPrefix, warning, warningData.threshold.value, warningData.values || warningData.value, wasCleared, warningData);\n    };\n    /**\n     * Re-emit an StatsMonitor warning-cleared as a .warning-cleared event.\n     * @param warningData\n     */\n    _this._reemitWarningCleared = function (warningData) {\n      _this._reemitWarning(warningData, true);\n    };\n    _this._isUnifiedPlanDefault = config.isUnifiedPlanDefault;\n    _this._soundcache = config.soundcache;\n    _this.message = options && options.twimlParams || {};\n    _this.customParameters = new Map(Object.entries(_this.message).map(function (_a) {\n      var key = _a[0],\n        val = _a[1];\n      return [key, String(val)];\n    }));\n    Object.assign(_this.options, options);\n    if (_this.options.callParameters) {\n      _this.parameters = _this.options.callParameters;\n    }\n    _this._direction = _this.parameters.CallSid ? Connection.CallDirection.Incoming : Connection.CallDirection.Outgoing;\n    if (_this._direction === Connection.CallDirection.Incoming && _this.parameters) {\n      _this.callerInfo = _this.parameters.StirStatus ? {\n        isVerified: _this.parameters.StirStatus === 'TN-Validation-Passed-A'\n      } : null;\n    } else {\n      _this.callerInfo = null;\n    }\n    _this._mediaReconnectBackoff = Backoff.exponential(BACKOFF_CONFIG);\n    _this._mediaReconnectBackoff.on('ready', function () {\n      return _this.mediaStream.iceRestart();\n    });\n    // temporary call sid to be used for outgoing calls\n    _this.outboundConnectionId = generateTempCallSid();\n    var publisher = _this._publisher = config.publisher;\n    if (_this._direction === Connection.CallDirection.Incoming) {\n      publisher.info('connection', 'incoming', null, _this);\n    } else {\n      publisher.info('connection', 'outgoing', {\n        preflight: _this.options.preflight\n      }, _this);\n    }\n    var monitor = _this._monitor = new (_this.options.StatsMonitor || statsMonitor_1.default)();\n    monitor.on('sample', _this._onRTCSample);\n    // First 20 seconds or so are choppy, so let's not bother with these warnings.\n    monitor.disableWarnings();\n    setTimeout(function () {\n      return monitor.enableWarnings();\n    }, METRICS_DELAY);\n    monitor.on('warning', function (data, wasCleared) {\n      if (data.name === 'bytesSent' || data.name === 'bytesReceived') {\n        _this._onMediaFailure(Connection.MediaFailure.LowBytes);\n      }\n      _this._reemitWarning(data, wasCleared);\n    });\n    monitor.on('warning-cleared', function (data) {\n      _this._reemitWarningCleared(data);\n    });\n    _this.mediaStream = new (_this.options.MediaStream || _this.options.mediaStreamFactory)(config.audioHelper, config.pstream, config.getUserMedia, {\n      RTCPeerConnection: _this.options.RTCPeerConnection,\n      codecPreferences: _this.options.codecPreferences,\n      dscp: _this.options.dscp,\n      enableIceRestart: _this.options.enableIceRestart,\n      forceAggressiveIceNomination: _this.options.forceAggressiveIceNomination,\n      isUnifiedPlan: _this._isUnifiedPlanDefault,\n      maxAverageBitrate: _this.options.maxAverageBitrate,\n      preflight: _this.options.preflight\n    });\n    _this.on('volume', function (inputVolume, outputVolume) {\n      _this._inputVolumeStreak = _this._checkVolume(inputVolume, _this._inputVolumeStreak, _this._latestInputVolume, 'input');\n      _this._outputVolumeStreak = _this._checkVolume(outputVolume, _this._outputVolumeStreak, _this._latestOutputVolume, 'output');\n      _this._latestInputVolume = inputVolume;\n      _this._latestOutputVolume = outputVolume;\n    });\n    _this.mediaStream.onaudio = function (remoteAudio) {\n      _this._log.info('Remote audio created');\n      _this.emit('audio', remoteAudio);\n    };\n    _this.mediaStream.onvolume = function (inputVolume, outputVolume, internalInputVolume, internalOutputVolume) {\n      // (rrowland) These values mock the 0 -> 32767 format used by legacy getStats. We should look into\n      // migrating to a newer standard, either 0.0 -> linear or -127 to 0 in dB, matching the range\n      // chosen below.\n      monitor.addVolumes(internalInputVolume / 255 * 32767, internalOutputVolume / 255 * 32767);\n      // (rrowland) 0.0 -> 1.0 linear\n      _this.emit('volume', inputVolume, outputVolume);\n    };\n    _this.mediaStream.ondtlstransportstatechange = function (state) {\n      var level = state === 'failed' ? 'error' : 'debug';\n      _this._publisher.post(level, 'dtls-transport-state', state, null, _this);\n    };\n    _this.mediaStream.onpcconnectionstatechange = function (state) {\n      var level = 'debug';\n      var dtlsTransport = _this.mediaStream.getRTCDtlsTransport();\n      if (state === 'failed') {\n        level = dtlsTransport && dtlsTransport.state === 'failed' ? 'error' : 'warning';\n      }\n      _this._publisher.post(level, 'pc-connection-state', state, null, _this);\n    };\n    _this.mediaStream.onicecandidate = function (candidate) {\n      var payload = new icecandidate_1.IceCandidate(candidate).toPayload();\n      _this._publisher.debug('ice-candidate', 'ice-candidate', payload, _this);\n    };\n    _this.mediaStream.onselectedcandidatepairchange = function (pair) {\n      var localCandidatePayload = new icecandidate_1.IceCandidate(pair.local).toPayload();\n      var remoteCandidatePayload = new icecandidate_1.IceCandidate(pair.remote, true).toPayload();\n      _this._publisher.debug('ice-candidate', 'selected-ice-candidate-pair', {\n        local_candidate: localCandidatePayload,\n        remote_candidate: remoteCandidatePayload\n      }, _this);\n    };\n    _this.mediaStream.oniceconnectionstatechange = function (state) {\n      var level = state === 'failed' ? 'error' : 'debug';\n      _this._publisher.post(level, 'ice-connection-state', state, null, _this);\n    };\n    _this.mediaStream.onicegatheringfailure = function (type) {\n      _this._publisher.warn('ice-gathering-state', type, null, _this);\n      _this._onMediaFailure(Connection.MediaFailure.IceGatheringFailed);\n    };\n    _this.mediaStream.onicegatheringstatechange = function (state) {\n      _this._publisher.debug('ice-gathering-state', state, null, _this);\n    };\n    _this.mediaStream.onsignalingstatechange = function (state) {\n      _this._publisher.debug('signaling-state', state, null, _this);\n    };\n    _this.mediaStream.ondisconnected = function (msg) {\n      _this._log.info(msg);\n      _this._publisher.warn('network-quality-warning-raised', 'ice-connectivity-lost', {\n        message: msg\n      }, _this);\n      _this.emit('warning', 'ice-connectivity-lost');\n      _this._onMediaFailure(Connection.MediaFailure.ConnectionDisconnected);\n    };\n    _this.mediaStream.onfailed = function (msg) {\n      _this._onMediaFailure(Connection.MediaFailure.ConnectionFailed);\n    };\n    _this.mediaStream.onconnected = function () {\n      // First time mediaStream is connected, but ICE Gathering issued an ICE restart and succeeded.\n      if (_this._status === Connection.State.Reconnecting) {\n        _this._onMediaReconnected();\n      }\n    };\n    _this.mediaStream.onreconnected = function (msg) {\n      _this._log.info(msg);\n      _this._publisher.info('network-quality-warning-cleared', 'ice-connectivity-lost', {\n        message: msg\n      }, _this);\n      _this.emit('warning-cleared', 'ice-connectivity-lost');\n      _this._onMediaReconnected();\n    };\n    _this.mediaStream.onerror = function (e) {\n      if (e.disconnect === true) {\n        _this._disconnect(e.info && e.info.message);\n      }\n      var error = {\n        code: e.info.code,\n        connection: _this,\n        info: e.info,\n        message: e.info.message || 'Error with mediastream',\n        twilioError: e.info.twilioError\n      };\n      _this._log.error('Received an error from MediaStream:', e);\n      _this.emit('error', error);\n    };\n    _this.mediaStream.onopen = function () {\n      // NOTE(mroberts): While this may have been happening in previous\n      // versions of Chrome, since Chrome 45 we have seen the\n      // PeerConnection's onsignalingstatechange handler invoked multiple\n      // times in the same signalingState 'stable'. When this happens, we\n      // invoke this onopen function. If we invoke it twice without checking\n      // for _status 'open', we'd accidentally close the PeerConnection.\n      //\n      // See <https://code.google.com/p/webrtc/issues/detail?id=4996>.\n      if (_this._status === Connection.State.Open || _this._status === Connection.State.Reconnecting) {\n        return;\n      } else if (_this._status === Connection.State.Ringing || _this._status === Connection.State.Connecting) {\n        _this.mute(false);\n        _this._maybeTransitionToOpen();\n      } else {\n        // call was probably canceled sometime before this\n        _this.mediaStream.close();\n      }\n    };\n    _this.mediaStream.onclose = function () {\n      _this._status = Connection.State.Closed;\n      if (_this.options.shouldPlayDisconnect && _this.options.shouldPlayDisconnect()\n      // Don't play disconnect sound if this was from a cancel event. i.e. the call\n      // was ignored or hung up even before it was answered.\n      && !_this._isCancelled) {\n        _this._soundcache.get(device_1.default.SoundName.Disconnect).play();\n      }\n      monitor.disable();\n      _this._publishMetrics();\n      if (!_this._isCancelled) {\n        _this.emit('disconnect', _this);\n      }\n    };\n    _this.pstream = config.pstream;\n    _this.pstream.on('cancel', _this._onCancel);\n    _this.pstream.on('ringing', _this._onRinging);\n    _this.pstream.on('transportClose', _this._onTransportClose);\n    _this.on('error', function (error) {\n      _this._publisher.error('connection', 'error', {\n        code: error.code,\n        message: error.message\n      }, _this);\n      if (_this.pstream && _this.pstream.status === 'disconnected') {\n        _this._cleanupEventListeners();\n      }\n    });\n    _this.on('disconnect', function () {\n      _this._cleanupEventListeners();\n    });\n    return _this;\n  }\n  Object.defineProperty(Connection.prototype, \"direction\", {\n    /**\n     * Whether this {@link Connection} is incoming or outgoing.\n     */\n    get: function () {\n      return this._direction;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Connection.prototype, \"codec\", {\n    /**\n     * Audio codec used for this {@link Connection}. Expecting {@link Connection.Codec} but\n     * will copy whatever we get from RTC stats.\n     */\n    get: function () {\n      return this._codec;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Get the real CallSid. Returns null if not present or is a temporary call sid.\n   * @deprecated\n   * @private\n   */\n  Connection.prototype._getRealCallSid = function () {\n    this._log.warn('_getRealCallSid is deprecated and will be removed in 2.0.');\n    return /^TJ/.test(this.parameters.CallSid) ? null : this.parameters.CallSid;\n  };\n  /**\n   * Get the temporary CallSid.\n   * @deprecated\n   * @private\n   */\n  Connection.prototype._getTempCallSid = function () {\n    this._log.warn('_getTempCallSid is deprecated and will be removed in 2.0. \\\n                    Please use outboundConnectionId instead.');\n    return this.outboundConnectionId;\n  };\n  /**\n   * Set the audio input tracks from a given stream.\n   * @param stream\n   * @private\n   */\n  Connection.prototype._setInputTracksFromStream = function (stream) {\n    return this.mediaStream.setInputTracksFromStream(stream);\n  };\n  /**\n   * Set the audio output sink IDs.\n   * @param sinkIds\n   * @private\n   */\n  Connection.prototype._setSinkIds = function (sinkIds) {\n    return this.mediaStream._setSinkIds(sinkIds);\n  };\n  Connection.prototype.accept = function (handlerOrConstraints, rtcConfiguration) {\n    var _this = this;\n    if (typeof handlerOrConstraints === 'function') {\n      this._addHandler('accept', handlerOrConstraints);\n      return;\n    }\n    if (this._status !== Connection.State.Pending) {\n      return;\n    }\n    var audioConstraints = handlerOrConstraints || this.options.audioConstraints;\n    this._status = Connection.State.Connecting;\n    var connect = function () {\n      if (_this._status !== Connection.State.Connecting) {\n        // call must have been canceled\n        _this._cleanupEventListeners();\n        _this.mediaStream.close();\n        return;\n      }\n      var onAnswer = function (pc) {\n        // Report that the call was answered, and directionality\n        var eventName = _this._direction === Connection.CallDirection.Incoming ? 'accepted-by-local' : 'accepted-by-remote';\n        _this._publisher.info('connection', eventName, null, _this);\n        // Report the preferred codec and params as they appear in the SDP\n        var _a = getPreferredCodecInfo(_this.mediaStream.version.getSDP()),\n          codecName = _a.codecName,\n          codecParams = _a.codecParams;\n        _this._publisher.info('settings', 'codec', {\n          codec_params: codecParams,\n          selected_codec: codecName\n        }, _this);\n        // Enable RTC monitoring\n        _this._monitor.enable(pc);\n      };\n      var sinkIds = typeof _this.options.getSinkIds === 'function' && _this.options.getSinkIds();\n      if (Array.isArray(sinkIds)) {\n        _this.mediaStream._setSinkIds(sinkIds).catch(function () {\n          // (rrowland) We don't want this to throw to console since the customer\n          // can't control this. This will most commonly be rejected on browsers\n          // that don't support setting sink IDs.\n        });\n      }\n      _this.pstream.addListener('hangup', _this._onHangup);\n      rtcConfiguration = rtcConfiguration || _this.options.rtcConfiguration;\n      if (_this._direction === Connection.CallDirection.Incoming) {\n        _this._isAnswered = true;\n        _this.mediaStream.answerIncomingCall(_this.parameters.CallSid, _this.options.offerSdp, _this.options.rtcConstraints, rtcConfiguration, onAnswer);\n      } else {\n        var params = Array.from(_this.customParameters.entries()).map(function (pair) {\n          return encodeURIComponent(pair[0]) + \"=\" + encodeURIComponent(pair[1]);\n        }).join('&');\n        _this.pstream.once('answer', _this._onAnswer.bind(_this));\n        _this.mediaStream.makeOutgoingCall(_this.pstream.token, params, _this.outboundConnectionId, _this.options.rtcConstraints, rtcConfiguration, onAnswer);\n      }\n    };\n    if (this.options.beforeAccept) {\n      this.options.beforeAccept(this);\n    }\n    var inputStream = typeof this.options.getInputStream === 'function' && this.options.getInputStream();\n    var promise = inputStream ? this.mediaStream.setInputTracksFromStream(inputStream) : this.mediaStream.openWithConstraints(audioConstraints);\n    promise.then(function () {\n      _this._publisher.info('get-user-media', 'succeeded', {\n        data: {\n          audioConstraints: audioConstraints\n        }\n      }, _this);\n      connect();\n    }, function (error) {\n      var message;\n      var code;\n      if (error.code === 31208 || ['PermissionDeniedError', 'NotAllowedError'].indexOf(error.name) !== -1) {\n        code = 31208;\n        message = 'User denied access to microphone, or the web browser did not allow microphone ' + 'access at this address.';\n        _this._publisher.error('get-user-media', 'denied', {\n          data: {\n            audioConstraints: audioConstraints,\n            error: error\n          }\n        }, _this);\n      } else {\n        code = 31201;\n        message = \"Error occurred while accessing microphone: \" + error.name + (error.message ? \" (\" + error.message + \")\" : '');\n        _this._publisher.error('get-user-media', 'failed', {\n          data: {\n            audioConstraints: audioConstraints,\n            error: error\n          }\n        }, _this);\n      }\n      _this._disconnect();\n      _this.emit('error', {\n        message: message,\n        code: code\n      });\n    });\n  };\n  Connection.prototype.cancel = function (handler) {\n    this._log.warn('.cancel() is deprecated. Please use .ignore() instead.');\n    if (handler) {\n      this.ignore(handler);\n    } else {\n      this.ignore();\n    }\n  };\n  Connection.prototype.disconnect = function (handler) {\n    if (typeof handler === 'function') {\n      this._addHandler('disconnect', handler);\n      return;\n    }\n    this._disconnect();\n  };\n  /**\n   * @deprecated - Set a handler for the {@link errorEvent}\n   */\n  Connection.prototype.error = function (handler) {\n    if (typeof handler === 'function') {\n      this._addHandler('error', handler);\n    }\n  };\n  /**\n   * Get the local MediaStream, if set.\n   */\n  Connection.prototype.getLocalStream = function () {\n    return this.mediaStream && this.mediaStream.stream;\n  };\n  /**\n   * Get the remote MediaStream, if set.\n   */\n  Connection.prototype.getRemoteStream = function () {\n    return this.mediaStream && this.mediaStream._remoteStream;\n  };\n  Connection.prototype.ignore = function (handler) {\n    if (typeof handler === 'function') {\n      this._addHandler('cancel', handler);\n      return;\n    }\n    if (this._status !== Connection.State.Pending) {\n      return;\n    }\n    this._status = Connection.State.Closed;\n    this.emit('cancel');\n    this.mediaStream.ignore(this.parameters.CallSid);\n    this._publisher.info('connection', 'ignored-by-local', null, this);\n  };\n  /**\n   * Check if connection is muted\n   */\n  Connection.prototype.isMuted = function () {\n    return this.mediaStream.isMuted;\n  };\n  Connection.prototype.mute = function (shouldMute) {\n    if (shouldMute === void 0) {\n      shouldMute = true;\n    }\n    if (typeof shouldMute === 'function') {\n      this._addHandler('mute', shouldMute);\n      return;\n    }\n    var wasMuted = this.mediaStream.isMuted;\n    this.mediaStream.mute(shouldMute);\n    var isMuted = this.mediaStream.isMuted;\n    if (wasMuted !== isMuted) {\n      this._publisher.info('connection', isMuted ? 'muted' : 'unmuted', null, this);\n      this.emit('mute', isMuted, this);\n    }\n  };\n  /**\n   * Post an event to Endpoint Analytics indicating that the end user\n   *   has given call quality feedback. Called without a score, this\n   *   will report that the customer declined to give feedback.\n   * @param score - The end-user's rating of the call; an\n   *   integer 1 through 5. Or undefined if the user declined to give\n   *   feedback.\n   * @param issue - The primary issue the end user\n   *   experienced on the call. Can be: ['one-way-audio', 'choppy-audio',\n   *   'dropped-call', 'audio-latency', 'noisy-call', 'echo']\n   */\n  Connection.prototype.postFeedback = function (score, issue) {\n    if (typeof score === 'undefined' || score === null) {\n      return this._postFeedbackDeclined();\n    }\n    if (!Object.values(Connection.FeedbackScore).includes(score)) {\n      throw new errors_1.InvalidArgumentError(\"Feedback score must be one of: \" + Object.values(Connection.FeedbackScore));\n    }\n    if (typeof issue !== 'undefined' && issue !== null && !Object.values(Connection.FeedbackIssue).includes(issue)) {\n      throw new errors_1.InvalidArgumentError(\"Feedback issue must be one of: \" + Object.values(Connection.FeedbackIssue));\n    }\n    return this._publisher.info('feedback', 'received', {\n      issue_name: issue,\n      quality_score: score\n    }, this, true);\n  };\n  Connection.prototype.reject = function (handler) {\n    if (typeof handler === 'function') {\n      this._addHandler('reject', handler);\n      return;\n    }\n    if (this._status !== Connection.State.Pending) {\n      return;\n    }\n    this.pstream.reject(this.parameters.CallSid);\n    this._status = Connection.State.Closed;\n    this.emit('reject');\n    this.mediaStream.reject(this.parameters.CallSid);\n    this._publisher.info('connection', 'rejected-by-local', null, this);\n  };\n  /**\n   * Send a string of digits.\n   * @param digits\n   */\n  Connection.prototype.sendDigits = function (digits) {\n    if (digits.match(/[^0-9*#w]/)) {\n      throw new errors_1.InvalidArgumentError('Illegal character passed into sendDigits');\n    }\n    var sequence = [];\n    digits.split('').forEach(function (digit) {\n      var dtmf = digit !== 'w' ? \"dtmf\" + digit : '';\n      if (dtmf === 'dtmf*') {\n        dtmf = 'dtmfs';\n      }\n      if (dtmf === 'dtmf#') {\n        dtmf = 'dtmfh';\n      }\n      sequence.push(dtmf);\n    });\n    // Binds soundCache to be used in recursion until all digits have been played.\n    (function playNextDigit(soundCache, dialtonePlayer) {\n      var digit = sequence.shift();\n      if (digit) {\n        if (dialtonePlayer) {\n          dialtonePlayer.play(digit);\n        } else {\n          soundCache.get(digit).play();\n        }\n      }\n      if (sequence.length) {\n        setTimeout(playNextDigit.bind(null, soundCache), 200);\n      }\n    })(this._soundcache, this.options.dialtonePlayer);\n    var dtmfSender = this.mediaStream.getOrCreateDTMFSender();\n    function insertDTMF(dtmfs) {\n      if (!dtmfs.length) {\n        return;\n      }\n      var dtmf = dtmfs.shift();\n      if (dtmf && dtmf.length) {\n        dtmfSender.insertDTMF(dtmf, DTMF_TONE_DURATION, DTMF_INTER_TONE_GAP);\n      }\n      setTimeout(insertDTMF.bind(null, dtmfs), DTMF_PAUSE_DURATION);\n    }\n    if (dtmfSender) {\n      if (!('canInsertDTMF' in dtmfSender) || dtmfSender.canInsertDTMF) {\n        this._log.info('Sending digits using RTCDTMFSender');\n        // NOTE(mroberts): We can't just map 'w' to ',' since\n        // RTCDTMFSender's pause duration is 2 s and Twilio's is more\n        // like 500 ms. Instead, we will fudge it with setTimeout.\n        insertDTMF(digits.split('w'));\n        return;\n      }\n      this._log.info('RTCDTMFSender cannot insert DTMF');\n    }\n    // send pstream message to send DTMF\n    this._log.info('Sending digits over PStream');\n    if (this.pstream !== null && this.pstream.status !== 'disconnected') {\n      this.pstream.dtmf(this.parameters.CallSid, digits);\n    } else {\n      var error = {\n        code: 31000,\n        connection: this,\n        message: 'Could not send DTMF: Signaling channel is disconnected'\n      };\n      this.emit('error', error);\n    }\n  };\n  /**\n   * Get the current {@link Connection} status.\n   */\n  Connection.prototype.status = function () {\n    return this._status;\n  };\n  /**\n   * @deprecated - Unmute the {@link Connection}.\n   */\n  Connection.prototype.unmute = function () {\n    this._log.warn('.unmute() is deprecated. Please use .mute(false) to unmute a call instead.');\n    this.mute(false);\n  };\n  /**\n   * @deprecated - Set a handler for the {@link volumeEvent}\n   * @param handler\n   */\n  Connection.prototype.volume = function (handler) {\n    if (!window || !window.AudioContext && !window.webkitAudioContext) {\n      this._log.warn('This browser does not support Connection.volume');\n    }\n    this._addHandler('volume', handler);\n  };\n  /**\n   * Add a handler for an EventEmitter and emit a deprecation warning on first call.\n   * @param eventName - Name of the event\n   * @param handler - A handler to call when the event is emitted\n   */\n  Connection.prototype._addHandler = function (eventName, handler) {\n    if (!hasBeenWarnedHandlers) {\n      this._log.warn(\"Connection callback handlers (accept, cancel, disconnect, error, ignore, mute, reject,\\n        volume) have been deprecated and will be removed in the next breaking release. Instead, the EventEmitter         interface can be used to set event listeners. Example: connection.on('\" + eventName + \"', handler)\");\n      hasBeenWarnedHandlers = true;\n    }\n    this.addListener(eventName, handler);\n    return this;\n  };\n  /**\n   * Check the volume passed, emitting a warning if one way audio is detected or cleared.\n   * @param currentVolume - The current volume for this direction\n   * @param streakFieldName - The name of the field on the {@link Connection} object that tracks how many times the\n   *   current value has been repeated consecutively.\n   * @param lastValueFieldName - The name of the field on the {@link Connection} object that tracks the most recent\n   *   volume for this direction\n   * @param direction - The directionality of this audio track, either 'input' or 'output'\n   * @returns The current streak; how many times in a row the same value has been polled.\n   */\n  Connection.prototype._checkVolume = function (currentVolume, currentStreak, lastValue, direction) {\n    var wasWarningRaised = currentStreak >= 10;\n    var newStreak = 0;\n    if (lastValue === currentVolume) {\n      newStreak = currentStreak;\n    }\n    if (newStreak >= 10) {\n      this._emitWarning('audio-level-', \"constant-audio-\" + direction + \"-level\", 10, newStreak, false);\n    } else if (wasWarningRaised) {\n      this._emitWarning('audio-level-', \"constant-audio-\" + direction + \"-level\", 10, newStreak, true);\n    }\n    return newStreak;\n  };\n  /**\n   * Clean up event listeners.\n   */\n  Connection.prototype._cleanupEventListeners = function () {\n    var _this = this;\n    var cleanup = function () {\n      if (!_this.pstream) {\n        return;\n      }\n      _this.pstream.removeListener('answer', _this._onAnswer);\n      _this.pstream.removeListener('cancel', _this._onCancel);\n      _this.pstream.removeListener('hangup', _this._onHangup);\n      _this.pstream.removeListener('ringing', _this._onRinging);\n      _this.pstream.removeListener('transportClose', _this._onTransportClose);\n    };\n    // This is kind of a hack, but it lets us avoid rewriting more code.\n    // Basically, there's a sequencing problem with the way PeerConnection raises\n    // the\n    //\n    //   Cannot establish connection. Client is disconnected\n    //\n    // error in Connection#accept. It calls PeerConnection#onerror, which emits\n    // the error event on Connection. An error handler on Connection then calls\n    // cleanupEventListeners, but then control returns to Connection#accept. It's\n    // at this point that we add a listener for the answer event that never gets\n    // removed. setTimeout will allow us to rerun cleanup again, _after_\n    // Connection#accept returns.\n    cleanup();\n    setTimeout(cleanup, 0);\n  };\n  /**\n   * Create the payload wrapper for a batch of metrics to be sent to Insights.\n   */\n  Connection.prototype._createMetricPayload = function () {\n    var payload = {\n      call_sid: this.parameters.CallSid,\n      dscp: !!this.options.dscp,\n      sdk_version: C.RELEASE_VERSION,\n      selected_region: this.options.selectedRegion\n    };\n    if (this.options.gateway) {\n      payload.gateway = this.options.gateway;\n    }\n    if (this.options.region) {\n      payload.region = this.options.region;\n    }\n    payload.direction = this._direction;\n    return payload;\n  };\n  /**\n   * Disconnect the {@link Connection}.\n   * @param message - A message explaining why the {@link Connection} is being disconnected.\n   * @param wasRemote - Whether the disconnect was triggered locally or remotely.\n   */\n  Connection.prototype._disconnect = function (message, wasRemote) {\n    message = typeof message === 'string' ? message : null;\n    if (this._status !== Connection.State.Open && this._status !== Connection.State.Connecting && this._status !== Connection.State.Reconnecting && this._status !== Connection.State.Ringing) {\n      return;\n    }\n    this._log.info('Disconnecting...');\n    // send pstream hangup message\n    if (this.pstream !== null && this.pstream.status !== 'disconnected' && this.sendHangup) {\n      var callsid = this.parameters.CallSid || this.outboundConnectionId;\n      if (callsid) {\n        this.pstream.hangup(callsid, message);\n      }\n    }\n    this._cleanupEventListeners();\n    this.mediaStream.close();\n    if (!wasRemote) {\n      this._publisher.info('connection', 'disconnected-by-local', null, this);\n    }\n  };\n  /**\n   * Transition to {@link ConnectionStatus.Open} if criteria is met.\n   */\n  Connection.prototype._maybeTransitionToOpen = function () {\n    if (this.mediaStream && this.mediaStream.status === 'open' && this._isAnswered) {\n      this._status = Connection.State.Open;\n      this.emit('accept', this);\n    }\n  };\n  /**\n   * Post an event to Endpoint Analytics indicating that the end user\n   *   has ignored a request for feedback.\n   */\n  Connection.prototype._postFeedbackDeclined = function () {\n    return this._publisher.info('feedback', 'received-none', null, this, true);\n  };\n  /**\n   * Publish the current set of queued metrics samples to Insights.\n   */\n  Connection.prototype._publishMetrics = function () {\n    var _this = this;\n    if (this._metricsSamples.length === 0) {\n      return;\n    }\n    this._publisher.postMetrics('quality-metrics-samples', 'metrics-sample', this._metricsSamples.splice(0), this._createMetricPayload(), this).catch(function (e) {\n      _this._log.warn('Unable to post metrics to Insights. Received error:', e);\n    });\n  };\n  /**\n   * Set the CallSid\n   * @param payload\n   */\n  Connection.prototype._setCallSid = function (payload) {\n    var callSid = payload.callsid;\n    if (!callSid) {\n      return;\n    }\n    this.parameters.CallSid = callSid;\n    this.mediaStream.callSid = callSid;\n  };\n  /**\n   * String representation of the {@link Connection} class.\n   * @private\n   */\n  Connection.toString = function () {\n    return '[Twilio.Connection class]';\n  };\n  return Connection;\n}(events_1.EventEmitter);\n(function (Connection) {\n  /**\n   * Possible states of the {@link Connection}.\n   */\n  var State;\n  (function (State) {\n    State[\"Closed\"] = \"closed\";\n    State[\"Connecting\"] = \"connecting\";\n    State[\"Open\"] = \"open\";\n    State[\"Pending\"] = \"pending\";\n    State[\"Reconnecting\"] = \"reconnecting\";\n    State[\"Ringing\"] = \"ringing\";\n  })(State = Connection.State || (Connection.State = {}));\n  /**\n   * Different issues that may have been experienced during a call, that can be\n   * reported to Twilio Insights via {@link Connection}.postFeedback().\n   */\n  var FeedbackIssue;\n  (function (FeedbackIssue) {\n    FeedbackIssue[\"AudioLatency\"] = \"audio-latency\";\n    FeedbackIssue[\"ChoppyAudio\"] = \"choppy-audio\";\n    FeedbackIssue[\"DroppedCall\"] = \"dropped-call\";\n    FeedbackIssue[\"Echo\"] = \"echo\";\n    FeedbackIssue[\"NoisyCall\"] = \"noisy-call\";\n    FeedbackIssue[\"OneWayAudio\"] = \"one-way-audio\";\n  })(FeedbackIssue = Connection.FeedbackIssue || (Connection.FeedbackIssue = {}));\n  /**\n   * A rating of call quality experienced during a call, to be reported to Twilio Insights\n   * via {@link Connection}.postFeedback().\n   */\n  var FeedbackScore;\n  (function (FeedbackScore) {\n    FeedbackScore[FeedbackScore[\"One\"] = 1] = \"One\";\n    FeedbackScore[FeedbackScore[\"Two\"] = 2] = \"Two\";\n    FeedbackScore[FeedbackScore[\"Three\"] = 3] = \"Three\";\n    FeedbackScore[FeedbackScore[\"Four\"] = 4] = \"Four\";\n    FeedbackScore[FeedbackScore[\"Five\"] = 5] = \"Five\";\n  })(FeedbackScore = Connection.FeedbackScore || (Connection.FeedbackScore = {}));\n  /**\n   * The directionality of the {@link Connection}, whether incoming or outgoing.\n   */\n  var CallDirection;\n  (function (CallDirection) {\n    CallDirection[\"Incoming\"] = \"INCOMING\";\n    CallDirection[\"Outgoing\"] = \"OUTGOING\";\n  })(CallDirection = Connection.CallDirection || (Connection.CallDirection = {}));\n  /**\n   * Valid audio codecs to use for the media connection.\n   */\n  var Codec;\n  (function (Codec) {\n    Codec[\"Opus\"] = \"opus\";\n    Codec[\"PCMU\"] = \"pcmu\";\n  })(Codec = Connection.Codec || (Connection.Codec = {}));\n  /**\n   * Possible ICE Gathering failures\n   */\n  var IceGatheringFailureReason;\n  (function (IceGatheringFailureReason) {\n    IceGatheringFailureReason[\"None\"] = \"none\";\n    IceGatheringFailureReason[\"Timeout\"] = \"timeout\";\n  })(IceGatheringFailureReason = Connection.IceGatheringFailureReason || (Connection.IceGatheringFailureReason = {}));\n  /**\n   * Possible media failures\n   */\n  var MediaFailure;\n  (function (MediaFailure) {\n    MediaFailure[\"ConnectionDisconnected\"] = \"ConnectionDisconnected\";\n    MediaFailure[\"ConnectionFailed\"] = \"ConnectionFailed\";\n    MediaFailure[\"IceGatheringFailed\"] = \"IceGatheringFailed\";\n    MediaFailure[\"LowBytes\"] = \"LowBytes\";\n  })(MediaFailure = Connection.MediaFailure || (Connection.MediaFailure = {}));\n})(Connection || (Connection = {}));\nfunction generateTempCallSid() {\n  return 'TJSxxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    /* tslint:disable:no-bitwise */\n    var r = Math.random() * 16 | 0;\n    var v = c === 'x' ? r : r & 0x3 | 0x8;\n    /* tslint:enable:no-bitwise */\n    return v.toString(16);\n  });\n}\nexports.default = Connection;","map":{"version":3,"names":["events_1","require","device_1","errors_1","log_1","icecandidate_1","statsMonitor_1","util_1","Backoff","C","PeerConnection","getPreferredCodecInfo","BACKOFF_CONFIG","factor","initialDelay","maxDelay","randomisationFactor","DTMF_INTER_TONE_GAP","DTMF_PAUSE_DURATION","DTMF_TONE_DURATION","METRICS_BATCH_SIZE","METRICS_DELAY","MEDIA_DISCONNECT_ERROR","disconnect","info","code","message","twilioError","MediaErrors","ConnectionError","MULTIPLE_THRESHOLD_WARNING_NAMES","packetsLostFraction","max","maxAverage","WARNING_NAMES","audioInputLevel","audioOutputLevel","bytesReceived","bytesSent","jitter","mos","rtt","WARNING_PREFIXES","maxDuration","min","minStandardDeviation","hasBeenWarnedHandlers","Connection","_super","__extends","config","options","_this","call","parameters","_inputVolumeStreak","_isAnswered","_isCancelled","_latestInputVolume","_latestOutputVolume","_log","default","getInstance","_metricsSamples","_outputVolumeStreak","_soundcache","Map","_status","State","Pending","enableRingingState","mediaStreamFactory","offerSdp","shouldPlayDisconnect","sendHangup","toString","_emitWarning","groupPrefix","warningName","threshold","value","wasCleared","warningData","groupSuffix","groupName","isMuted","level","payloadData","Array","values","map","val","Math","round","_publisher","post","data","emitName","emit","_onAnswer","payload","_setCallSid","_maybeTransitionToOpen","_onCancel","callsid","CallSid","_cleanupEventListeners","mediaStream","close","Closed","pstream","removeListener","_onHangup","outboundConnectionId","error","connection","GeneralErrors","_disconnect","_onMediaFailure","type","_a","MediaFailure","ConnectionDisconnected","ConnectionFailed","IceGatheringFailed","LowBytes","isEndOfIceCycle","enableIceRestart","isChrome","window","navigator","onerror","Reconnecting","Date","now","_mediaReconnectStartTime","_mediaReconnectBackoff","backoff","pc","version","isIceDisconnected","iceConnectionState","hasLowBytesWarning","_monitor","hasActiveWarning","mediaReconnectionError","warn","reset","_onMediaReconnected","Open","_onRinging","Connecting","Ringing","hasEarlyMedia","sdp","_onRTCSample","sample","callMetrics","__assign","inputVolume","outputVolume","_codec","codecName","push","length","_publishMetrics","_onTransportClose","_reemitWarning","test","name","warningPrefix","warning","_reemitWarningCleared","_isUnifiedPlanDefault","isUnifiedPlanDefault","soundcache","twimlParams","customParameters","Object","entries","key","String","assign","callParameters","_direction","CallDirection","Incoming","Outgoing","callerInfo","StirStatus","isVerified","exponential","on","iceRestart","generateTempCallSid","publisher","preflight","monitor","StatsMonitor","disableWarnings","setTimeout","enableWarnings","MediaStream","audioHelper","getUserMedia","RTCPeerConnection","codecPreferences","dscp","forceAggressiveIceNomination","isUnifiedPlan","maxAverageBitrate","_checkVolume","onaudio","remoteAudio","onvolume","internalInputVolume","internalOutputVolume","addVolumes","ondtlstransportstatechange","state","onpcconnectionstatechange","dtlsTransport","getRTCDtlsTransport","onicecandidate","candidate","IceCandidate","toPayload","debug","onselectedcandidatepairchange","pair","localCandidatePayload","local","remoteCandidatePayload","remote","local_candidate","remote_candidate","oniceconnectionstatechange","onicegatheringfailure","onicegatheringstatechange","onsignalingstatechange","ondisconnected","msg","onfailed","onconnected","onreconnected","e","onopen","mute","onclose","get","SoundName","Disconnect","play","disable","status","defineProperty","prototype","_getRealCallSid","_getTempCallSid","_setInputTracksFromStream","stream","setInputTracksFromStream","_setSinkIds","sinkIds","accept","handlerOrConstraints","rtcConfiguration","_addHandler","audioConstraints","connect","onAnswer","eventName","getSDP","codecParams","codec_params","selected_codec","enable","getSinkIds","isArray","catch","addListener","answerIncomingCall","rtcConstraints","params","from","encodeURIComponent","join","once","bind","makeOutgoingCall","token","beforeAccept","inputStream","getInputStream","promise","openWithConstraints","then","indexOf","cancel","handler","ignore","getLocalStream","getRemoteStream","_remoteStream","shouldMute","wasMuted","postFeedback","score","issue","_postFeedbackDeclined","FeedbackScore","includes","InvalidArgumentError","FeedbackIssue","issue_name","quality_score","reject","sendDigits","digits","match","sequence","split","forEach","digit","dtmf","playNextDigit","soundCache","dialtonePlayer","shift","dtmfSender","getOrCreateDTMFSender","insertDTMF","dtmfs","canInsertDTMF","unmute","volume","AudioContext","webkitAudioContext","currentVolume","currentStreak","lastValue","direction","wasWarningRaised","newStreak","cleanup","_createMetricPayload","call_sid","sdk_version","RELEASE_VERSION","selected_region","selectedRegion","gateway","region","wasRemote","hangup","postMetrics","splice","callSid","EventEmitter","Codec","IceGatheringFailureReason","replace","c","r","random","v","exports"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/twilio-client/lib/twilio/connection.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @publicapi\n * @internal\n */\nimport { EventEmitter } from 'events';\nimport Device from './device';\nimport DialtonePlayer from './dialtonePlayer';\nimport { GeneralErrors, InvalidArgumentError, MediaErrors, TwilioError } from './errors';\nimport Log from './log';\nimport { IceCandidate, RTCIceCandidate } from './rtc/icecandidate';\nimport RTCSample from './rtc/sample';\nimport RTCWarning from './rtc/warning';\nimport StatsMonitor from './statsMonitor';\nimport { isChrome } from './util';\n\nconst Backoff = require('backoff');\nconst C = require('./constants');\nconst { PeerConnection } = require('./rtc');\nconst { getPreferredCodecInfo } = require('./rtc/sdp');\n\n// Placeholders until we convert the respective files to TypeScript.\n/**\n * @private\n */\nexport type IAudioHelper = any;\n/**\n * @private\n */\nexport type IPStream = any;\n/**\n * @private\n */\nexport type IPeerConnection = any;\n/**\n * @private\n */\nexport type IPublisher = any;\n/**\n * @private\n */\nexport type ISound = any;\n\nconst BACKOFF_CONFIG = {\n  factor: 1.1,\n  initialDelay: 1,\n  maxDelay: 30000,\n  randomisationFactor: 0.5,\n};\n\nconst DTMF_INTER_TONE_GAP: number = 70;\nconst DTMF_PAUSE_DURATION: number = 500;\nconst DTMF_TONE_DURATION: number = 160;\n\nconst METRICS_BATCH_SIZE: number = 10;\nconst METRICS_DELAY: number = 5000;\n\nconst MEDIA_DISCONNECT_ERROR = {\n  disconnect: true,\n  info: {\n    code: 31003,\n    message: 'Connection with Twilio was interrupted.',\n    twilioError: new MediaErrors.ConnectionError(),\n  },\n};\n\nconst MULTIPLE_THRESHOLD_WARNING_NAMES: Record<string, Record<string, string>> = {\n  // The stat `packetsLostFraction` is monitored by two separate thresholds,\n  // `maxAverage` and `max`. Each threshold emits a different warning name.\n  packetsLostFraction: {\n    max: 'packet-loss',\n    maxAverage: 'packets-lost-fraction',\n  },\n};\n\nconst WARNING_NAMES: Record<string, string> = {\n  audioInputLevel: 'audio-input-level',\n  audioOutputLevel: 'audio-output-level',\n  bytesReceived: 'bytes-received',\n  bytesSent: 'bytes-sent',\n  jitter: 'jitter',\n  mos: 'mos',\n  rtt: 'rtt',\n};\n\nconst WARNING_PREFIXES: Record<string, string> = {\n  max: 'high-',\n  maxAverage: 'high-',\n  maxDuration: 'constant-',\n  min: 'low-',\n  minStandardDeviation: 'constant-',\n};\n\nlet hasBeenWarnedHandlers = false;\n\n/**\n * A {@link Connection} represents a media and signaling connection to a TwiML application.\n * @publicapi\n */\nclass Connection extends EventEmitter {\n  /**\n   * String representation of the {@link Connection} class.\n   * @private\n   */\n  static toString = () => '[Twilio.Connection class]';\n\n  /**\n   * Returns caller verification information about the caller.\n   * If no caller verification information is available this will return null.\n   */\n  readonly callerInfo: Connection.CallerInfo | null;\n\n  /**\n   * The custom parameters sent to (outgoing) or received by (incoming) the TwiML app.\n   */\n  readonly customParameters: Map<string, string>;\n\n  /**\n   * Whether this {@link Connection} is incoming or outgoing.\n   */\n  get direction(): Connection.CallDirection {\n    return this._direction;\n  }\n\n  /**\n   * Audio codec used for this {@link Connection}. Expecting {@link Connection.Codec} but\n   * will copy whatever we get from RTC stats.\n   */\n  get codec(): string {\n    return this._codec;\n  }\n\n  /**\n   * The MediaStream (Twilio PeerConnection) this {@link Connection} is using for\n   * media signaling.\n   * @private\n   */\n  mediaStream: IPeerConnection;\n\n  /**\n   * The temporary CallSid for this call, if it's outbound.\n   */\n  readonly outboundConnectionId?: string;\n\n  /**\n   * Call parameters received from Twilio for an incoming call.\n   */\n  parameters: Record<string, string> = { };\n\n  /**\n   * Audio codec used for this {@link Connection}. Expecting {@link Connection.Codec} but\n   * will copy whatever we get from RTC stats.\n   */\n  private _codec: string;\n\n  /**\n   * Whether this {@link Connection} is incoming or outgoing.\n   */\n  private readonly _direction: Connection.CallDirection;\n\n  /**\n   * The number of times input volume has been the same consecutively.\n   */\n  private _inputVolumeStreak: number = 0;\n\n  /**\n   * Whether the call has been answered.\n   */\n  private _isAnswered: boolean = false;\n\n  /**\n   * Whether the call has been cancelled.\n   */\n  private _isCancelled: boolean = false;\n\n  /**\n   * Whether or not the browser uses unified-plan SDP by default.\n   */\n  private readonly _isUnifiedPlanDefault: boolean | undefined;\n\n  /**\n   * The most recent public input volume value. 0 -> 1 representing -100 to -30 dB.\n   */\n  private _latestInputVolume: number = 0;\n\n  /**\n   * The most recent public output volume value. 0 -> 1 representing -100 to -30 dB.\n   */\n  private _latestOutputVolume: number = 0;\n\n  /**\n   * An instance of Logger to use.\n   */\n  private _log: Log = Log.getInstance();\n\n  /**\n   * An instance of Backoff for media reconnection\n   */\n  private _mediaReconnectBackoff: any;\n\n  /**\n   * Timestamp for the initial media reconnection\n   */\n  private _mediaReconnectStartTime: number;\n\n  /**\n   * A batch of metrics samples to send to Insights. Gets cleared after\n   * each send and appended to on each new sample.\n   */\n  private readonly _metricsSamples: Connection.CallMetrics[] = [];\n\n  /**\n   * An instance of StatsMonitor.\n   */\n  private readonly _monitor: StatsMonitor;\n\n  /**\n   * The number of times output volume has been the same consecutively.\n   */\n  private _outputVolumeStreak: number = 0;\n\n  /**\n   * An instance of EventPublisher.\n   */\n  private readonly _publisher: IPublisher;\n\n  /**\n   * A Map of Sounds to play.\n   */\n  private readonly _soundcache: Map<Device.SoundName, ISound> = new Map();\n\n  /**\n   * State of the {@link Connection}.\n   */\n  private _status: Connection.State = Connection.State.Pending;\n\n  /**\n   * TwiML params for the call. May be set for either outgoing or incoming calls.\n   */\n  private readonly message: Record<string, string>;\n\n  /**\n   * Options passed to this {@link Connection}.\n   */\n  private options: Connection.Options = {\n    enableRingingState: false,\n    mediaStreamFactory: PeerConnection,\n    offerSdp: null,\n    shouldPlayDisconnect: () => true,\n  };\n\n  /**\n   * The PStream instance to use for Twilio call signaling.\n   */\n  private readonly pstream: IPStream;\n\n  /**\n   * Whether the {@link Connection} should send a hangup on disconnect.\n   */\n  private sendHangup: boolean = true;\n\n  /**\n   * @constructor\n   * @private\n   * @param config - Mandatory configuration options\n   * @param [options] - Optional settings\n   */\n  constructor(config: Connection.Config, options?: Connection.Options) {\n    super();\n\n    this._isUnifiedPlanDefault = config.isUnifiedPlanDefault;\n    this._soundcache = config.soundcache;\n    this.message = options && options.twimlParams || { };\n    this.customParameters = new Map(\n      Object.entries(this.message).map(([key, val]: [string, any]): [string, string] => [key, String(val)]));\n\n    Object.assign(this.options, options);\n\n    if (this.options.callParameters) {\n      this.parameters = this.options.callParameters;\n    }\n\n    this._direction = this.parameters.CallSid ? Connection.CallDirection.Incoming : Connection.CallDirection.Outgoing;\n\n    if (this._direction === Connection.CallDirection.Incoming && this.parameters) {\n      this.callerInfo = this.parameters.StirStatus\n        ? { isVerified: this.parameters.StirStatus === 'TN-Validation-Passed-A' }\n        : null;\n    } else {\n      this.callerInfo = null;\n    }\n\n    this._mediaReconnectBackoff = Backoff.exponential(BACKOFF_CONFIG);\n    this._mediaReconnectBackoff.on('ready', () => this.mediaStream.iceRestart());\n\n    // temporary call sid to be used for outgoing calls\n    this.outboundConnectionId = generateTempCallSid();\n\n    const publisher = this._publisher = config.publisher;\n\n    if (this._direction === Connection.CallDirection.Incoming) {\n      publisher.info('connection', 'incoming', null, this);\n    } else {\n      publisher.info('connection', 'outgoing', { preflight: this.options.preflight }, this);\n    }\n\n    const monitor = this._monitor = new (this.options.StatsMonitor || StatsMonitor)();\n    monitor.on('sample', this._onRTCSample);\n\n    // First 20 seconds or so are choppy, so let's not bother with these warnings.\n    monitor.disableWarnings();\n    setTimeout(() => monitor.enableWarnings(), METRICS_DELAY);\n\n    monitor.on('warning', (data: RTCWarning, wasCleared?: boolean) => {\n      if (data.name === 'bytesSent' || data.name === 'bytesReceived') {\n        this._onMediaFailure(Connection.MediaFailure.LowBytes);\n      }\n      this._reemitWarning(data, wasCleared);\n    });\n    monitor.on('warning-cleared', (data: RTCWarning) => {\n      this._reemitWarningCleared(data);\n    });\n\n    this.mediaStream = new (this.options.MediaStream || this.options.mediaStreamFactory)\n      (config.audioHelper, config.pstream, config.getUserMedia, {\n        RTCPeerConnection: this.options.RTCPeerConnection,\n        codecPreferences: this.options.codecPreferences,\n        dscp: this.options.dscp,\n        enableIceRestart: this.options.enableIceRestart,\n        forceAggressiveIceNomination: this.options.forceAggressiveIceNomination,\n        isUnifiedPlan: this._isUnifiedPlanDefault,\n        maxAverageBitrate: this.options.maxAverageBitrate,\n        preflight: this.options.preflight,\n      });\n\n    this.on('volume', (inputVolume: number, outputVolume: number): void => {\n      this._inputVolumeStreak = this._checkVolume(\n        inputVolume, this._inputVolumeStreak, this._latestInputVolume, 'input');\n      this._outputVolumeStreak = this._checkVolume(\n        outputVolume, this._outputVolumeStreak, this._latestOutputVolume, 'output');\n      this._latestInputVolume = inputVolume;\n      this._latestOutputVolume = outputVolume;\n    });\n\n    this.mediaStream.onaudio = (remoteAudio: typeof Audio) => {\n      this._log.info('Remote audio created');\n      this.emit('audio', remoteAudio);\n    };\n\n    this.mediaStream.onvolume = (inputVolume: number, outputVolume: number,\n                                 internalInputVolume: number, internalOutputVolume: number) => {\n      // (rrowland) These values mock the 0 -> 32767 format used by legacy getStats. We should look into\n      // migrating to a newer standard, either 0.0 -> linear or -127 to 0 in dB, matching the range\n      // chosen below.\n      monitor.addVolumes((internalInputVolume / 255) * 32767, (internalOutputVolume / 255) * 32767);\n\n      // (rrowland) 0.0 -> 1.0 linear\n      this.emit('volume', inputVolume, outputVolume);\n    };\n\n    this.mediaStream.ondtlstransportstatechange = (state: string): void => {\n      const level = state === 'failed' ? 'error' : 'debug';\n      this._publisher.post(level, 'dtls-transport-state', state, null, this);\n    };\n\n    this.mediaStream.onpcconnectionstatechange = (state: string): void => {\n      let level = 'debug';\n      const dtlsTransport = this.mediaStream.getRTCDtlsTransport();\n\n      if (state === 'failed') {\n        level = dtlsTransport && dtlsTransport.state === 'failed' ? 'error' : 'warning';\n      }\n      this._publisher.post(level, 'pc-connection-state', state, null, this);\n    };\n\n    this.mediaStream.onicecandidate = (candidate: RTCIceCandidate): void => {\n      const payload = new IceCandidate(candidate).toPayload();\n      this._publisher.debug('ice-candidate', 'ice-candidate', payload, this);\n    };\n\n    this.mediaStream.onselectedcandidatepairchange = (pair: RTCIceCandidatePair): void => {\n      const localCandidatePayload = new IceCandidate(pair.local).toPayload();\n      const remoteCandidatePayload = new IceCandidate(pair.remote, true).toPayload();\n\n      this._publisher.debug('ice-candidate', 'selected-ice-candidate-pair', {\n        local_candidate: localCandidatePayload,\n        remote_candidate: remoteCandidatePayload,\n      }, this);\n    };\n\n    this.mediaStream.oniceconnectionstatechange = (state: string): void => {\n      const level = state === 'failed' ? 'error' : 'debug';\n      this._publisher.post(level, 'ice-connection-state', state, null, this);\n    };\n\n    this.mediaStream.onicegatheringfailure = (type: Connection.IceGatheringFailureReason): void => {\n      this._publisher.warn('ice-gathering-state', type, null, this);\n      this._onMediaFailure(Connection.MediaFailure.IceGatheringFailed);\n    };\n\n    this.mediaStream.onicegatheringstatechange = (state: string): void => {\n      this._publisher.debug('ice-gathering-state', state, null, this);\n    };\n\n    this.mediaStream.onsignalingstatechange = (state: string): void => {\n      this._publisher.debug('signaling-state', state, null, this);\n    };\n\n    this.mediaStream.ondisconnected = (msg: string): void => {\n      this._log.info(msg);\n      this._publisher.warn('network-quality-warning-raised', 'ice-connectivity-lost', {\n        message: msg,\n      }, this);\n      this.emit('warning', 'ice-connectivity-lost');\n\n      this._onMediaFailure(Connection.MediaFailure.ConnectionDisconnected);\n    };\n\n    this.mediaStream.onfailed = (msg: string): void => {\n      this._onMediaFailure(Connection.MediaFailure.ConnectionFailed);\n    };\n\n    this.mediaStream.onconnected = (): void => {\n      // First time mediaStream is connected, but ICE Gathering issued an ICE restart and succeeded.\n      if (this._status === Connection.State.Reconnecting) {\n        this._onMediaReconnected();\n      }\n    };\n\n    this.mediaStream.onreconnected = (msg: string): void => {\n      this._log.info(msg);\n      this._publisher.info('network-quality-warning-cleared', 'ice-connectivity-lost', {\n        message: msg,\n      }, this);\n      this.emit('warning-cleared', 'ice-connectivity-lost');\n      this._onMediaReconnected();\n    };\n\n    this.mediaStream.onerror = (e: any): void => {\n      if (e.disconnect === true) {\n        this._disconnect(e.info && e.info.message);\n      }\n      const error: Connection.Error = {\n        code: e.info.code,\n        connection: this,\n        info: e.info,\n        message: e.info.message || 'Error with mediastream',\n        twilioError: e.info.twilioError,\n      };\n\n      this._log.error('Received an error from MediaStream:', e);\n      this.emit('error', error);\n    };\n\n    this.mediaStream.onopen = () => {\n      // NOTE(mroberts): While this may have been happening in previous\n      // versions of Chrome, since Chrome 45 we have seen the\n      // PeerConnection's onsignalingstatechange handler invoked multiple\n      // times in the same signalingState 'stable'. When this happens, we\n      // invoke this onopen function. If we invoke it twice without checking\n      // for _status 'open', we'd accidentally close the PeerConnection.\n      //\n      // See <https://code.google.com/p/webrtc/issues/detail?id=4996>.\n      if (this._status === Connection.State.Open || this._status === Connection.State.Reconnecting) {\n        return;\n      } else if (this._status === Connection.State.Ringing || this._status === Connection.State.Connecting) {\n        this.mute(false);\n        this._maybeTransitionToOpen();\n      } else {\n        // call was probably canceled sometime before this\n        this.mediaStream.close();\n      }\n    };\n\n    this.mediaStream.onclose = () => {\n      this._status = Connection.State.Closed;\n      if (this.options.shouldPlayDisconnect && this.options.shouldPlayDisconnect()\n        // Don't play disconnect sound if this was from a cancel event. i.e. the call\n        // was ignored or hung up even before it was answered.\n        && !this._isCancelled) {\n\n        this._soundcache.get(Device.SoundName.Disconnect).play();\n      }\n\n      monitor.disable();\n      this._publishMetrics();\n\n      if (!this._isCancelled) {\n        this.emit('disconnect', this);\n      }\n    };\n\n    this.pstream = config.pstream;\n    this.pstream.on('cancel', this._onCancel);\n    this.pstream.on('ringing', this._onRinging);\n    this.pstream.on('transportClose', this._onTransportClose);\n\n    this.on('error', error => {\n      this._publisher.error('connection', 'error', {\n        code: error.code, message: error.message,\n      }, this);\n\n      if (this.pstream && this.pstream.status === 'disconnected') {\n        this._cleanupEventListeners();\n      }\n    });\n\n    this.on('disconnect', () => {\n      this._cleanupEventListeners();\n    });\n  }\n\n  /**\n   * Get the real CallSid. Returns null if not present or is a temporary call sid.\n   * @deprecated\n   * @private\n   */\n  _getRealCallSid(): string | null {\n    this._log.warn('_getRealCallSid is deprecated and will be removed in 2.0.');\n    return /^TJ/.test(this.parameters.CallSid) ? null : this.parameters.CallSid;\n  }\n\n  /**\n   * Get the temporary CallSid.\n   * @deprecated\n   * @private\n   */\n  _getTempCallSid(): string | undefined {\n    this._log.warn('_getTempCallSid is deprecated and will be removed in 2.0. \\\n                    Please use outboundConnectionId instead.');\n    return this.outboundConnectionId;\n  }\n\n  /**\n   * Set the audio input tracks from a given stream.\n   * @param stream\n   * @private\n   */\n  _setInputTracksFromStream(stream: MediaStream | null): Promise<void> {\n    return this.mediaStream.setInputTracksFromStream(stream);\n  }\n\n  /**\n   * Set the audio output sink IDs.\n   * @param sinkIds\n   * @private\n   */\n  _setSinkIds(sinkIds: string[]): Promise<void> {\n    return this.mediaStream._setSinkIds(sinkIds);\n  }\n\n  /**\n   * Accept the incoming {@link Connection}.\n   * @param [audioConstraints]\n   * @param [rtcConfiguration] - An RTCConfiguration to override the one set in `Device.setup`.\n   */\n  accept(audioConstraints?: MediaTrackConstraints | boolean, rtcConfiguration?: RTCConfiguration): void;\n  /**\n   * @deprecated - Set a handler for the {@link acceptEvent}\n   * @param handler\n   */\n  accept(handler: (connection: this) => void): void;\n  accept(handlerOrConstraints?: ((connection: this) => void) | MediaTrackConstraints | boolean,\n         rtcConfiguration?: RTCConfiguration): void {\n    if (typeof handlerOrConstraints === 'function') {\n      this._addHandler('accept', handlerOrConstraints);\n      return;\n    }\n\n    if (this._status !== Connection.State.Pending) {\n      return;\n    }\n\n    const audioConstraints = handlerOrConstraints || this.options.audioConstraints;\n    this._status = Connection.State.Connecting;\n\n    const connect = () => {\n      if (this._status !== Connection.State.Connecting) {\n        // call must have been canceled\n        this._cleanupEventListeners();\n        this.mediaStream.close();\n        return;\n      }\n\n      const onAnswer = (pc: RTCPeerConnection) => {\n        // Report that the call was answered, and directionality\n        const eventName = this._direction === Connection.CallDirection.Incoming\n          ? 'accepted-by-local'\n          : 'accepted-by-remote';\n        this._publisher.info('connection', eventName, null, this);\n\n        // Report the preferred codec and params as they appear in the SDP\n        const { codecName, codecParams } = getPreferredCodecInfo(this.mediaStream.version.getSDP());\n        this._publisher.info('settings', 'codec', {\n          codec_params: codecParams,\n          selected_codec: codecName,\n        }, this);\n\n        // Enable RTC monitoring\n        this._monitor.enable(pc);\n      };\n\n      const sinkIds = typeof this.options.getSinkIds === 'function' && this.options.getSinkIds();\n      if (Array.isArray(sinkIds)) {\n        this.mediaStream._setSinkIds(sinkIds).catch(() => {\n          // (rrowland) We don't want this to throw to console since the customer\n          // can't control this. This will most commonly be rejected on browsers\n          // that don't support setting sink IDs.\n        });\n      }\n\n      this.pstream.addListener('hangup', this._onHangup);\n\n      rtcConfiguration = rtcConfiguration || this.options.rtcConfiguration;\n\n      if (this._direction === Connection.CallDirection.Incoming) {\n        this._isAnswered = true;\n        this.mediaStream.answerIncomingCall(this.parameters.CallSid, this.options.offerSdp,\n          this.options.rtcConstraints, rtcConfiguration, onAnswer);\n      } else {\n        const params = Array.from(this.customParameters.entries()).map(pair =>\n         `${encodeURIComponent(pair[0])}=${encodeURIComponent(pair[1])}`).join('&');\n        this.pstream.once('answer', this._onAnswer.bind(this));\n        this.mediaStream.makeOutgoingCall(this.pstream.token, params, this.outboundConnectionId,\n          this.options.rtcConstraints, rtcConfiguration, onAnswer);\n      }\n    };\n\n    if (this.options.beforeAccept) {\n      this.options.beforeAccept(this);\n    }\n\n    const inputStream = typeof this.options.getInputStream === 'function' && this.options.getInputStream();\n\n    const promise = inputStream\n      ? this.mediaStream.setInputTracksFromStream(inputStream)\n      : this.mediaStream.openWithConstraints(audioConstraints);\n\n    promise.then(() => {\n      this._publisher.info('get-user-media', 'succeeded', {\n        data: { audioConstraints },\n      }, this);\n\n      connect();\n    }, (error: Record<string, any>) => {\n      let message;\n      let code;\n\n      if (error.code === 31208\n        || ['PermissionDeniedError', 'NotAllowedError'].indexOf(error.name) !== -1) {\n        code = 31208;\n        message = 'User denied access to microphone, or the web browser did not allow microphone '\n          + 'access at this address.';\n        this._publisher.error('get-user-media', 'denied', {\n          data: {\n            audioConstraints,\n            error,\n          },\n        }, this);\n      } else {\n        code = 31201;\n        message = `Error occurred while accessing microphone: ${error.name}${error.message\n          ? ` (${error.message})`\n          : ''}`;\n\n        this._publisher.error('get-user-media', 'failed', {\n          data: {\n            audioConstraints,\n            error,\n          },\n        }, this);\n      }\n\n      this._disconnect();\n      this.emit('error', { message, code });\n    });\n  }\n\n  /**\n   * @deprecated - Ignore the incoming {@link Connection}.\n   */\n  cancel(): void;\n  /**\n   * @deprecated - Set a handler for the {@link cancelEvent}\n   */\n  cancel(handler: () => void): void;\n  cancel(handler?: () => void): void {\n    this._log.warn('.cancel() is deprecated. Please use .ignore() instead.');\n\n    if (handler) {\n      this.ignore(handler);\n    } else {\n      this.ignore();\n    }\n  }\n\n  /**\n   * Disconnect from the {@link Connection}.\n   */\n  disconnect(): void;\n  /**\n   * @deprecated - Set a handler for the {@link disconnectEvent}\n   */\n  disconnect(handler: (connection: this) => void): void;\n  disconnect(handler?: (connection: this) => void): void {\n    if (typeof handler === 'function') {\n      this._addHandler('disconnect', handler);\n      return;\n    }\n    this._disconnect();\n  }\n\n  /**\n   * @deprecated - Set a handler for the {@link errorEvent}\n   */\n  error(handler: (error: Connection.Error) => void): void {\n    if (typeof handler === 'function') {\n      this._addHandler('error', handler);\n    }\n  }\n\n  /**\n   * Get the local MediaStream, if set.\n   */\n  getLocalStream(): MediaStream | undefined {\n    return this.mediaStream && this.mediaStream.stream;\n  }\n\n  /**\n   * Get the remote MediaStream, if set.\n   */\n  getRemoteStream(): MediaStream | undefined {\n    return this.mediaStream && this.mediaStream._remoteStream;\n  }\n\n  /**\n   * Ignore the incoming {@link Connection}.\n   */\n  ignore(): void;\n  /**\n   * @deprecated - Set a handler for the {@link cancelEvent}\n   */\n  ignore(handler: () => void): void;\n  ignore(handler?: () => void): void {\n    if (typeof handler === 'function') {\n      this._addHandler('cancel', handler);\n      return;\n    }\n\n    if (this._status !== Connection.State.Pending) {\n      return;\n    }\n\n    this._status = Connection.State.Closed;\n    this.emit('cancel');\n    this.mediaStream.ignore(this.parameters.CallSid);\n    this._publisher.info('connection', 'ignored-by-local', null, this);\n  }\n\n  /**\n   * Check if connection is muted\n   */\n  isMuted(): boolean {\n    return this.mediaStream.isMuted;\n  }\n\n  /**\n   * Mute incoming audio.\n   * @param shouldMute - Whether the incoming audio should be muted. Defaults to true.\n   */\n  mute(shouldMute?: boolean): void;\n  /**\n   * @deprecated - Set a handler for the {@link muteEvent}\n   */\n  mute(handler: (isMuted: boolean, connection: this) => void): void;\n  mute(shouldMute: boolean | ((isMuted: boolean, connection: this) => void) = true): void {\n    if (typeof shouldMute === 'function') {\n      this._addHandler('mute', shouldMute);\n      return;\n    }\n\n    const wasMuted = this.mediaStream.isMuted;\n    this.mediaStream.mute(shouldMute);\n\n    const isMuted = this.mediaStream.isMuted;\n    if (wasMuted !== isMuted) {\n      this._publisher.info('connection', isMuted ? 'muted' : 'unmuted', null, this);\n      this.emit('mute', isMuted, this);\n    }\n  }\n\n  /**\n   * Post an event to Endpoint Analytics indicating that the end user\n   *   has given call quality feedback. Called without a score, this\n   *   will report that the customer declined to give feedback.\n   * @param score - The end-user's rating of the call; an\n   *   integer 1 through 5. Or undefined if the user declined to give\n   *   feedback.\n   * @param issue - The primary issue the end user\n   *   experienced on the call. Can be: ['one-way-audio', 'choppy-audio',\n   *   'dropped-call', 'audio-latency', 'noisy-call', 'echo']\n   */\n  postFeedback(score?: Connection.FeedbackScore, issue?: Connection.FeedbackIssue): Promise<void> {\n    if (typeof score === 'undefined' || score === null) {\n      return this._postFeedbackDeclined();\n    }\n\n    if (!Object.values(Connection.FeedbackScore).includes(score)) {\n      throw new InvalidArgumentError(`Feedback score must be one of: ${Object.values(Connection.FeedbackScore)}`);\n    }\n\n    if (typeof issue !== 'undefined' && issue !== null && !Object.values(Connection.FeedbackIssue).includes(issue)) {\n      throw new InvalidArgumentError(`Feedback issue must be one of: ${Object.values(Connection.FeedbackIssue)}`);\n    }\n\n    return this._publisher.info('feedback', 'received', {\n      issue_name: issue,\n      quality_score: score,\n    }, this, true);\n  }\n\n  /**\n   * Reject the incoming {@link Connection}.\n   */\n  reject(): void;\n  /**\n   * @deprecated - Set a handler for the {@link rejectEvent}\n   */\n  reject(handler: () => void): void;\n  reject(handler?: () => void): void {\n    if (typeof handler === 'function') {\n      this._addHandler('reject', handler);\n      return;\n    }\n\n    if (this._status !== Connection.State.Pending) {\n      return;\n    }\n\n    this.pstream.reject(this.parameters.CallSid);\n    this._status = Connection.State.Closed;\n    this.emit('reject');\n    this.mediaStream.reject(this.parameters.CallSid);\n    this._publisher.info('connection', 'rejected-by-local', null, this);\n  }\n\n  /**\n   * Send a string of digits.\n   * @param digits\n   */\n  sendDigits(digits: string): void {\n    if (digits.match(/[^0-9*#w]/)) {\n      throw new InvalidArgumentError('Illegal character passed into sendDigits');\n    }\n\n    const sequence: string[] = [];\n    digits.split('').forEach((digit: string) => {\n      let dtmf = (digit !== 'w') ? `dtmf${digit}` : '';\n      if (dtmf === 'dtmf*') { dtmf = 'dtmfs'; }\n      if (dtmf === 'dtmf#') { dtmf = 'dtmfh'; }\n      sequence.push(dtmf);\n    });\n\n    // Binds soundCache to be used in recursion until all digits have been played.\n    (function playNextDigit(soundCache, dialtonePlayer) {\n      const digit: string | undefined = sequence.shift();\n\n      if (digit) {\n        if (dialtonePlayer) {\n          dialtonePlayer.play(digit);\n        } else {\n          soundCache.get(digit as Device.SoundName).play();\n        }\n      }\n\n      if (sequence.length) {\n        setTimeout(playNextDigit.bind(null, soundCache), 200);\n      }\n    })(this._soundcache, this.options.dialtonePlayer);\n\n    const dtmfSender = this.mediaStream.getOrCreateDTMFSender();\n\n    function insertDTMF(dtmfs: string[]) {\n      if (!dtmfs.length) { return; }\n      const dtmf: string | undefined = dtmfs.shift();\n\n      if (dtmf && dtmf.length) {\n        dtmfSender.insertDTMF(dtmf, DTMF_TONE_DURATION, DTMF_INTER_TONE_GAP);\n      }\n\n      setTimeout(insertDTMF.bind(null, dtmfs), DTMF_PAUSE_DURATION);\n    }\n\n    if (dtmfSender) {\n      if (!('canInsertDTMF' in dtmfSender) || dtmfSender.canInsertDTMF) {\n        this._log.info('Sending digits using RTCDTMFSender');\n        // NOTE(mroberts): We can't just map 'w' to ',' since\n        // RTCDTMFSender's pause duration is 2 s and Twilio's is more\n        // like 500 ms. Instead, we will fudge it with setTimeout.\n        insertDTMF(digits.split('w'));\n        return;\n      }\n\n      this._log.info('RTCDTMFSender cannot insert DTMF');\n    }\n\n    // send pstream message to send DTMF\n    this._log.info('Sending digits over PStream');\n\n    if (this.pstream !== null && this.pstream.status !== 'disconnected') {\n      this.pstream.dtmf(this.parameters.CallSid, digits);\n    } else {\n      const error = {\n        code: 31000,\n        connection: this,\n        message: 'Could not send DTMF: Signaling channel is disconnected',\n      };\n      this.emit('error', error);\n    }\n  }\n\n  /**\n   * Get the current {@link Connection} status.\n   */\n  status(): Connection.State {\n    return this._status;\n  }\n\n  /**\n   * String representation of {@link Connection} instance.\n   * @private\n   */\n  toString = () => '[Twilio.Connection instance]';\n\n  /**\n   * @deprecated - Unmute the {@link Connection}.\n   */\n  unmute(): void {\n    this._log.warn('.unmute() is deprecated. Please use .mute(false) to unmute a call instead.');\n    this.mute(false);\n  }\n\n  /**\n   * @deprecated - Set a handler for the {@link volumeEvent}\n   * @param handler\n   */\n  volume(handler: (inputVolume: number, outputVolume: number) => void): void {\n    if (!window || (!(window as any).AudioContext && !(window as any).webkitAudioContext)) {\n      this._log.warn('This browser does not support Connection.volume');\n    }\n\n    this._addHandler('volume', handler);\n  }\n\n  /**\n   * Add a handler for an EventEmitter and emit a deprecation warning on first call.\n   * @param eventName - Name of the event\n   * @param handler - A handler to call when the event is emitted\n   */\n  private _addHandler(eventName: string, handler: (...args: any[]) => any): this {\n    if (!hasBeenWarnedHandlers) {\n      this._log.warn(`Connection callback handlers (accept, cancel, disconnect, error, ignore, mute, reject,\n        volume) have been deprecated and will be removed in the next breaking release. Instead, the EventEmitter \\\n        interface can be used to set event listeners. Example: connection.on('${eventName}', handler)`);\n      hasBeenWarnedHandlers = true;\n    }\n\n    this.addListener(eventName, handler);\n    return this;\n  }\n\n  /**\n   * Check the volume passed, emitting a warning if one way audio is detected or cleared.\n   * @param currentVolume - The current volume for this direction\n   * @param streakFieldName - The name of the field on the {@link Connection} object that tracks how many times the\n   *   current value has been repeated consecutively.\n   * @param lastValueFieldName - The name of the field on the {@link Connection} object that tracks the most recent\n   *   volume for this direction\n   * @param direction - The directionality of this audio track, either 'input' or 'output'\n   * @returns The current streak; how many times in a row the same value has been polled.\n   */\n  private _checkVolume(currentVolume: number, currentStreak: number,\n                       lastValue: number, direction: 'input'|'output'): number {\n    const wasWarningRaised: boolean = currentStreak >= 10;\n    let newStreak: number = 0;\n\n    if (lastValue === currentVolume) {\n      newStreak = currentStreak;\n    }\n\n    if (newStreak >= 10) {\n      this._emitWarning('audio-level-', `constant-audio-${direction}-level`, 10, newStreak, false);\n    } else if (wasWarningRaised) {\n      this._emitWarning('audio-level-', `constant-audio-${direction}-level`, 10, newStreak, true);\n    }\n\n    return newStreak;\n  }\n\n  /**\n   * Clean up event listeners.\n   */\n  private _cleanupEventListeners(): void {\n    const cleanup = () => {\n      if (!this.pstream) { return; }\n\n      this.pstream.removeListener('answer', this._onAnswer);\n      this.pstream.removeListener('cancel', this._onCancel);\n      this.pstream.removeListener('hangup', this._onHangup);\n      this.pstream.removeListener('ringing', this._onRinging);\n      this.pstream.removeListener('transportClose', this._onTransportClose);\n    };\n\n    // This is kind of a hack, but it lets us avoid rewriting more code.\n    // Basically, there's a sequencing problem with the way PeerConnection raises\n    // the\n    //\n    //   Cannot establish connection. Client is disconnected\n    //\n    // error in Connection#accept. It calls PeerConnection#onerror, which emits\n    // the error event on Connection. An error handler on Connection then calls\n    // cleanupEventListeners, but then control returns to Connection#accept. It's\n    // at this point that we add a listener for the answer event that never gets\n    // removed. setTimeout will allow us to rerun cleanup again, _after_\n    // Connection#accept returns.\n    cleanup();\n    setTimeout(cleanup, 0);\n  }\n\n  /**\n   * Create the payload wrapper for a batch of metrics to be sent to Insights.\n   */\n  private _createMetricPayload(): Partial<Record<string, string|boolean>> {\n    const payload: Partial<Record<string, string|boolean>> = {\n      call_sid: this.parameters.CallSid,\n      dscp: !!this.options.dscp,\n      sdk_version: C.RELEASE_VERSION,\n      selected_region: this.options.selectedRegion,\n    };\n\n    if (this.options.gateway) {\n      payload.gateway = this.options.gateway;\n    }\n\n    if (this.options.region) {\n      payload.region = this.options.region;\n    }\n\n    payload.direction = this._direction;\n    return payload;\n  }\n\n  /**\n   * Disconnect the {@link Connection}.\n   * @param message - A message explaining why the {@link Connection} is being disconnected.\n   * @param wasRemote - Whether the disconnect was triggered locally or remotely.\n   */\n  private _disconnect(message?: string | null, wasRemote?: boolean): void {\n    message = typeof message === 'string' ? message : null;\n\n    if (this._status !== Connection.State.Open\n        && this._status !== Connection.State.Connecting\n        && this._status !== Connection.State.Reconnecting\n        && this._status !== Connection.State.Ringing) {\n      return;\n    }\n\n    this._log.info('Disconnecting...');\n\n    // send pstream hangup message\n    if (this.pstream !== null && this.pstream.status !== 'disconnected' && this.sendHangup) {\n      const callsid: string | undefined = this.parameters.CallSid || this.outboundConnectionId;\n      if (callsid) {\n        this.pstream.hangup(callsid, message);\n      }\n    }\n\n    this._cleanupEventListeners();\n    this.mediaStream.close();\n\n    if (!wasRemote) {\n      this._publisher.info('connection', 'disconnected-by-local', null, this);\n    }\n  }\n\n  private _emitWarning = (groupPrefix: string, warningName: string, threshold: number,\n                          value: number|number[], wasCleared?: boolean, warningData?: RTCWarning): void => {\n    const groupSuffix = wasCleared ? '-cleared' : '-raised';\n    const groupName = `${groupPrefix}warning${groupSuffix}`;\n\n    // Ignore constant input if the Connection is muted (Expected)\n    if (warningName === 'constant-audio-input-level' && this.isMuted()) {\n      return;\n    }\n\n    let level = wasCleared ? 'info' : 'warning';\n\n    // Avoid throwing false positives as warnings until we refactor volume metrics\n    if (warningName === 'constant-audio-output-level') {\n      level = 'info';\n    }\n\n    const payloadData: Record<string, any> = { threshold };\n\n    if (value) {\n      if (value instanceof Array) {\n        payloadData.values = value.map((val: any) => {\n          if (typeof val === 'number') {\n            return Math.round(val * 100) / 100;\n          }\n\n          return value;\n        });\n      } else {\n        payloadData.value = value;\n      }\n    }\n\n    this._publisher.post(level, groupName, warningName, { data: payloadData }, this);\n\n    if (warningName !== 'constant-audio-output-level') {\n      const emitName = wasCleared ? 'warning-cleared' : 'warning';\n      this.emit(emitName, warningName, warningData && !wasCleared ? warningData : null);\n    }\n  }\n\n  /**\n   * Transition to {@link ConnectionStatus.Open} if criteria is met.\n   */\n  private _maybeTransitionToOpen(): void {\n    if (this.mediaStream && this.mediaStream.status === 'open' && this._isAnswered) {\n      this._status = Connection.State.Open;\n      this.emit('accept', this);\n    }\n  }\n\n  /**\n   * Called when the {@link Connection} is answered.\n   * @param payload\n   */\n  private _onAnswer = (payload: Record<string, any>): void => {\n    // answerOnBridge=false will send a 183 which we need to catch in _onRinging when\n    // the enableRingingState flag is disabled. In that case, we will receive a 200 after\n    // the callee accepts the call firing a second `accept` event if we don't\n    // short circuit here.\n    if (this._isAnswered) {\n      return;\n    }\n\n    this._setCallSid(payload);\n    this._isAnswered = true;\n    this._maybeTransitionToOpen();\n  }\n\n  /**\n   * Called when the {@link Connection} is cancelled.\n   * @param payload\n   */\n  private _onCancel = (payload: Record<string, any>): void => {\n    // (rrowland) Is this check necessary? Verify, and if so move to pstream / VSP module.\n    const callsid = payload.callsid;\n    if (this.parameters.CallSid === callsid) {\n      this._isCancelled = true;\n      this._publisher.info('connection', 'cancel', null, this);\n      this._cleanupEventListeners();\n      this.mediaStream.close();\n\n      this._status = Connection.State.Closed;\n      this.emit('cancel');\n      this.pstream.removeListener('cancel', this._onCancel);\n    }\n  }\n\n  /**\n   * Called when the {@link Connection} is hung up.\n   * @param payload\n   */\n  private _onHangup = (payload: Record<string, any>): void => {\n    /**\n     *  see if callsid passed in message matches either callsid or outbound id\n     *  connection should always have either callsid or outbound id\n     *  if no callsid passed hangup anyways\n     */\n    if (payload.callsid && (this.parameters.CallSid || this.outboundConnectionId)) {\n      if (payload.callsid !== this.parameters.CallSid\n          && payload.callsid !== this.outboundConnectionId) {\n        return;\n      }\n    } else if (payload.callsid) {\n      // hangup is for another connection\n      return;\n    }\n\n    this._log.info('Received HANGUP from gateway');\n    if (payload.error) {\n      const error = {\n        code: payload.error.code || 31000,\n        connection: this,\n        message: payload.error.message || 'Error sent from gateway in HANGUP',\n        twilioError: new GeneralErrors.ConnectionError(),\n      };\n      this._log.error('Received an error from the gateway:', error);\n      this.emit('error', error);\n    }\n    this.sendHangup = false;\n    this._publisher.info('connection', 'disconnected-by-remote', null, this);\n    this._disconnect(null, true);\n    this._cleanupEventListeners();\n  }\n\n  /**\n   * Called when there is a media failure.\n   * Manages all media-related states and takes action base on the states\n   * @param type - Type of media failure\n   */\n  private _onMediaFailure = (type: Connection.MediaFailure): void => {\n    const {\n      ConnectionDisconnected, ConnectionFailed, IceGatheringFailed, LowBytes,\n    } = Connection.MediaFailure;\n\n    // These types signifies the end of a single ICE cycle\n    const isEndOfIceCycle = type === ConnectionFailed || type === IceGatheringFailed;\n\n    // Default behavior on ice failures with disabled ice restart.\n    if ((!this.options.enableIceRestart && isEndOfIceCycle)\n\n      // All browsers except chrome doesn't update pc.iceConnectionState and pc.connectionState\n      // after issuing an ICE Restart, which we use to determine if ICE Restart is complete.\n      // Since we cannot detect if ICE Restart is complete, we will not retry.\n      || (!isChrome(window, window.navigator) && type === ConnectionFailed)) {\n\n        return this.mediaStream.onerror(MEDIA_DISCONNECT_ERROR);\n    }\n\n    // Ignore any other type of media failure if ice restart is disabled\n    if (!this.options.enableIceRestart) {\n      return;\n    }\n\n    // Ignore subsequent requests if ice restart is in progress\n    if (this._status === Connection.State.Reconnecting) {\n\n      // This is a retry. Previous ICE Restart failed\n      if (isEndOfIceCycle) {\n\n        // We already exceeded max retry time.\n        if (Date.now() - this._mediaReconnectStartTime > BACKOFF_CONFIG.maxDelay) {\n          this._log.info('Exceeded max ICE retries');\n          return this.mediaStream.onerror(MEDIA_DISCONNECT_ERROR);\n        }\n\n        // Issue ICE restart with backoff\n        this._mediaReconnectBackoff.backoff();\n      }\n\n      return;\n    }\n\n    const pc = this.mediaStream.version.pc;\n    const isIceDisconnected = pc && pc.iceConnectionState === 'disconnected';\n    const hasLowBytesWarning = this._monitor.hasActiveWarning('bytesSent', 'min')\n      || this._monitor.hasActiveWarning('bytesReceived', 'min');\n\n    // Only certain conditions can trigger media reconnection\n    if ((type === LowBytes && isIceDisconnected)\n      || (type === ConnectionDisconnected && hasLowBytesWarning)\n      || isEndOfIceCycle) {\n\n      const mediaReconnectionError = {\n        code: 53405,\n        message: 'Media connection failed.',\n        twilioError: new MediaErrors.ConnectionError(),\n      };\n      this._log.warn('ICE Connection disconnected.');\n      this._publisher.warn('connection', 'error', mediaReconnectionError, this);\n      this._publisher.info('connection', 'reconnecting', null, this);\n\n      this._mediaReconnectStartTime = Date.now();\n      this._status = Connection.State.Reconnecting;\n      this._mediaReconnectBackoff.reset();\n      this._mediaReconnectBackoff.backoff();\n\n      this.emit('reconnecting', mediaReconnectionError);\n    }\n  }\n\n  /**\n   * Called when media connection is restored\n   */\n  private _onMediaReconnected = (): void => {\n    // Only trigger once.\n    // This can trigger on pc.onIceConnectionChange and pc.onConnectionChange.\n    if (this._status !== Connection.State.Reconnecting) {\n      return;\n    }\n    this._log.info('ICE Connection reestablished.');\n    this._publisher.info('connection', 'reconnected', null, this);\n\n    this._status = Connection.State.Open;\n    this.emit('reconnected');\n  }\n\n  /**\n   * When we get a RINGING signal from PStream, update the {@link Connection} status.\n   * @param payload\n   */\n  private _onRinging = (payload: Record<string, any>): void => {\n    this._setCallSid(payload);\n\n    // If we're not in 'connecting' or 'ringing' state, this event was received out of order.\n    if (this._status !== Connection.State.Connecting && this._status !== Connection.State.Ringing) {\n      return;\n    }\n\n    const hasEarlyMedia = !!payload.sdp;\n    if (this.options.enableRingingState) {\n      this._status = Connection.State.Ringing;\n      this._publisher.info('connection', 'outgoing-ringing', { hasEarlyMedia }, this);\n      this.emit('ringing', hasEarlyMedia);\n    // answerOnBridge=false will send a 183, which we need to interpret as `answer` when\n    // the enableRingingState flag is disabled in order to maintain a non-breaking API from 1.4.24\n    } else if (hasEarlyMedia) {\n      this._onAnswer(payload);\n    }\n  }\n\n  /**\n   * Called each time StatsMonitor emits a sample.\n   * Emits stats event and batches the call stats metrics and sends them to Insights.\n   * @param sample\n   */\n  private _onRTCSample = (sample: RTCSample): void => {\n    const callMetrics: Connection.CallMetrics = {\n      ...sample,\n      inputVolume: this._latestInputVolume,\n      outputVolume: this._latestOutputVolume,\n    };\n\n    this._codec = callMetrics.codecName;\n\n    this._metricsSamples.push(callMetrics);\n    if (this._metricsSamples.length >= METRICS_BATCH_SIZE) {\n      this._publishMetrics();\n    }\n\n    this.emit('sample', sample);\n  }\n\n  /**\n   * Called when we receive a transportClose event from pstream.\n   * Re-emits the event.\n   */\n  private _onTransportClose = (): void => {\n    this._log.error('Received transportClose from pstream');\n    this.emit('transportClose');\n  }\n\n  /**\n   * Post an event to Endpoint Analytics indicating that the end user\n   *   has ignored a request for feedback.\n   */\n  private _postFeedbackDeclined(): Promise<void> {\n    return this._publisher.info('feedback', 'received-none', null, this, true);\n  }\n\n  /**\n   * Publish the current set of queued metrics samples to Insights.\n   */\n  private _publishMetrics(): void {\n    if (this._metricsSamples.length === 0) {\n      return;\n    }\n\n    this._publisher.postMetrics(\n      'quality-metrics-samples', 'metrics-sample', this._metricsSamples.splice(0), this._createMetricPayload(), this,\n    ).catch((e: any) => {\n      this._log.warn('Unable to post metrics to Insights. Received error:', e);\n    });\n  }\n\n  /**\n   * Re-emit an StatsMonitor warning as a {@link Connection}.warning or .warning-cleared event.\n   * @param warningData\n   * @param wasCleared - Whether this is a -cleared or -raised event.\n   */\n  private _reemitWarning = (warningData: Record<string, any>, wasCleared?: boolean): void => {\n    const groupPrefix = /^audio/.test(warningData.name) ?\n      'audio-level-' : 'network-quality-';\n\n    const warningPrefix = WARNING_PREFIXES[warningData.threshold.name];\n\n    /**\n     * NOTE: There are two \"packet-loss\" warnings: `high-packet-loss` and\n     * `high-packets-lost-fraction`, so in this case we need to use a different\n     * `WARNING_NAME` mapping.\n     */\n    let warningName: string | undefined;\n    if (warningData.name in MULTIPLE_THRESHOLD_WARNING_NAMES) {\n      warningName = MULTIPLE_THRESHOLD_WARNING_NAMES[warningData.name][warningData.threshold.name];\n    } else if (warningData.name in WARNING_NAMES) {\n      warningName = WARNING_NAMES[warningData.name];\n    }\n\n    const warning: string = warningPrefix + warningName;\n\n    this._emitWarning(groupPrefix, warning, warningData.threshold.value,\n                      warningData.values || warningData.value, wasCleared, warningData);\n  }\n\n  /**\n   * Re-emit an StatsMonitor warning-cleared as a .warning-cleared event.\n   * @param warningData\n   */\n  private _reemitWarningCleared = (warningData: Record<string, any>): void => {\n    this._reemitWarning(warningData, true);\n  }\n\n  /**\n   * Set the CallSid\n   * @param payload\n   */\n  private _setCallSid(payload: Record<string, string>): void {\n    const callSid = payload.callsid;\n    if (!callSid) { return; }\n\n    this.parameters.CallSid = callSid;\n    this.mediaStream.callSid = callSid;\n  }\n}\n\nnamespace Connection {\n  /**\n   * Emitted when the {@link Connection} is accepted.\n   * @param connection - The {@link Connection}.\n   * @example `connection.on('accept', connection => { })`\n   * @event\n   */\n  declare function acceptEvent(connection: Connection): void;\n\n  /**\n   * Emitted after the HTMLAudioElement for the remote audio is created.\n   * @param remoteAudio - The HTMLAudioElement.\n   * @example `connection.on('audio', handler(remoteAudio))`\n   * @event\n   */\n  declare function audioEvent(remoteAudio: HTMLAudioElement): void;\n\n  /**\n   * Emitted when the {@link Connection} is canceled.\n   * @example `connection.on('cancel', () => { })`\n   * @event\n   */\n  declare function cancelEvent(): void;\n\n  /**\n   * Emitted when the {@link Connection} is disconnected.\n   * @param connection - The {@link Connection}.\n   * @example `connection.on('disconnect', connection => { })`\n   * @event\n   */\n  declare function disconnectEvent(connection: Connection): void;\n\n  /**\n   * Emitted when the {@link Connection} receives an error.\n   * @param error\n   * @example `connection.on('error', error => { })`\n   * @event\n   */\n  declare function errorEvent(error: Connection.Error): void;\n\n  /**\n   * Emitted when the {@link Connection} is muted or unmuted.\n   * @param isMuted - Whether the {@link Connection} is muted.\n   * @param connection - The {@link Connection}.\n   * @example `connection.on('mute', (isMuted, connection) => { })`\n   * @event\n   */\n  declare function muteEvent(isMuted: boolean, connection: Connection): void;\n\n  /**\n   * Emitted when the {@link Connection} is rejected.\n   * @param connection - The {@link Connection}.\n   * @example `connection.on('reject', connection => { })`\n   * @event\n   */\n  declare function rejectEvent(connection: Connection): void;\n\n  /**\n   * Emitted every 50ms with the current input and output volumes, as a percentage of maximum\n   * volume, between -100dB and -30dB. Represented by a floating point number.\n   * @param inputVolume - A floating point number between 0.0 and 1.0 inclusive.\n   * @param outputVolume - A floating point number between 0.0 and 1.0 inclusive.\n   * @example `connection.on('volume', (inputVolume, outputVolume) => { })`\n   * @event\n   */\n  declare function volumeEvent(inputVolume: number, outputVolume: number): void;\n\n  /**\n   * Emitted when the {@link Connection} gets a webrtc sample object.\n   * This event is published every second.\n   * @param sample\n   * @example `connection.on('sample', sample => { })`\n   * @event\n   */\n  declare function sampleEvent(sample: RTCSample): void;\n\n  /**\n   * Possible states of the {@link Connection}.\n   */\n  export enum State {\n    Closed = 'closed',\n    Connecting = 'connecting',\n    Open = 'open',\n    Pending = 'pending',\n    Reconnecting = 'reconnecting',\n    Ringing = 'ringing',\n  }\n\n  /**\n   * Different issues that may have been experienced during a call, that can be\n   * reported to Twilio Insights via {@link Connection}.postFeedback().\n   */\n  export enum FeedbackIssue {\n    AudioLatency = 'audio-latency',\n    ChoppyAudio = 'choppy-audio',\n    DroppedCall = 'dropped-call',\n    Echo = 'echo',\n    NoisyCall = 'noisy-call',\n    OneWayAudio = 'one-way-audio',\n  }\n\n  /**\n   * A rating of call quality experienced during a call, to be reported to Twilio Insights\n   * via {@link Connection}.postFeedback().\n   */\n  export enum FeedbackScore {\n    One = 1,\n    Two,\n    Three,\n    Four,\n    Five,\n  }\n\n  /**\n   * The directionality of the {@link Connection}, whether incoming or outgoing.\n   */\n  export enum CallDirection {\n    Incoming = 'INCOMING',\n    Outgoing = 'OUTGOING',\n  }\n\n  /**\n   * Valid audio codecs to use for the media connection.\n   */\n  export enum Codec {\n    Opus = 'opus',\n    PCMU = 'pcmu',\n  }\n\n  /**\n   * Possible ICE Gathering failures\n   */\n  export enum IceGatheringFailureReason {\n    None = 'none',\n    Timeout = 'timeout',\n  }\n\n  /**\n   * Possible media failures\n   */\n  export enum MediaFailure {\n    ConnectionDisconnected = 'ConnectionDisconnected',\n    ConnectionFailed = 'ConnectionFailed',\n    IceGatheringFailed = 'IceGatheringFailed',\n    LowBytes = 'LowBytes',\n  }\n\n  /**\n   * The error format used by errors emitted from {@link Connection}.\n   */\n  export interface Error {\n    /**\n     * Error code\n     */\n    code: number;\n\n    /**\n     * Reference to the {@link Connection}\n     */\n    connection: Connection;\n\n    /**\n     * The info object from rtc/peerconnection. May contain code and message (duplicated here).\n     */\n    info: { code?: number, message?: string };\n\n    /**\n     * Error message\n     */\n    message: string;\n\n    /**\n     * Twilio Voice related error\n     */\n    twilioError?: TwilioError;\n  }\n\n  /**\n   * A CallerInfo provides caller verification information.\n   */\n  export interface CallerInfo {\n    /**\n     * Whether or not the caller's phone number has been verified by\n     * Twilio using SHAKEN/STIR validation. True if the caller has\n     * been validated at level 'A', false if the caller has been\n     * verified at any lower level or has failed validation.\n     */\n    isVerified: boolean;\n  }\n\n  /**\n   * Mandatory config options to be passed to the {@link Connection} constructor.\n   * @private\n   */\n  export interface Config {\n    /**\n     * An AudioHelper instance to be used for input/output devices.\n     */\n    audioHelper: IAudioHelper;\n\n    /**\n     * A method to use for getUserMedia.\n     */\n    getUserMedia: (constraints: MediaStreamConstraints) => Promise<MediaStream>;\n\n    /**\n     * Whether or not the browser uses unified-plan SDP by default.\n     */\n    isUnifiedPlanDefault: boolean;\n\n    /**\n     * The PStream instance to use for Twilio call signaling.\n     */\n    pstream: IPStream;\n\n    /**\n     * An EventPublisher instance to use for publishing events\n     */\n    publisher: IPublisher;\n\n    /**\n     * A Map of Sounds to play.\n     */\n    soundcache: Map<Device.SoundName, ISound>;\n  }\n\n  /**\n   * Options to be passed to the {@link Connection} constructor.\n   * @private\n   */\n  export interface Options {\n    /**\n     * Audio Constraints to pass to getUserMedia when making or accepting a Call.\n     * This is placed directly under `audio` of the MediaStreamConstraints object.\n     */\n    audioConstraints?: MediaTrackConstraints | boolean;\n\n    /**\n     * A method to call before Connection.accept is processed.\n     */\n    beforeAccept?: (connection: Connection) => void;\n\n    /**\n     * Custom format context parameters associated with this call.\n     */\n    callParameters?: Record<string, string>;\n\n    /**\n     * An ordered array of codec names, from most to least preferred.\n     */\n    codecPreferences?: Codec[];\n\n    /**\n     * A DialTone player, to play mock DTMF sounds.\n     */\n    dialtonePlayer?: DialtonePlayer;\n\n    /**\n     * Whether or not to enable DSCP.\n     */\n    dscp?: boolean;\n\n    /**\n     * Whether to automatically restart ICE when media connection fails\n     */\n    enableIceRestart?: boolean;\n\n    /**\n     * Whether the ringing state should be enabled.\n     */\n    enableRingingState?: boolean;\n\n    /**\n     * Experimental feature.\n     * Force Chrome's ICE agent to use aggressive nomination when selecting a candidate pair.\n     */\n    forceAggressiveIceNomination?: boolean;\n\n    /**\n     * The gateway currently connected to.\n     */\n    gateway?: string;\n\n    /**\n     * A method that returns the current input MediaStream set on {@link Device}.\n     */\n    getInputStream?: () => MediaStream;\n\n    /**\n     * A method that returns the current SinkIDs set on {@link Device}.\n     */\n    getSinkIds?: () => string[];\n\n    /**\n     * The maximum average audio bitrate to use, in bits per second (bps) based on\n     * [RFC-7587 7.1](https://tools.ietf.org/html/rfc7587#section-7.1). By default, the setting\n     * is not used. If you specify 0, then the setting is not used. Any positive integer is allowed,\n     * but values outside the range 6000 to 510000 are ignored and treated as 0. The recommended\n     * bitrate for speech is between 8000 and 40000 bps as noted in\n     * [RFC-7587 3.1.1](https://tools.ietf.org/html/rfc7587#section-3.1.1).\n     */\n    maxAverageBitrate?: number;\n\n    /**\n     * Custom MediaStream (PeerConnection) constructor. Overrides mediaStreamFactory (deprecated).\n     */\n    MediaStream?: IPeerConnection;\n\n    /**\n     * Custom MediaStream (PeerConnection) constructor (deprecated)\n     */\n    mediaStreamFactory?: IPeerConnection;\n\n    /**\n     * The offer SDP, if this is an incoming call.\n     */\n    offerSdp?: string | null;\n\n    /**\n     * Whether this is a preflight call or not\n     */\n    preflight?: boolean;\n\n    /**\n     * The Region currently connected to.\n     */\n    region?: string;\n\n    /**\n     * An RTCConfiguration to pass to the RTCPeerConnection constructor.\n     */\n    rtcConfiguration?: RTCConfiguration;\n\n    /**\n     * RTC Constraints to pass to getUserMedia when making or accepting a Call.\n     * The format of this object depends on browser.\n     */\n    rtcConstraints?: MediaStreamConstraints;\n\n    /**\n     * The RTCPeerConnection passed to {@link Device} on setup.\n     */\n    RTCPeerConnection?: any;\n\n    /**\n     * The region passed to {@link Device} on setup.\n     */\n    selectedRegion?: string;\n\n    /**\n     * Whether the disconnect sound should be played.\n     */\n    shouldPlayDisconnect?: () => boolean;\n\n    /**\n     * An override for the StatsMonitor dependency.\n     */\n    StatsMonitor?: new () => StatsMonitor;\n\n    /**\n     * TwiML params for the call. May be set for either outgoing or incoming calls.\n     */\n    twimlParams?: Record<string, any>;\n  }\n\n  /**\n   * Call metrics published to Insight Metrics.\n   * This include rtc samples and audio information.\n   * @private\n   */\n  export interface CallMetrics extends RTCSample {\n    /**\n     * Percentage of maximum volume, between 0.0 to 1.0, representing -100 to -30 dB.\n     */\n    inputVolume: number;\n\n    /**\n     * Percentage of maximum volume, between 0.0 to 1.0, representing -100 to -30 dB.\n     */\n    outputVolume: number;\n  }\n}\n\nfunction generateTempCallSid() {\n  return 'TJSxxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    /* tslint:disable:no-bitwise */\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    /* tslint:enable:no-bitwise */\n    return v.toString(16);\n  });\n}\n\nexport default Connection;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}