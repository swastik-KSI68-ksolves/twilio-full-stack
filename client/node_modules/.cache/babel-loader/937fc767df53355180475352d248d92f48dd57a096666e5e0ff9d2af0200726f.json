{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @internalapi\n */\n/* tslint:disable max-classes-per-file */\nvar generated_1 = require(\"./generated\");\nexports.AuthorizationErrors = generated_1.AuthorizationErrors;\nexports.ClientErrors = generated_1.ClientErrors;\nexports.GeneralErrors = generated_1.GeneralErrors;\nexports.MediaErrors = generated_1.MediaErrors;\nexports.SignalingErrors = generated_1.SignalingErrors;\n// Application errors that can be avoided by good app logic\nvar InvalidArgumentError = /** @class */function (_super) {\n  __extends(InvalidArgumentError, _super);\n  function InvalidArgumentError(message) {\n    var _this = _super.call(this, message) || this;\n    _this.name = 'InvalidArgumentError';\n    return _this;\n  }\n  return InvalidArgumentError;\n}(Error);\nexports.InvalidArgumentError = InvalidArgumentError;\nvar InvalidStateError = /** @class */function (_super) {\n  __extends(InvalidStateError, _super);\n  function InvalidStateError(message) {\n    var _this = _super.call(this, message) || this;\n    _this.name = 'InvalidStateError';\n    return _this;\n  }\n  return InvalidStateError;\n}(Error);\nexports.InvalidStateError = InvalidStateError;\nvar NotSupportedError = /** @class */function (_super) {\n  __extends(NotSupportedError, _super);\n  function NotSupportedError(message) {\n    var _this = _super.call(this, message) || this;\n    _this.name = 'NotSupportedError';\n    return _this;\n  }\n  return NotSupportedError;\n}(Error);\nexports.NotSupportedError = NotSupportedError;\n// This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\nfunction getErrorByCode(code) {\n  var error = generated_1.errorsByCode.get(code);\n  if (!error) {\n    throw new InvalidArgumentError(\"Error code \" + code + \" not found\");\n  }\n  return error;\n}\nexports.getErrorByCode = getErrorByCode;","map":{"version":3,"names":["generated_1","require","exports","AuthorizationErrors","ClientErrors","GeneralErrors","MediaErrors","SignalingErrors","InvalidArgumentError","_super","__extends","message","_this","call","name","Error","InvalidStateError","NotSupportedError","getErrorByCode","code","error","errorsByCode","get"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/twilio-client/lib/twilio/errors/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @internalapi\n */\n/* tslint:disable max-classes-per-file */\nimport {\n  AuthorizationErrors,\n  ClientErrors,\n  errorsByCode,\n  GeneralErrors,\n  MediaErrors,\n  SignalingErrors,\n  TwilioError,\n} from './generated';\n\n// Application errors that can be avoided by good app logic\nexport class InvalidArgumentError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'InvalidArgumentError';\n  }\n}\nexport class InvalidStateError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'InvalidStateError';\n  }\n}\nexport class NotSupportedError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'NotSupportedError';\n  }\n}\n\n// This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\nexport function getErrorByCode(code: number): TwilioError {\n  const error: TwilioError | undefined = errorsByCode.get(code);\n  if (!error) {\n    throw new InvalidArgumentError(`Error code ${code} not found`);\n  }\n  return error;\n}\n\n// All errors we want to throw or emit locally in the SDK need to be passed through here.\nexport {\n  AuthorizationErrors,\n  ClientErrors,\n  GeneralErrors,\n  MediaErrors,\n  SignalingErrors,\n  TwilioError,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA;AACA,IAAAA,WAAA,GAAAC,OAAA;AA0CEC,OAAA,CAAAC,mBAAA,GAzCAH,WAAA,CAAAG,mBAAmB;AA0CnBD,OAAA,CAAAE,YAAA,GAzCAJ,WAAA,CAAAI,YAAY;AA0CZF,OAAA,CAAAG,aAAA,GAxCAL,WAAA,CAAAK,aAAa;AAyCbH,OAAA,CAAAI,WAAA,GAxCAN,WAAA,CAAAM,WAAW;AAyCXJ,OAAA,CAAAK,eAAA,GAxCAP,WAAA,CAAAO,eAAe;AAIjB;AACA,IAAAC,oBAAA,0BAAAC,MAAA;EAA0CC,SAAA,CAAAF,oBAAA,EAAAC,MAAA;EACxC,SAAAD,qBAAYG,OAAgB;IAA5B,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAMF,OAAO,CAAC;IACdC,KAAI,CAACE,IAAI,GAAG,sBAAsB;;EACpC;EACF,OAAAN,oBAAC;AAAD,CAAC,CALyCO,KAAK;AAAlCb,OAAA,CAAAM,oBAAA,GAAAA,oBAAA;AAMb,IAAAQ,iBAAA,0BAAAP,MAAA;EAAuCC,SAAA,CAAAM,iBAAA,EAAAP,MAAA;EACrC,SAAAO,kBAAYL,OAAgB;IAA5B,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAMF,OAAO,CAAC;IACdC,KAAI,CAACE,IAAI,GAAG,mBAAmB;;EACjC;EACF,OAAAE,iBAAC;AAAD,CAAC,CALsCD,KAAK;AAA/Bb,OAAA,CAAAc,iBAAA,GAAAA,iBAAA;AAMb,IAAAC,iBAAA,0BAAAR,MAAA;EAAuCC,SAAA,CAAAO,iBAAA,EAAAR,MAAA;EACrC,SAAAQ,kBAAYN,OAAgB;IAA5B,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAMF,OAAO,CAAC;IACdC,KAAI,CAACE,IAAI,GAAG,mBAAmB;;EACjC;EACF,OAAAG,iBAAC;AAAD,CAAC,CALsCF,KAAK;AAA/Bb,OAAA,CAAAe,iBAAA,GAAAA,iBAAA;AAOb;AACA;AACA,SAAgBC,cAAcA,CAACC,IAAY;EACzC,IAAMC,KAAK,GAA4BpB,WAAA,CAAAqB,YAAY,CAACC,GAAG,CAACH,IAAI,CAAC;EAC7D,IAAI,CAACC,KAAK,EAAE;IACV,MAAM,IAAIZ,oBAAoB,CAAC,gBAAcW,IAAI,eAAY,CAAC;;EAEhE,OAAOC,KAAK;AACd;AANAlB,OAAA,CAAAgB,cAAA,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}