{"ast":null,"code":"'use strict';\n\nvar rfactorConstants = {\n  r0: 94.768,\n  is: 1.42611\n};\n\n/**\n * Calculate the mos score of a stats object\n * @param {number} rtt\n * @param {number} jitter\n * @param {number} fractionLost - The fraction of packets that have been lost\n     Calculated by packetsLost / totalPackets\n * @return {number} mos - Calculated MOS, 1.0 through roughly 4.5\n */\nfunction calcMos(rtt, jitter, fractionLost) {\n  if (!isPositiveNumber(rtt) || !isPositiveNumber(jitter) || !isPositiveNumber(fractionLost)) {\n    return null;\n  }\n  var rFactor = calculateRFactor(rtt, jitter, fractionLost);\n  var mos = 1 + 0.035 * rFactor + 0.000007 * rFactor * (rFactor - 60) * (100 - rFactor);\n\n  // Make sure MOS is in range\n  var isValid = mos >= 1.0 && mos < 4.6;\n  return isValid ? mos : null;\n}\nfunction calculateRFactor(rtt, jitter, fractionLost) {\n  var effectiveLatency = rtt + jitter * 2 + 10;\n  var rFactor = 0;\n  switch (true) {\n    case effectiveLatency < 160:\n      rFactor = rfactorConstants.r0 - effectiveLatency / 40;\n      break;\n    case effectiveLatency < 1000:\n      rFactor = rfactorConstants.r0 - (effectiveLatency - 120) / 10;\n      break;\n    case effectiveLatency >= 1000:\n      rFactor = rfactorConstants.r0 - effectiveLatency / 100;\n      break;\n  }\n  var multiplier = .01;\n  switch (true) {\n    case fractionLost === -1:\n      multiplier = 0;\n      rFactor = 0;\n      break;\n    case fractionLost <= rFactor / 2.5:\n      multiplier = 2.5;\n      break;\n    case fractionLost > rFactor / 2.5 && fractionLost < 100:\n      multiplier = .25;\n      break;\n  }\n  rFactor -= fractionLost * multiplier;\n  return rFactor;\n}\nfunction isPositiveNumber(n) {\n  return typeof n === 'number' && !isNaN(n) && isFinite(n) && n >= 0;\n}\nmodule.exports = {\n  calculate: calcMos\n};","map":{"version":3,"names":["rfactorConstants","r0","is","calcMos","rtt","jitter","fractionLost","isPositiveNumber","rFactor","calculateRFactor","mos","isValid","effectiveLatency","multiplier","n","isNaN","isFinite","module","exports","calculate"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/twilio-client/es5/twilio/rtc/mos.js"],"sourcesContent":["'use strict';\n\nvar rfactorConstants = {\n  r0: 94.768,\n  is: 1.42611\n};\n\n/**\n * Calculate the mos score of a stats object\n * @param {number} rtt\n * @param {number} jitter\n * @param {number} fractionLost - The fraction of packets that have been lost\n     Calculated by packetsLost / totalPackets\n * @return {number} mos - Calculated MOS, 1.0 through roughly 4.5\n */\nfunction calcMos(rtt, jitter, fractionLost) {\n  if (!isPositiveNumber(rtt) || !isPositiveNumber(jitter) || !isPositiveNumber(fractionLost)) {\n    return null;\n  }\n\n  var rFactor = calculateRFactor(rtt, jitter, fractionLost);\n\n  var mos = 1 + 0.035 * rFactor + 0.000007 * rFactor * (rFactor - 60) * (100 - rFactor);\n\n  // Make sure MOS is in range\n  var isValid = mos >= 1.0 && mos < 4.6;\n  return isValid ? mos : null;\n}\n\nfunction calculateRFactor(rtt, jitter, fractionLost) {\n  var effectiveLatency = rtt + jitter * 2 + 10;\n  var rFactor = 0;\n\n  switch (true) {\n    case effectiveLatency < 160:\n      rFactor = rfactorConstants.r0 - effectiveLatency / 40;\n      break;\n    case effectiveLatency < 1000:\n      rFactor = rfactorConstants.r0 - (effectiveLatency - 120) / 10;\n      break;\n    case effectiveLatency >= 1000:\n      rFactor = rfactorConstants.r0 - effectiveLatency / 100;\n      break;\n  }\n\n  var multiplier = .01;\n  switch (true) {\n    case fractionLost === -1:\n      multiplier = 0;\n      rFactor = 0;\n      break;\n    case fractionLost <= rFactor / 2.5:\n      multiplier = 2.5;\n      break;\n    case fractionLost > rFactor / 2.5 && fractionLost < 100:\n      multiplier = .25;\n      break;\n  }\n\n  rFactor -= fractionLost * multiplier;\n  return rFactor;\n}\n\nfunction isPositiveNumber(n) {\n  return typeof n === 'number' && !isNaN(n) && isFinite(n) && n >= 0;\n}\n\nmodule.exports = {\n  calculate: calcMos\n};"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,gBAAgB,GAAG;EACrBC,EAAE,EAAE,MAAM;EACVC,EAAE,EAAE;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,GAAG,EAAEC,MAAM,EAAEC,YAAY,EAAE;EAC1C,IAAI,CAACC,gBAAgB,CAACH,GAAG,CAAC,IAAI,CAACG,gBAAgB,CAACF,MAAM,CAAC,IAAI,CAACE,gBAAgB,CAACD,YAAY,CAAC,EAAE;IAC1F,OAAO,IAAI;EACb;EAEA,IAAIE,OAAO,GAAGC,gBAAgB,CAACL,GAAG,EAAEC,MAAM,EAAEC,YAAY,CAAC;EAEzD,IAAII,GAAG,GAAG,CAAC,GAAG,KAAK,GAAGF,OAAO,GAAG,QAAQ,GAAGA,OAAO,IAAIA,OAAO,GAAG,EAAE,CAAC,IAAI,GAAG,GAAGA,OAAO,CAAC;;EAErF;EACA,IAAIG,OAAO,GAAGD,GAAG,IAAI,GAAG,IAAIA,GAAG,GAAG,GAAG;EACrC,OAAOC,OAAO,GAAGD,GAAG,GAAG,IAAI;AAC7B;AAEA,SAASD,gBAAgBA,CAACL,GAAG,EAAEC,MAAM,EAAEC,YAAY,EAAE;EACnD,IAAIM,gBAAgB,GAAGR,GAAG,GAAGC,MAAM,GAAG,CAAC,GAAG,EAAE;EAC5C,IAAIG,OAAO,GAAG,CAAC;EAEf,QAAQ,IAAI;IACV,KAAKI,gBAAgB,GAAG,GAAG;MACzBJ,OAAO,GAAGR,gBAAgB,CAACC,EAAE,GAAGW,gBAAgB,GAAG,EAAE;MACrD;IACF,KAAKA,gBAAgB,GAAG,IAAI;MAC1BJ,OAAO,GAAGR,gBAAgB,CAACC,EAAE,GAAG,CAACW,gBAAgB,GAAG,GAAG,IAAI,EAAE;MAC7D;IACF,KAAKA,gBAAgB,IAAI,IAAI;MAC3BJ,OAAO,GAAGR,gBAAgB,CAACC,EAAE,GAAGW,gBAAgB,GAAG,GAAG;MACtD;EACJ;EAEA,IAAIC,UAAU,GAAG,GAAG;EACpB,QAAQ,IAAI;IACV,KAAKP,YAAY,KAAK,CAAC,CAAC;MACtBO,UAAU,GAAG,CAAC;MACdL,OAAO,GAAG,CAAC;MACX;IACF,KAAKF,YAAY,IAAIE,OAAO,GAAG,GAAG;MAChCK,UAAU,GAAG,GAAG;MAChB;IACF,KAAKP,YAAY,GAAGE,OAAO,GAAG,GAAG,IAAIF,YAAY,GAAG,GAAG;MACrDO,UAAU,GAAG,GAAG;MAChB;EACJ;EAEAL,OAAO,IAAIF,YAAY,GAAGO,UAAU;EACpC,OAAOL,OAAO;AAChB;AAEA,SAASD,gBAAgBA,CAACO,CAAC,EAAE;EAC3B,OAAO,OAAOA,CAAC,KAAK,QAAQ,IAAI,CAACC,KAAK,CAACD,CAAC,CAAC,IAAIE,QAAQ,CAACF,CAAC,CAAC,IAAIA,CAAC,IAAI,CAAC;AACpE;AAEAG,MAAM,CAACC,OAAO,GAAG;EACfC,SAAS,EAAEhB;AACb,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}