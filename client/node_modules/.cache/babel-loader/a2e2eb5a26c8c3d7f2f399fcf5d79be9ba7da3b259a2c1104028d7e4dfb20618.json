{"ast":null,"code":"\"use strict\";\n\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @module Voice\n * This module describes valid and deprecated regions.\n */\nvar errors_1 = require(\"./errors\");\n/**\n * Valid deprecated regions.\n * @private\n */\nvar DeprecatedRegion;\n(function (DeprecatedRegion) {\n  DeprecatedRegion[\"Au\"] = \"au\";\n  DeprecatedRegion[\"Br\"] = \"br\";\n  DeprecatedRegion[\"Ie\"] = \"ie\";\n  DeprecatedRegion[\"Jp\"] = \"jp\";\n  DeprecatedRegion[\"Sg\"] = \"sg\";\n  DeprecatedRegion[\"UsOr\"] = \"us-or\";\n  DeprecatedRegion[\"UsVa\"] = \"us-va\";\n})(DeprecatedRegion = exports.DeprecatedRegion || (exports.DeprecatedRegion = {}));\n/**\n * Valid edges.\n * @private\n */\nvar Edge;\n(function (Edge) {\n  /**\n   * Public edges\n   */\n  Edge[\"Sydney\"] = \"sydney\";\n  Edge[\"SaoPaulo\"] = \"sao-paulo\";\n  Edge[\"Dublin\"] = \"dublin\";\n  Edge[\"Frankfurt\"] = \"frankfurt\";\n  Edge[\"Tokyo\"] = \"tokyo\";\n  Edge[\"Singapore\"] = \"singapore\";\n  Edge[\"Ashburn\"] = \"ashburn\";\n  Edge[\"Umatilla\"] = \"umatilla\";\n  Edge[\"Roaming\"] = \"roaming\";\n  /**\n   * Interconnect edges\n   */\n  Edge[\"AshburnIx\"] = \"ashburn-ix\";\n  Edge[\"SanJoseIx\"] = \"san-jose-ix\";\n  Edge[\"LondonIx\"] = \"london-ix\";\n  Edge[\"FrankfurtIx\"] = \"frankfurt-ix\";\n  Edge[\"SingaporeIx\"] = \"singapore-ix\";\n  Edge[\"SydneyIx\"] = \"sydney-ix\";\n  Edge[\"TokyoIx\"] = \"tokyo-ix\";\n})(Edge = exports.Edge || (exports.Edge = {}));\n/**\n * Valid current regions.\n *\n * @deprecated\n *\n * CLIENT-6831\n * This is no longer used or updated for checking validity of regions in the\n * SDK. We now allow any string to be passed for region. Invalid regions won't\n * be able to connect, and won't throw an exception.\n *\n * CLIENT-7519\n * This is used again to temporarily convert edge values to regions as part of\n * Phase 1 Regional. This is still considered deprecated.\n *\n * @private\n */\nvar Region;\n(function (Region) {\n  Region[\"Au1\"] = \"au1\";\n  Region[\"Au1Ix\"] = \"au1-ix\";\n  Region[\"Br1\"] = \"br1\";\n  Region[\"De1\"] = \"de1\";\n  Region[\"De1Ix\"] = \"de1-ix\";\n  Region[\"Gll\"] = \"gll\";\n  Region[\"Ie1\"] = \"ie1\";\n  Region[\"Ie1Ix\"] = \"ie1-ix\";\n  Region[\"Ie1Tnx\"] = \"ie1-tnx\";\n  Region[\"Jp1\"] = \"jp1\";\n  Region[\"Jp1Ix\"] = \"jp1-ix\";\n  Region[\"Sg1\"] = \"sg1\";\n  Region[\"Sg1Ix\"] = \"sg1-ix\";\n  Region[\"Sg1Tnx\"] = \"sg1-tnx\";\n  Region[\"Us1\"] = \"us1\";\n  Region[\"Us1Ix\"] = \"us1-ix\";\n  Region[\"Us1Tnx\"] = \"us1-tnx\";\n  Region[\"Us2\"] = \"us2\";\n  Region[\"Us2Ix\"] = \"us2-ix\";\n  Region[\"Us2Tnx\"] = \"us2-tnx\";\n})(Region = exports.Region || (exports.Region = {}));\n/**\n * Deprecated regions. Maps the deprecated region to its equivalent up-to-date region.\n * @private\n */\nexports.deprecatedRegions = (_a = {}, _a[DeprecatedRegion.Au] = Region.Au1, _a[DeprecatedRegion.Br] = Region.Br1, _a[DeprecatedRegion.Ie] = Region.Ie1, _a[DeprecatedRegion.Jp] = Region.Jp1, _a[DeprecatedRegion.Sg] = Region.Sg1, _a[DeprecatedRegion.UsOr] = Region.Us1, _a[DeprecatedRegion.UsVa] = Region.Us1, _a);\n/**\n * Region shortcodes. Maps the full region name from AWS to the Twilio shortcode.\n * @private\n */\nexports.regionShortcodes = {\n  ASIAPAC_SINGAPORE: Region.Sg1,\n  ASIAPAC_SYDNEY: Region.Au1,\n  ASIAPAC_TOKYO: Region.Jp1,\n  EU_FRANKFURT: Region.De1,\n  EU_IRELAND: Region.Ie1,\n  SOUTH_AMERICA_SAO_PAULO: Region.Br1,\n  US_EAST_VIRGINIA: Region.Us1,\n  US_WEST_OREGON: Region.Us2\n};\n/**\n * Region URIs. Maps the Twilio shortcode to its Twilio endpoint URI.\n * @private\n */\nvar regionURIs = (_b = {}, _b[Region.Au1] = 'chunderw-vpc-gll-au1.twilio.com', _b[Region.Au1Ix] = 'chunderw-vpc-gll-au1-ix.twilio.com', _b[Region.Br1] = 'chunderw-vpc-gll-br1.twilio.com', _b[Region.De1] = 'chunderw-vpc-gll-de1.twilio.com', _b[Region.De1Ix] = 'chunderw-vpc-gll-de1-ix.twilio.com', _b[Region.Gll] = 'chunderw-vpc-gll.twilio.com', _b[Region.Ie1] = 'chunderw-vpc-gll-ie1.twilio.com', _b[Region.Ie1Ix] = 'chunderw-vpc-gll-ie1-ix.twilio.com', _b[Region.Ie1Tnx] = 'chunderw-vpc-gll-ie1-tnx.twilio.com', _b[Region.Jp1] = 'chunderw-vpc-gll-jp1.twilio.com', _b[Region.Jp1Ix] = 'chunderw-vpc-gll-jp1-ix.twilio.com', _b[Region.Sg1] = 'chunderw-vpc-gll-sg1.twilio.com', _b[Region.Sg1Ix] = 'chunderw-vpc-gll-sg1-ix.twilio.com', _b[Region.Sg1Tnx] = 'chunderw-vpc-gll-sg1-tnx.twilio.com', _b[Region.Us1] = 'chunderw-vpc-gll-us1.twilio.com', _b[Region.Us1Ix] = 'chunderw-vpc-gll-us1-ix.twilio.com', _b[Region.Us1Tnx] = 'chunderw-vpc-gll-us1-tnx.twilio.com', _b[Region.Us2] = 'chunderw-vpc-gll-us2.twilio.com', _b[Region.Us2Ix] = 'chunderw-vpc-gll-us2-ix.twilio.com', _b[Region.Us2Tnx] = 'chunderw-vpc-gll-us2-tnx.twilio.com', _b);\n/**\n * Edge to region mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexports.edgeToRegion = (_c = {}, _c[Edge.Sydney] = Region.Au1, _c[Edge.SaoPaulo] = Region.Br1, _c[Edge.Dublin] = Region.Ie1, _c[Edge.Frankfurt] = Region.De1, _c[Edge.Tokyo] = Region.Jp1, _c[Edge.Singapore] = Region.Sg1, _c[Edge.Ashburn] = Region.Us1, _c[Edge.Umatilla] = Region.Us2, _c[Edge.Roaming] = Region.Gll,\n/**\n * Interconnect edges\n */\n_c[Edge.AshburnIx] = Region.Us1Ix, _c[Edge.SanJoseIx] = Region.Us2Ix, _c[Edge.LondonIx] = Region.Ie1Ix, _c[Edge.FrankfurtIx] = Region.De1Ix, _c[Edge.SingaporeIx] = Region.Sg1Ix, _c[Edge.SydneyIx] = Region.Au1Ix, _c[Edge.TokyoIx] = Region.Jp1Ix, _c);\n/**\n * Region to edge mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexports.regionToEdge = (_d = {}, _d[Region.Au1] = Edge.Sydney, _d[Region.Br1] = Edge.SaoPaulo, _d[Region.Ie1] = Edge.Dublin, _d[Region.De1] = Edge.Frankfurt, _d[Region.Jp1] = Edge.Tokyo, _d[Region.Sg1] = Edge.Singapore, _d[Region.Us1] = Edge.Ashburn, _d[Region.Us2] = Edge.Umatilla, _d[Region.Gll] = Edge.Roaming,\n/**\n * Interconnect edges\n */\n_d[Region.Us1Ix] = Edge.AshburnIx, _d[Region.Us2Ix] = Edge.SanJoseIx, _d[Region.Ie1Ix] = Edge.LondonIx, _d[Region.De1Ix] = Edge.FrankfurtIx, _d[Region.Sg1Ix] = Edge.SingaporeIx, _d[Region.Au1Ix] = Edge.SydneyIx, _d[Region.Jp1Ix] = Edge.TokyoIx,\n/**\n * Tnx regions\n */\n_d[Region.Us1Tnx] = Edge.AshburnIx, _d[Region.Us2Tnx] = Edge.AshburnIx, _d[Region.Ie1Tnx] = Edge.LondonIx, _d[Region.Sg1Tnx] = Edge.SingaporeIx, _d);\n/**\n * The default region to connect to and create a chunder uri from if region is\n * not defined.\n * @constant\n * @private\n */\nexports.defaultRegion = 'gll';\n/**\n * The default edge to connect to and create a chunder uri from, if the edge\n * parameter is not specified during setup in `Device`.\n * @constant\n */\nexports.defaultEdge = Edge.Roaming;\n/**\n * The default chunder URI to connect to, should map to region `gll`.\n * @constant\n * @private\n */\nexports.defaultChunderRegionURI = 'chunderw-vpc-gll.twilio.com';\n/**\n * String template for a region chunder URI\n * @param region - The region.\n */\nfunction createChunderRegionUri(region) {\n  return region === exports.defaultRegion ? exports.defaultChunderRegionURI : \"chunderw-vpc-gll-\" + region + \".twilio.com\";\n}\n/**\n * String template for an edge chunder URI\n * @param edge - The edge.\n */\nfunction createChunderEdgeUri(edge) {\n  return \"voice-js.\" + edge + \".twilio.com\";\n}\n/**\n * Get the URI associated with the passed region or edge. If both are passed,\n * then we want to fail `Device` setup, so we throw an error.\n * As of CLIENT-7519, Regions are deprecated in favor of edges as part of\n * Phase 1 Regional.\n *\n * @private\n * @param edge - A string or an array of edge values\n * @param region - The region shortcode.\n * @param [onDeprecated] - A callback containing the deprecation message to be\n *   warned when the passed parameters are deprecated.\n * @returns An array of chunder URIs\n */\nfunction getChunderURIs(edge, region, onDeprecated) {\n  if (!!region && typeof region !== 'string') {\n    throw new errors_1.InvalidArgumentError('If `region` is provided, it must be of type `string`.');\n  }\n  if (!!edge && typeof edge !== 'string' && !Array.isArray(edge)) {\n    throw new errors_1.InvalidArgumentError('If `edge` is provided, it must be of type `string` or an array of strings.');\n  }\n  var deprecatedMessages = [];\n  var uris;\n  if (region && edge) {\n    throw new errors_1.InvalidArgumentError('You cannot specify `region` when `edge` is specified in' + '`Twilio.Device.Options`.');\n  } else if (region) {\n    var chunderRegion = region;\n    deprecatedMessages.push('Regions are deprecated in favor of edges. Please see this page for ' + 'documentation: https://www.twilio.com/docs/voice/client/edges.');\n    var isDeprecatedRegion = Object.values(DeprecatedRegion).includes(chunderRegion);\n    if (isDeprecatedRegion) {\n      chunderRegion = exports.deprecatedRegions[chunderRegion];\n    }\n    var isKnownRegion = Object.values(Region).includes(chunderRegion);\n    if (isKnownRegion) {\n      var preferredEdge = exports.regionToEdge[chunderRegion];\n      deprecatedMessages.push(\"Region \\\"\" + chunderRegion + \"\\\" is deprecated, please use `edge` \" + (\"\\\"\" + preferredEdge + \"\\\".\"));\n    }\n    uris = [createChunderRegionUri(chunderRegion)];\n  } else if (edge) {\n    var edgeValues_1 = Object.values(Edge);\n    var edgeParams = Array.isArray(edge) ? edge : [edge];\n    uris = edgeParams.map(function (param) {\n      return edgeValues_1.includes(param) ? createChunderRegionUri(exports.edgeToRegion[param]) : createChunderEdgeUri(param);\n    });\n  } else {\n    uris = [exports.defaultChunderRegionURI];\n  }\n  if (onDeprecated && deprecatedMessages.length) {\n    setTimeout(function () {\n      return onDeprecated(deprecatedMessages.join('\\n'));\n    });\n  }\n  return uris;\n}\nexports.getChunderURIs = getChunderURIs;\n/**\n * Get the region shortcode by its full AWS region string.\n *\n * @private\n * @param region - The region's full AWS string.\n */\nfunction getRegionShortcode(region) {\n  return exports.regionShortcodes[region] || null;\n}\nexports.getRegionShortcode = getRegionShortcode;","map":{"version":3,"names":["errors_1","require","DeprecatedRegion","exports","Edge","Region","deprecatedRegions","_a","Au","Au1","Br","Br1","Ie","Ie1","Jp","Jp1","Sg","Sg1","UsOr","Us1","UsVa","regionShortcodes","ASIAPAC_SINGAPORE","ASIAPAC_SYDNEY","ASIAPAC_TOKYO","EU_FRANKFURT","De1","EU_IRELAND","SOUTH_AMERICA_SAO_PAULO","US_EAST_VIRGINIA","US_WEST_OREGON","Us2","regionURIs","_b","Au1Ix","De1Ix","Gll","Ie1Ix","Ie1Tnx","Jp1Ix","Sg1Ix","Sg1Tnx","Us1Ix","Us1Tnx","Us2Ix","Us2Tnx","edgeToRegion","_c","Sydney","SaoPaulo","Dublin","Frankfurt","Tokyo","Singapore","Ashburn","Umatilla","Roaming","AshburnIx","SanJoseIx","LondonIx","FrankfurtIx","SingaporeIx","SydneyIx","TokyoIx","regionToEdge","_d","defaultRegion","defaultEdge","defaultChunderRegionURI","createChunderRegionUri","region","createChunderEdgeUri","edge","getChunderURIs","onDeprecated","InvalidArgumentError","Array","isArray","deprecatedMessages","uris","chunderRegion","push","isDeprecatedRegion","Object","values","includes","isKnownRegion","preferredEdge","edgeValues_1","edgeParams","map","param","length","setTimeout","join","getRegionShortcode"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/twilio-client/lib/twilio/regions.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * This module describes valid and deprecated regions.\n */\nimport { InvalidArgumentError } from './errors';\n\n/**\n * Valid deprecated regions.\n * @private\n */\nexport enum DeprecatedRegion {\n  Au = 'au',\n  Br = 'br',\n  Ie = 'ie',\n  Jp = 'jp',\n  Sg = 'sg',\n  UsOr = 'us-or',\n  UsVa = 'us-va',\n}\n\n/**\n * Valid edges.\n * @private\n */\nexport enum Edge {\n  /**\n   * Public edges\n   */\n  Sydney = 'sydney',\n  SaoPaulo = 'sao-paulo',\n  Dublin = 'dublin',\n  Frankfurt = 'frankfurt',\n  Tokyo = 'tokyo',\n  Singapore = 'singapore',\n  Ashburn = 'ashburn',\n  Umatilla = 'umatilla',\n  Roaming = 'roaming',\n  /**\n   * Interconnect edges\n   */\n  AshburnIx = 'ashburn-ix',\n  SanJoseIx = 'san-jose-ix',\n  LondonIx = 'london-ix',\n  FrankfurtIx = 'frankfurt-ix',\n  SingaporeIx = 'singapore-ix',\n  SydneyIx = 'sydney-ix',\n  TokyoIx = 'tokyo-ix',\n}\n\n/**\n * Valid current regions.\n *\n * @deprecated\n *\n * CLIENT-6831\n * This is no longer used or updated for checking validity of regions in the\n * SDK. We now allow any string to be passed for region. Invalid regions won't\n * be able to connect, and won't throw an exception.\n *\n * CLIENT-7519\n * This is used again to temporarily convert edge values to regions as part of\n * Phase 1 Regional. This is still considered deprecated.\n *\n * @private\n */\nexport enum Region {\n  Au1 = 'au1',\n  Au1Ix = 'au1-ix',\n  Br1 = 'br1',\n  De1 = 'de1',\n  De1Ix = 'de1-ix',\n  Gll = 'gll',\n  Ie1 = 'ie1',\n  Ie1Ix = 'ie1-ix',\n  Ie1Tnx = 'ie1-tnx',\n  Jp1 = 'jp1',\n  Jp1Ix = 'jp1-ix',\n  Sg1 = 'sg1',\n  Sg1Ix = 'sg1-ix',\n  Sg1Tnx = 'sg1-tnx',\n  Us1 = 'us1',\n  Us1Ix = 'us1-ix',\n  Us1Tnx = 'us1-tnx',\n  Us2 = 'us2',\n  Us2Ix = 'us2-ix',\n  Us2Tnx = 'us2-tnx',\n}\n\n/**\n * All valid regions\n * @private\n */\nexport type ValidRegion = Region | DeprecatedRegion;\n\n/**\n * Deprecated regions. Maps the deprecated region to its equivalent up-to-date region.\n * @private\n */\nexport const deprecatedRegions: Record<DeprecatedRegion, Region> = {\n  [DeprecatedRegion.Au]: Region.Au1,\n  [DeprecatedRegion.Br]: Region.Br1,\n  [DeprecatedRegion.Ie]: Region.Ie1,\n  [DeprecatedRegion.Jp]: Region.Jp1,\n  [DeprecatedRegion.Sg]: Region.Sg1,\n  [DeprecatedRegion.UsOr]: Region.Us1,\n  [DeprecatedRegion.UsVa]: Region.Us1,\n};\n\n/**\n * Region shortcodes. Maps the full region name from AWS to the Twilio shortcode.\n * @private\n */\nexport const regionShortcodes: { [index: string]: Region } = {\n  ASIAPAC_SINGAPORE: Region.Sg1,\n  ASIAPAC_SYDNEY: Region.Au1,\n  ASIAPAC_TOKYO: Region.Jp1,\n  EU_FRANKFURT: Region.De1,\n  EU_IRELAND: Region.Ie1,\n  SOUTH_AMERICA_SAO_PAULO: Region.Br1,\n  US_EAST_VIRGINIA: Region.Us1,\n  US_WEST_OREGON: Region.Us2,\n};\n\n/**\n * Region URIs. Maps the Twilio shortcode to its Twilio endpoint URI.\n * @private\n */\nconst regionURIs: Record<Region, string> = {\n  [Region.Au1]: 'chunderw-vpc-gll-au1.twilio.com',\n  [Region.Au1Ix]: 'chunderw-vpc-gll-au1-ix.twilio.com',\n  [Region.Br1]: 'chunderw-vpc-gll-br1.twilio.com',\n  [Region.De1]: 'chunderw-vpc-gll-de1.twilio.com',\n  [Region.De1Ix]: 'chunderw-vpc-gll-de1-ix.twilio.com',\n  [Region.Gll]: 'chunderw-vpc-gll.twilio.com',\n  [Region.Ie1]: 'chunderw-vpc-gll-ie1.twilio.com',\n  [Region.Ie1Ix]: 'chunderw-vpc-gll-ie1-ix.twilio.com',\n  [Region.Ie1Tnx]: 'chunderw-vpc-gll-ie1-tnx.twilio.com',\n  [Region.Jp1]: 'chunderw-vpc-gll-jp1.twilio.com',\n  [Region.Jp1Ix]: 'chunderw-vpc-gll-jp1-ix.twilio.com',\n  [Region.Sg1]: 'chunderw-vpc-gll-sg1.twilio.com',\n  [Region.Sg1Ix]: 'chunderw-vpc-gll-sg1-ix.twilio.com',\n  [Region.Sg1Tnx]: 'chunderw-vpc-gll-sg1-tnx.twilio.com',\n  [Region.Us1]: 'chunderw-vpc-gll-us1.twilio.com',\n  [Region.Us1Ix]: 'chunderw-vpc-gll-us1-ix.twilio.com',\n  [Region.Us1Tnx]: 'chunderw-vpc-gll-us1-tnx.twilio.com',\n  [Region.Us2]: 'chunderw-vpc-gll-us2.twilio.com',\n  [Region.Us2Ix]: 'chunderw-vpc-gll-us2-ix.twilio.com',\n  [Region.Us2Tnx]: 'chunderw-vpc-gll-us2-tnx.twilio.com',\n};\n\n/**\n * Edge to region mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexport const edgeToRegion: Record<Edge, Region> = {\n  [Edge.Sydney]: Region.Au1,\n  [Edge.SaoPaulo]: Region.Br1,\n  [Edge.Dublin]: Region.Ie1,\n  [Edge.Frankfurt]: Region.De1,\n  [Edge.Tokyo]: Region.Jp1,\n  [Edge.Singapore]: Region.Sg1,\n  [Edge.Ashburn]: Region.Us1,\n  [Edge.Umatilla]: Region.Us2,\n  [Edge.Roaming]: Region.Gll,\n  /**\n   * Interconnect edges\n   */\n  [Edge.AshburnIx]: Region.Us1Ix,\n  [Edge.SanJoseIx]: Region.Us2Ix,\n  [Edge.LondonIx]: Region.Ie1Ix,\n  [Edge.FrankfurtIx]: Region.De1Ix,\n  [Edge.SingaporeIx]: Region.Sg1Ix,\n  [Edge.SydneyIx]: Region.Au1Ix,\n  [Edge.TokyoIx]: Region.Jp1Ix,\n};\n\n/**\n * Region to edge mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexport const regionToEdge: Record<Region, Edge> = {\n  [Region.Au1]: Edge.Sydney,\n  [Region.Br1]: Edge.SaoPaulo,\n  [Region.Ie1]: Edge.Dublin,\n  [Region.De1]: Edge.Frankfurt,\n  [Region.Jp1]: Edge.Tokyo,\n  [Region.Sg1]: Edge.Singapore,\n  [Region.Us1]: Edge.Ashburn,\n  [Region.Us2]: Edge.Umatilla,\n  [Region.Gll]: Edge.Roaming,\n  /**\n   * Interconnect edges\n   */\n  [Region.Us1Ix]: Edge.AshburnIx,\n  [Region.Us2Ix]: Edge.SanJoseIx,\n  [Region.Ie1Ix]: Edge.LondonIx,\n  [Region.De1Ix]: Edge.FrankfurtIx,\n  [Region.Sg1Ix]: Edge.SingaporeIx,\n  [Region.Au1Ix]: Edge.SydneyIx,\n  [Region.Jp1Ix]: Edge.TokyoIx,\n  /**\n   * Tnx regions\n   */\n  [Region.Us1Tnx]: Edge.AshburnIx,\n  [Region.Us2Tnx]: Edge.AshburnIx,\n  [Region.Ie1Tnx]: Edge.LondonIx,\n  [Region.Sg1Tnx]: Edge.SingaporeIx,\n};\n\n/**\n * The default region to connect to and create a chunder uri from if region is\n * not defined.\n * @constant\n * @private\n */\nexport const defaultRegion: string = 'gll';\n\n/**\n * The default edge to connect to and create a chunder uri from, if the edge\n * parameter is not specified during setup in `Device`.\n * @constant\n */\nexport const defaultEdge: Edge = Edge.Roaming;\n\n/**\n * The default chunder URI to connect to, should map to region `gll`.\n * @constant\n * @private\n */\nexport const defaultChunderRegionURI: string = 'chunderw-vpc-gll.twilio.com';\n\n/**\n * String template for a region chunder URI\n * @param region - The region.\n */\nfunction createChunderRegionUri(region: string): string {\n  return region === defaultRegion\n    ? defaultChunderRegionURI\n    : `chunderw-vpc-gll-${region}.twilio.com`;\n}\n\n/**\n * String template for an edge chunder URI\n * @param edge - The edge.\n */\nfunction createChunderEdgeUri(edge: string): string {\n  return `voice-js.${edge}.twilio.com`;\n}\n\n/**\n * Get the URI associated with the passed region or edge. If both are passed,\n * then we want to fail `Device` setup, so we throw an error.\n * As of CLIENT-7519, Regions are deprecated in favor of edges as part of\n * Phase 1 Regional.\n *\n * @private\n * @param edge - A string or an array of edge values\n * @param region - The region shortcode.\n * @param [onDeprecated] - A callback containing the deprecation message to be\n *   warned when the passed parameters are deprecated.\n * @returns An array of chunder URIs\n */\nexport function getChunderURIs(\n  edge: string[] | string | undefined,\n  region: string | undefined,\n  onDeprecated?: (message: string) => void,\n): string[] {\n  if (!!region && typeof region !== 'string') {\n    throw new InvalidArgumentError(\n      'If `region` is provided, it must be of type `string`.',\n    );\n  }\n\n  if (!!edge && typeof edge !== 'string' && !Array.isArray(edge)) {\n    throw new InvalidArgumentError(\n      'If `edge` is provided, it must be of type `string` or an array of strings.',\n    );\n  }\n\n  const deprecatedMessages: string[] = [];\n  let uris: string[];\n\n  if (region && edge) {\n    throw new InvalidArgumentError(\n      'You cannot specify `region` when `edge` is specified in' +\n      '`Twilio.Device.Options`.',\n    );\n  } else if (region) {\n    let chunderRegion = region;\n\n    deprecatedMessages.push(\n      'Regions are deprecated in favor of edges. Please see this page for ' +\n      'documentation: https://www.twilio.com/docs/voice/client/edges.',\n    );\n\n    const isDeprecatedRegion: boolean =\n      (Object.values(DeprecatedRegion) as string[]).includes(chunderRegion);\n    if (isDeprecatedRegion) {\n      chunderRegion = deprecatedRegions[chunderRegion as DeprecatedRegion];\n    }\n\n    const isKnownRegion: boolean =\n      (Object.values(Region) as string[]).includes(chunderRegion);\n    if (isKnownRegion) {\n      const preferredEdge = regionToEdge[chunderRegion as Region];\n      deprecatedMessages.push(\n        `Region \"${chunderRegion}\" is deprecated, please use \\`edge\\` ` +\n        `\"${preferredEdge}\".`,\n      );\n    }\n\n    uris = [createChunderRegionUri(chunderRegion)];\n  } else if (edge) {\n    const edgeValues = Object.values(Edge) as string[];\n    const edgeParams = Array.isArray(edge) ? edge : [edge];\n\n    uris = edgeParams.map((param: Edge) => edgeValues.includes(param)\n      ? createChunderRegionUri(edgeToRegion[param])\n      : createChunderEdgeUri(param));\n  } else {\n    uris = [defaultChunderRegionURI];\n  }\n\n  if (onDeprecated && deprecatedMessages.length) {\n    setTimeout(() => onDeprecated(deprecatedMessages.join('\\n')));\n  }\n\n  return uris;\n}\n\n/**\n * Get the region shortcode by its full AWS region string.\n *\n * @private\n * @param region - The region's full AWS string.\n */\nexport function getRegionShortcode(region: string): Region | null {\n  return regionShortcodes[region] || null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}