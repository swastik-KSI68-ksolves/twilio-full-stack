{"ast":null,"code":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar request = require('./request');\nvar util = require('util');\n\n/**\n * Builds Endpoint Analytics (EA) event payloads and sends them to\n *   the EA server.\n * @constructor\n * @param {String} productName - Name of the product publishing events.\n * @param {String} token - The JWT token to use to authenticate with\n *   the EA server.\n * @param {EventPublisher.Options} options\n * @property {Boolean} isEnabled - Whether or not this publisher is publishing\n *   to the server. Currently ignores the request altogether, in the future this\n *   may store them in case publishing is re-enabled later. Defaults to true.\n */ /**\n    * @typedef {Object} EventPublisher.Options\n    * @property {Object} [metadata=undefined] - A publisher_metadata object to send\n    *   with each payload.\n    * @property {String} [host='eventgw.twilio.com'] - The host address of the EA\n    *   server to publish to.\n    * @property {Object|Function} [defaultPayload] - A default payload to extend\n    *   when creating and sending event payloads. Also takes a function that\n    *   should return an object representing the default payload. This is\n    *   useful for fields that should always be present when they are\n    *   available, but are not always available.\n    */\nfunction EventPublisher(productName, token, options) {\n  if (!(this instanceof EventPublisher)) {\n    return new EventPublisher(productName, token, options);\n  }\n\n  // Apply default options\n  options = Object.assign({\n    defaultPayload: function defaultPayload() {\n      return {};\n    },\n    host: 'eventgw.twilio.com'\n  }, options);\n  var defaultPayload = options.defaultPayload;\n  if (typeof defaultPayload !== 'function') {\n    defaultPayload = function defaultPayload() {\n      return Object.assign({}, options.defaultPayload);\n    };\n  }\n  var isEnabled = true;\n  // eslint-disable-next-line camelcase,no-undefined\n  var metadata = Object.assign({\n    app_name: undefined,\n    app_version: undefined\n  }, options.metadata);\n  Object.defineProperties(this, {\n    _defaultPayload: {\n      value: defaultPayload\n    },\n    _isEnabled: {\n      get: function get() {\n        return isEnabled;\n      },\n      set: function set(_isEnabled) {\n        isEnabled = _isEnabled;\n      }\n    },\n    _host: {\n      value: options.host\n    },\n    _request: {\n      value: options.request || request,\n      writable: true\n    },\n    _token: {\n      value: token,\n      writable: true\n    },\n    isEnabled: {\n      enumerable: true,\n      get: function get() {\n        return isEnabled;\n      }\n    },\n    metadata: {\n      enumerable: true,\n      get: function get() {\n        return metadata;\n      }\n    },\n    productName: {\n      enumerable: true,\n      value: productName\n    },\n    token: {\n      enumerable: true,\n      get: function get() {\n        return this._token;\n      }\n    }\n  });\n}\nutil.inherits(EventPublisher, EventEmitter);\n\n/**\n * Post to an EA server.\n * @private\n * @param {String} endpointName - Endpoint to post the event to\n * @param {String} level - ['debug', 'info', 'warning', 'error']\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @param {?Boolean} [force=false] - Whether or not to send this even if\n *    publishing is disabled.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype._post = function _post(endpointName, level, group, name, payload, connection, force) {\n  var _this = this;\n  if (!this.isEnabled && !force) {\n    return Promise.resolve();\n  }\n  if (!connection || (!connection.parameters || !connection.parameters.CallSid) && !connection.outboundConnectionId) {\n    return Promise.resolve();\n  }\n  var event = {\n    /* eslint-disable camelcase */\n    publisher: this.productName,\n    group: group,\n    name: name,\n    timestamp: new Date().toISOString(),\n    level: level.toUpperCase(),\n    payload_type: 'application/json',\n    private: false,\n    payload: payload && payload.forEach ? payload.slice(0) : Object.assign(this._defaultPayload(connection), payload)\n    /* eslint-enable camelcase */\n  };\n\n  if (this.metadata) {\n    // eslint-disable-next-line camelcase\n    event.publisher_metadata = this.metadata;\n  }\n  var requestParams = {\n    url: 'https://' + this._host + '/v4/' + endpointName,\n    body: event,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Twilio-Token': this.token\n    }\n  };\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self._request.post(requestParams, function (err) {\n      if (err) {\n        _this.emit('error', err);\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\n/**\n * Post an event to the EA server. Use this method when the level\n *  is dynamic. Otherwise, it's better practice to use the sugar\n *  methods named for the specific level.\n * @param {String} level - ['debug', 'info', 'warning', 'error']\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.post = function post(level, group, name, payload, connection, force) {\n  return this._post('EndpointEvents', level, group, name, payload, connection, force);\n};\n\n/**\n * Post a debug-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.debug = function debug(group, name, payload, connection) {\n  return this.post('debug', group, name, payload, connection);\n};\n\n/**\n * Post an info-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.info = function info(group, name, payload, connection) {\n  return this.post('info', group, name, payload, connection);\n};\n\n/**\n * Post a warning-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.warn = function warn(group, name, payload, connection) {\n  return this.post('warning', group, name, payload, connection);\n};\n\n/**\n * Post an error-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.error = function error(group, name, payload, connection) {\n  return this.post('error', group, name, payload, connection);\n};\n\n/**\n * Post a metrics event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {Array<Object>} metrics - The metrics to post.\n * @param {?Object} [customFields] - Custom fields to append to each payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.postMetrics = function postMetrics(group, name, metrics, customFields, connection) {\n  var _this2 = this;\n  return new Promise(function (resolve) {\n    var samples = metrics.map(formatMetric).map(function (sample) {\n      return Object.assign(sample, customFields);\n    });\n    resolve(_this2._post('EndpointMetrics', 'info', group, name, samples, connection));\n  });\n};\n\n/**\n * Update the token to use to authenticate requests.\n * @param {string} token\n * @returns {void}\n */\nEventPublisher.prototype.setToken = function setToken(token) {\n  this._token = token;\n};\n\n/**\n * Enable the publishing of events.\n */\nEventPublisher.prototype.enable = function enable() {\n  this._isEnabled = true;\n};\n\n/**\n * Disable the publishing of events.\n */\nEventPublisher.prototype.disable = function disable() {\n  this._isEnabled = false;\n};\nfunction formatMetric(sample) {\n  return {\n    /* eslint-disable camelcase */\n    timestamp: new Date(sample.timestamp).toISOString(),\n    total_packets_received: sample.totals.packetsReceived,\n    total_packets_lost: sample.totals.packetsLost,\n    total_packets_sent: sample.totals.packetsSent,\n    total_bytes_received: sample.totals.bytesReceived,\n    total_bytes_sent: sample.totals.bytesSent,\n    packets_received: sample.packetsReceived,\n    packets_lost: sample.packetsLost,\n    packets_lost_fraction: sample.packetsLostFraction && Math.round(sample.packetsLostFraction * 100) / 100,\n    bytes_received: sample.bytesReceived,\n    bytes_sent: sample.bytesSent,\n    audio_codec: sample.codecName,\n    audio_level_in: sample.audioInputLevel,\n    audio_level_out: sample.audioOutputLevel,\n    call_volume_input: sample.inputVolume,\n    call_volume_output: sample.outputVolume,\n    jitter: sample.jitter,\n    rtt: sample.rtt,\n    mos: sample.mos && Math.round(sample.mos * 100) / 100\n    /* eslint-enable camelcase */\n  };\n}\n\nmodule.exports = EventPublisher;","map":{"version":3,"names":["EventEmitter","require","request","util","EventPublisher","productName","token","options","Object","assign","defaultPayload","host","isEnabled","metadata","app_name","undefined","app_version","defineProperties","_defaultPayload","value","_isEnabled","get","set","_host","_request","writable","_token","enumerable","inherits","prototype","_post","endpointName","level","group","name","payload","connection","force","_this","Promise","resolve","parameters","CallSid","outboundConnectionId","event","publisher","timestamp","Date","toISOString","toUpperCase","payload_type","private","forEach","slice","publisher_metadata","requestParams","url","body","headers","self","reject","post","err","emit","debug","info","warn","error","postMetrics","metrics","customFields","_this2","samples","map","formatMetric","sample","setToken","enable","disable","total_packets_received","totals","packetsReceived","total_packets_lost","packetsLost","total_packets_sent","packetsSent","total_bytes_received","bytesReceived","total_bytes_sent","bytesSent","packets_received","packets_lost","packets_lost_fraction","packetsLostFraction","Math","round","bytes_received","bytes_sent","audio_codec","codecName","audio_level_in","audioInputLevel","audio_level_out","audioOutputLevel","call_volume_input","inputVolume","call_volume_output","outputVolume","jitter","rtt","mos","module","exports"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/twilio-client/es5/twilio/eventpublisher.js"],"sourcesContent":["'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar request = require('./request');\nvar util = require('util');\n\n/**\n * Builds Endpoint Analytics (EA) event payloads and sends them to\n *   the EA server.\n * @constructor\n * @param {String} productName - Name of the product publishing events.\n * @param {String} token - The JWT token to use to authenticate with\n *   the EA server.\n * @param {EventPublisher.Options} options\n * @property {Boolean} isEnabled - Whether or not this publisher is publishing\n *   to the server. Currently ignores the request altogether, in the future this\n *   may store them in case publishing is re-enabled later. Defaults to true.\n */ /**\n    * @typedef {Object} EventPublisher.Options\n    * @property {Object} [metadata=undefined] - A publisher_metadata object to send\n    *   with each payload.\n    * @property {String} [host='eventgw.twilio.com'] - The host address of the EA\n    *   server to publish to.\n    * @property {Object|Function} [defaultPayload] - A default payload to extend\n    *   when creating and sending event payloads. Also takes a function that\n    *   should return an object representing the default payload. This is\n    *   useful for fields that should always be present when they are\n    *   available, but are not always available.\n    */\nfunction EventPublisher(productName, token, options) {\n  if (!(this instanceof EventPublisher)) {\n    return new EventPublisher(productName, token, options);\n  }\n\n  // Apply default options\n  options = Object.assign({\n    defaultPayload: function defaultPayload() {\n      return {};\n    },\n\n    host: 'eventgw.twilio.com'\n  }, options);\n\n  var defaultPayload = options.defaultPayload;\n\n  if (typeof defaultPayload !== 'function') {\n    defaultPayload = function defaultPayload() {\n      return Object.assign({}, options.defaultPayload);\n    };\n  }\n\n  var isEnabled = true;\n  // eslint-disable-next-line camelcase,no-undefined\n  var metadata = Object.assign({ app_name: undefined, app_version: undefined }, options.metadata);\n\n  Object.defineProperties(this, {\n    _defaultPayload: { value: defaultPayload },\n    _isEnabled: {\n      get: function get() {\n        return isEnabled;\n      },\n      set: function set(_isEnabled) {\n        isEnabled = _isEnabled;\n      }\n    },\n    _host: { value: options.host },\n    _request: { value: options.request || request, writable: true },\n    _token: { value: token, writable: true },\n    isEnabled: {\n      enumerable: true,\n      get: function get() {\n        return isEnabled;\n      }\n    },\n    metadata: {\n      enumerable: true,\n      get: function get() {\n        return metadata;\n      }\n    },\n    productName: { enumerable: true, value: productName },\n    token: {\n      enumerable: true,\n      get: function get() {\n        return this._token;\n      }\n    }\n  });\n}\n\nutil.inherits(EventPublisher, EventEmitter);\n\n/**\n * Post to an EA server.\n * @private\n * @param {String} endpointName - Endpoint to post the event to\n * @param {String} level - ['debug', 'info', 'warning', 'error']\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @param {?Boolean} [force=false] - Whether or not to send this even if\n *    publishing is disabled.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype._post = function _post(endpointName, level, group, name, payload, connection, force) {\n  var _this = this;\n\n  if (!this.isEnabled && !force) {\n    return Promise.resolve();\n  }\n\n  if (!connection || (!connection.parameters || !connection.parameters.CallSid) && !connection.outboundConnectionId) {\n    return Promise.resolve();\n  }\n\n  var event = {\n    /* eslint-disable camelcase */\n    publisher: this.productName,\n    group: group,\n    name: name,\n    timestamp: new Date().toISOString(),\n    level: level.toUpperCase(),\n    payload_type: 'application/json',\n    private: false,\n    payload: payload && payload.forEach ? payload.slice(0) : Object.assign(this._defaultPayload(connection), payload)\n    /* eslint-enable camelcase */\n  };\n\n  if (this.metadata) {\n    // eslint-disable-next-line camelcase\n    event.publisher_metadata = this.metadata;\n  }\n\n  var requestParams = {\n    url: 'https://' + this._host + '/v4/' + endpointName,\n    body: event,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Twilio-Token': this.token\n    }\n  };\n\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self._request.post(requestParams, function (err) {\n      if (err) {\n        _this.emit('error', err);\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\n/**\n * Post an event to the EA server. Use this method when the level\n *  is dynamic. Otherwise, it's better practice to use the sugar\n *  methods named for the specific level.\n * @param {String} level - ['debug', 'info', 'warning', 'error']\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.post = function post(level, group, name, payload, connection, force) {\n  return this._post('EndpointEvents', level, group, name, payload, connection, force);\n};\n\n/**\n * Post a debug-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.debug = function debug(group, name, payload, connection) {\n  return this.post('debug', group, name, payload, connection);\n};\n\n/**\n * Post an info-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.info = function info(group, name, payload, connection) {\n  return this.post('info', group, name, payload, connection);\n};\n\n/**\n * Post a warning-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.warn = function warn(group, name, payload, connection) {\n  return this.post('warning', group, name, payload, connection);\n};\n\n/**\n * Post an error-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.error = function error(group, name, payload, connection) {\n  return this.post('error', group, name, payload, connection);\n};\n\n/**\n * Post a metrics event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {Array<Object>} metrics - The metrics to post.\n * @param {?Object} [customFields] - Custom fields to append to each payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.postMetrics = function postMetrics(group, name, metrics, customFields, connection) {\n  var _this2 = this;\n\n  return new Promise(function (resolve) {\n    var samples = metrics.map(formatMetric).map(function (sample) {\n      return Object.assign(sample, customFields);\n    });\n\n    resolve(_this2._post('EndpointMetrics', 'info', group, name, samples, connection));\n  });\n};\n\n/**\n * Update the token to use to authenticate requests.\n * @param {string} token\n * @returns {void}\n */\nEventPublisher.prototype.setToken = function setToken(token) {\n  this._token = token;\n};\n\n/**\n * Enable the publishing of events.\n */\nEventPublisher.prototype.enable = function enable() {\n  this._isEnabled = true;\n};\n\n/**\n * Disable the publishing of events.\n */\nEventPublisher.prototype.disable = function disable() {\n  this._isEnabled = false;\n};\n\nfunction formatMetric(sample) {\n  return {\n    /* eslint-disable camelcase */\n    timestamp: new Date(sample.timestamp).toISOString(),\n    total_packets_received: sample.totals.packetsReceived,\n    total_packets_lost: sample.totals.packetsLost,\n    total_packets_sent: sample.totals.packetsSent,\n    total_bytes_received: sample.totals.bytesReceived,\n    total_bytes_sent: sample.totals.bytesSent,\n    packets_received: sample.packetsReceived,\n    packets_lost: sample.packetsLost,\n    packets_lost_fraction: sample.packetsLostFraction && Math.round(sample.packetsLostFraction * 100) / 100,\n    bytes_received: sample.bytesReceived,\n    bytes_sent: sample.bytesSent,\n    audio_codec: sample.codecName,\n    audio_level_in: sample.audioInputLevel,\n    audio_level_out: sample.audioOutputLevel,\n    call_volume_input: sample.inputVolume,\n    call_volume_output: sample.outputVolume,\n    jitter: sample.jitter,\n    rtt: sample.rtt,\n    mos: sample.mos && Math.round(sample.mos * 100) / 100\n    /* eslint-enable camelcase */\n  };\n}\n\nmodule.exports = EventPublisher;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}