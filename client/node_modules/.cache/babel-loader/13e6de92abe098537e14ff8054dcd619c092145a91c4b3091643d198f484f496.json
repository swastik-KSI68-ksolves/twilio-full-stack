{"ast":null,"code":"\"use strict\";\n\n/**\n * @packageDocumentation\n * @module Tools\n * @internalapi\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar errors_1 = require(\"./errors\");\n/**\n * A Map of DTMF Sound Names to their mock frequency pairs.\n */\nvar bandFrequencies = {\n  dtmf0: [1360, 960],\n  dtmf1: [1230, 720],\n  dtmf2: [1360, 720],\n  dtmf3: [1480, 720],\n  dtmf4: [1230, 790],\n  dtmf5: [1360, 790],\n  dtmf6: [1480, 790],\n  dtmf7: [1230, 870],\n  dtmf8: [1360, 870],\n  dtmf9: [1480, 870],\n  dtmfh: [1480, 960],\n  dtmfs: [1230, 960]\n};\nvar DialtonePlayer = /** @class */function () {\n  function DialtonePlayer(_context) {\n    var _this = this;\n    this._context = _context;\n    /**\n     * Gain nodes, reducing the frequency.\n     */\n    this._gainNodes = [];\n    this._gainNodes = [this._context.createGain(), this._context.createGain()];\n    this._gainNodes.forEach(function (gainNode) {\n      gainNode.connect(_this._context.destination);\n      gainNode.gain.value = 0.1;\n      _this._gainNodes.push(gainNode);\n    });\n  }\n  DialtonePlayer.prototype.cleanup = function () {\n    this._gainNodes.forEach(function (gainNode) {\n      gainNode.disconnect();\n    });\n  };\n  /**\n   * Play the dual frequency tone for the passed DTMF name.\n   * @param sound\n   */\n  DialtonePlayer.prototype.play = function (sound) {\n    var _this = this;\n    var frequencies = bandFrequencies[sound];\n    if (!frequencies) {\n      throw new errors_1.InvalidArgumentError('Invalid DTMF sound name');\n    }\n    var oscillators = [this._context.createOscillator(), this._context.createOscillator()];\n    oscillators.forEach(function (oscillator, i) {\n      oscillator.type = 'sine';\n      oscillator.frequency.value = frequencies[i];\n      oscillator.connect(_this._gainNodes[i]);\n      oscillator.start();\n      oscillator.stop(_this._context.currentTime + 0.1);\n      oscillator.addEventListener('ended', function () {\n        return oscillator.disconnect();\n      });\n    });\n  };\n  return DialtonePlayer;\n}();\nexports.default = DialtonePlayer;","map":{"version":3,"names":["errors_1","require","bandFrequencies","dtmf0","dtmf1","dtmf2","dtmf3","dtmf4","dtmf5","dtmf6","dtmf7","dtmf8","dtmf9","dtmfh","dtmfs","DialtonePlayer","_context","_this","_gainNodes","createGain","forEach","gainNode","connect","destination","gain","value","push","prototype","cleanup","disconnect","play","sound","frequencies","InvalidArgumentError","oscillators","createOscillator","oscillator","i","type","frequency","start","stop","currentTime","addEventListener"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/@twilio/voice-sdk/lib/twilio/dialtonePlayer.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Tools\n * @internalapi\n */\n\nimport { InvalidArgumentError } from './errors';\n\n/**\n * A Map of DTMF Sound Names to their mock frequency pairs.\n */\nconst bandFrequencies: Partial<Record<string, number[]>> = {\n  dtmf0: [1360, 960],\n  dtmf1: [1230, 720],\n  dtmf2: [1360, 720],\n  dtmf3: [1480, 720],\n  dtmf4: [1230, 790],\n  dtmf5: [1360, 790],\n  dtmf6: [1480, 790],\n  dtmf7: [1230, 870],\n  dtmf8: [1360, 870],\n  dtmf9: [1480, 870],\n  dtmfh: [1480, 960],\n  dtmfs: [1230, 960],\n};\n\nexport default class DialtonePlayer {\n  /**\n   * Gain nodes, reducing the frequency.\n   */\n  _gainNodes: GainNode[] = [];\n\n  constructor(private _context: AudioContext) {\n    this._gainNodes = [\n      this._context.createGain(),\n      this._context.createGain(),\n    ];\n\n    this._gainNodes.forEach((gainNode: GainNode) => {\n      gainNode.connect(this._context.destination);\n      gainNode.gain.value = 0.1;\n      this._gainNodes.push(gainNode);\n    });\n  }\n\n  cleanup(): void {\n    this._gainNodes.forEach((gainNode: GainNode) => {\n      gainNode.disconnect();\n    });\n  }\n\n  /**\n   * Play the dual frequency tone for the passed DTMF name.\n   * @param sound\n   */\n  play(sound: string): void {\n    const frequencies = bandFrequencies[sound];\n\n    if (!frequencies) {\n      throw new InvalidArgumentError('Invalid DTMF sound name');\n    }\n\n    const oscillators: OscillatorNode[] = [\n      this._context.createOscillator(),\n      this._context.createOscillator(),\n    ];\n\n    oscillators.forEach((oscillator: OscillatorNode, i: number) => {\n      oscillator.type = 'sine' as OscillatorType;\n      oscillator.frequency.value = frequencies[i];\n      oscillator.connect(this._gainNodes[i]);\n      oscillator.start();\n      oscillator.stop(this._context.currentTime + 0.1);\n      oscillator.addEventListener('ended', () => oscillator.disconnect());\n    });\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;AAMA,IAAAA,QAAA,GAAAC,OAAA;AAEA;;;AAGA,IAAMC,eAAe,GAAsC;EACzDC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;EAClBC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;EAClBC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;EAClBC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;EAClBC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;EAClBC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;EAClBC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;EAClBC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;EAClBC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;EAClBC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;EAClBC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;EAClBC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG;CAClB;AAED,IAAAC,cAAA;EAME,SAAAA,eAAoBC,QAAsB;IAA1C,IAAAC,KAAA;IAAoB,KAAAD,QAAQ,GAARA,QAAQ;IAL5B;;;IAGA,KAAAE,UAAU,GAAe,EAAE;IAGzB,IAAI,CAACA,UAAU,GAAG,CAChB,IAAI,CAACF,QAAQ,CAACG,UAAU,EAAE,EAC1B,IAAI,CAACH,QAAQ,CAACG,UAAU,EAAE,CAC3B;IAED,IAAI,CAACD,UAAU,CAACE,OAAO,CAAC,UAACC,QAAkB;MACzCA,QAAQ,CAACC,OAAO,CAACL,KAAI,CAACD,QAAQ,CAACO,WAAW,CAAC;MAC3CF,QAAQ,CAACG,IAAI,CAACC,KAAK,GAAG,GAAG;MACzBR,KAAI,CAACC,UAAU,CAACQ,IAAI,CAACL,QAAQ,CAAC;IAChC,CAAC,CAAC;EACJ;EAEAN,cAAA,CAAAY,SAAA,CAAAC,OAAO,GAAP;IACE,IAAI,CAACV,UAAU,CAACE,OAAO,CAAC,UAACC,QAAkB;MACzCA,QAAQ,CAACQ,UAAU,EAAE;IACvB,CAAC,CAAC;EACJ,CAAC;EAED;;;;EAIAd,cAAA,CAAAY,SAAA,CAAAG,IAAI,GAAJ,UAAKC,KAAa;IAAlB,IAAAd,KAAA;IACE,IAAMe,WAAW,GAAG9B,eAAe,CAAC6B,KAAK,CAAC;IAE1C,IAAI,CAACC,WAAW,EAAE;MAChB,MAAM,IAAIhC,QAAA,CAAAiC,oBAAoB,CAAC,yBAAyB,CAAC;;IAG3D,IAAMC,WAAW,GAAqB,CACpC,IAAI,CAAClB,QAAQ,CAACmB,gBAAgB,EAAE,EAChC,IAAI,CAACnB,QAAQ,CAACmB,gBAAgB,EAAE,CACjC;IAEDD,WAAW,CAACd,OAAO,CAAC,UAACgB,UAA0B,EAAEC,CAAS;MACxDD,UAAU,CAACE,IAAI,GAAG,MAAwB;MAC1CF,UAAU,CAACG,SAAS,CAACd,KAAK,GAAGO,WAAW,CAACK,CAAC,CAAC;MAC3CD,UAAU,CAACd,OAAO,CAACL,KAAI,CAACC,UAAU,CAACmB,CAAC,CAAC,CAAC;MACtCD,UAAU,CAACI,KAAK,EAAE;MAClBJ,UAAU,CAACK,IAAI,CAACxB,KAAI,CAACD,QAAQ,CAAC0B,WAAW,GAAG,GAAG,CAAC;MAChDN,UAAU,CAACO,gBAAgB,CAAC,OAAO,EAAE;QAAM,OAAAP,UAAU,CAACP,UAAU,EAAE;MAAvB,CAAuB,CAAC;IACrE,CAAC,CAAC;EACJ,CAAC;EACH,OAAAd,cAAC;AAAD,CAAC,CAlDD"},"metadata":{},"sourceType":"script","externalDependencies":[]}