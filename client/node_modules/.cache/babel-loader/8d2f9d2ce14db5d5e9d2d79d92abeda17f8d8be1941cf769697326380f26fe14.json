{"ast":null,"code":"\"use strict\";\n\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNonNegativeNumber = exports.calculate = void 0;\nvar r0 = 94.768; // Constant used in computing \"rFactor\".\n/**\n * Calculate the mos score of a stats object\n * @param {number} rtt\n * @param {number} jitter\n * @param {number} fractionLost - The fraction of packets that have been lost.\n * Calculated by packetsLost / totalPackets\n * @return {number | null} mos - Calculated MOS, `1.0` through roughly `4.5`.\n * Returns `null` when any of the input parameters are not a `non-negative`\n * number.\n */\nfunction calculate(rtt, jitter, fractionLost) {\n  if (typeof rtt !== 'number' || typeof jitter !== 'number' || typeof fractionLost !== 'number' || !isNonNegativeNumber(rtt) || !isNonNegativeNumber(jitter) || !isNonNegativeNumber(fractionLost)) {\n    return null;\n  }\n  // Compute the effective latency.\n  var effectiveLatency = rtt + jitter * 2 + 10;\n  // Compute the initial \"rFactor\" from effective latency.\n  var rFactor = 0;\n  switch (true) {\n    case effectiveLatency < 160:\n      rFactor = r0 - effectiveLatency / 40;\n      break;\n    case effectiveLatency < 1000:\n      rFactor = r0 - (effectiveLatency - 120) / 10;\n      break;\n  }\n  // Adjust \"rFactor\" with the fraction of packets lost.\n  switch (true) {\n    case fractionLost <= rFactor / 2.5:\n      rFactor = Math.max(rFactor - fractionLost * 2.5, 6.52);\n      break;\n    default:\n      rFactor = 0;\n      break;\n  }\n  // Compute MOS from \"rFactor\".\n  var mos = 1 + 0.035 * rFactor + 0.000007 * rFactor * (rFactor - 60) * (100 - rFactor);\n  return mos;\n}\nexports.calculate = calculate;\n/**\n * Returns true if and only if the parameter passed is a number, is not `NaN`,\n * is finite, and is greater than or equal to `0`.\n * @param n\n */\nfunction isNonNegativeNumber(n) {\n  return typeof n === 'number' && !isNaN(n) && isFinite(n) && n >= 0;\n}\nexports.isNonNegativeNumber = isNonNegativeNumber;\nexports.default = {\n  calculate: calculate,\n  isNonNegativeNumber: isNonNegativeNumber\n};","map":{"version":3,"names":["r0","calculate","rtt","jitter","fractionLost","isNonNegativeNumber","effectiveLatency","rFactor","Math","max","mos","exports","n","isNaN","isFinite","default"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/@twilio/voice-sdk/lib/twilio/rtc/mos.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n\nconst r0 = 94.768; // Constant used in computing \"rFactor\".\n\n/**\n * Calculate the mos score of a stats object\n * @param {number} rtt\n * @param {number} jitter\n * @param {number} fractionLost - The fraction of packets that have been lost.\n * Calculated by packetsLost / totalPackets\n * @return {number | null} mos - Calculated MOS, `1.0` through roughly `4.5`.\n * Returns `null` when any of the input parameters are not a `non-negative`\n * number.\n */\nexport function calculate(\n  rtt: any,\n  jitter: any,\n  fractionLost: any,\n): number | null {\n  if (\n    typeof rtt !== 'number' ||\n    typeof jitter !== 'number' ||\n    typeof fractionLost !== 'number' ||\n    !isNonNegativeNumber(rtt) ||\n    !isNonNegativeNumber(jitter) ||\n    !isNonNegativeNumber(fractionLost)\n  ) {\n    return null;\n  }\n\n  // Compute the effective latency.\n  const effectiveLatency: number = rtt + (jitter * 2) + 10;\n\n  // Compute the initial \"rFactor\" from effective latency.\n  let rFactor: number = 0;\n  switch (true) {\n    case effectiveLatency < 160:\n      rFactor = r0 - (effectiveLatency / 40);\n      break;\n    case effectiveLatency < 1000:\n      rFactor = r0 - ((effectiveLatency - 120) / 10);\n      break;\n  }\n\n  // Adjust \"rFactor\" with the fraction of packets lost.\n  switch (true) {\n    case fractionLost <= (rFactor / 2.5):\n      rFactor = Math.max(rFactor - fractionLost * 2.5, 6.52);\n      break;\n    default:\n      rFactor = 0;\n      break;\n  }\n\n  // Compute MOS from \"rFactor\".\n  const mos: number = 1 +\n    (0.035 * rFactor) +\n    (0.000007 * rFactor) *\n    (rFactor - 60) *\n    (100 - rFactor);\n\n  return mos;\n}\n\n/**\n * Returns true if and only if the parameter passed is a number, is not `NaN`,\n * is finite, and is greater than or equal to `0`.\n * @param n\n */\nexport function isNonNegativeNumber(n: any): boolean {\n  return typeof n === 'number' && !isNaN(n) && isFinite(n) && n >= 0;\n}\n\nexport default {\n  calculate,\n  isNonNegativeNumber,\n};\n"],"mappings":";;AAAA;;;;;;;;;AAMA,IAAMA,EAAE,GAAG,MAAM,CAAC,CAAC;AAEnB;;;;;;;;;;AAUA,SAAgBC,SAASA,CACvBC,GAAQ,EACRC,MAAW,EACXC,YAAiB;EAEjB,IACE,OAAOF,GAAG,KAAK,QAAQ,IACvB,OAAOC,MAAM,KAAK,QAAQ,IAC1B,OAAOC,YAAY,KAAK,QAAQ,IAChC,CAACC,mBAAmB,CAACH,GAAG,CAAC,IACzB,CAACG,mBAAmB,CAACF,MAAM,CAAC,IAC5B,CAACE,mBAAmB,CAACD,YAAY,CAAC,EAClC;IACA,OAAO,IAAI;;EAGb;EACA,IAAME,gBAAgB,GAAWJ,GAAG,GAAIC,MAAM,GAAG,CAAE,GAAG,EAAE;EAExD;EACA,IAAII,OAAO,GAAW,CAAC;EACvB,QAAQ,IAAI;IACV,KAAKD,gBAAgB,GAAG,GAAG;MACzBC,OAAO,GAAGP,EAAE,GAAIM,gBAAgB,GAAG,EAAG;MACtC;IACF,KAAKA,gBAAgB,GAAG,IAAI;MAC1BC,OAAO,GAAGP,EAAE,GAAI,CAACM,gBAAgB,GAAG,GAAG,IAAI,EAAG;MAC9C;;EAGJ;EACA,QAAQ,IAAI;IACV,KAAKF,YAAY,IAAKG,OAAO,GAAG,GAAI;MAClCA,OAAO,GAAGC,IAAI,CAACC,GAAG,CAACF,OAAO,GAAGH,YAAY,GAAG,GAAG,EAAE,IAAI,CAAC;MACtD;IACF;MACEG,OAAO,GAAG,CAAC;MACX;;EAGJ;EACA,IAAMG,GAAG,GAAW,CAAC,GAClB,KAAK,GAAGH,OAAQ,GAChB,QAAQ,GAAGA,OAAO,IAClBA,OAAO,GAAG,EAAE,CAAC,IACb,GAAG,GAAGA,OAAO,CAAC;EAEjB,OAAOG,GAAG;AACZ;AAhDAC,OAAA,CAAAV,SAAA,GAAAA,SAAA;AAkDA;;;;;AAKA,SAAgBI,mBAAmBA,CAACO,CAAM;EACxC,OAAO,OAAOA,CAAC,KAAK,QAAQ,IAAI,CAACC,KAAK,CAACD,CAAC,CAAC,IAAIE,QAAQ,CAACF,CAAC,CAAC,IAAIA,CAAC,IAAI,CAAC;AACpE;AAFAD,OAAA,CAAAN,mBAAA,GAAAA,mBAAA;AAIAM,OAAA,CAAAI,OAAA,GAAe;EACbd,SAAS,EAAAA,SAAA;EACTI,mBAAmB,EAAAA;CACpB"},"metadata":{},"sourceType":"script","externalDependencies":[]}