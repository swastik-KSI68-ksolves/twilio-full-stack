{"ast":null,"code":"/**\n * This file was imported from another project. If making changes to this file, please don't\n * make them here. Make them on the linked repo below, then copy back:\n * https://code.hq.twilio.com/client/MockRTCStatsReport\n */\n/* eslint-disable no-undefined */\n// The legacy max volume, which is the positive half of a signed short integer.\nvar OLD_MAX_VOLUME = 32767;\nvar NativeRTCStatsReport = typeof window !== 'undefined' ? window.RTCStatsReport : undefined;\n/**\n * Create a MockRTCStatsReport wrapper around a Map of RTCStats objects. If RTCStatsReport is available\n *   natively, it will be inherited so that instanceof checks pass.\n * @constructor\n * @extends RTCStatsReport\n * @param {Map<string, RTCStats>} statsMap - A Map of RTCStats objects to wrap\n *   with a MockRTCStatsReport object.\n */\nfunction MockRTCStatsReport(statsMap) {\n  if (!(this instanceof MockRTCStatsReport)) {\n    return new MockRTCStatsReport(statsMap);\n  }\n  var self = this;\n  Object.defineProperties(this, {\n    size: {\n      enumerable: true,\n      get: function () {\n        return self._map.size;\n      }\n    },\n    _map: {\n      value: statsMap\n    }\n  });\n  this[Symbol.iterator] = statsMap[Symbol.iterator];\n}\n// If RTCStatsReport is available natively, inherit it. Keep our constructor.\nif (NativeRTCStatsReport) {\n  MockRTCStatsReport.prototype = Object.create(NativeRTCStatsReport.prototype);\n  MockRTCStatsReport.prototype.constructor = MockRTCStatsReport;\n}\n// Map the Map-like read methods to the underlying Map\n['entries', 'forEach', 'get', 'has', 'keys', 'values'].forEach(function (key) {\n  MockRTCStatsReport.prototype[key] = function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return (_a = this._map)[key].apply(_a, args);\n  };\n});\n/**\n * Convert an array of RTCStats objects into a mock RTCStatsReport object.\n * @param {Array<RTCStats>}\n * @return {MockRTCStatsReport}\n */\nMockRTCStatsReport.fromArray = function fromArray(array) {\n  return new MockRTCStatsReport(array.reduce(function (map, rtcStats) {\n    map.set(rtcStats.id, rtcStats);\n    return map;\n  }, new Map()));\n};\n/**\n * Convert a legacy RTCStatsResponse object into a mock RTCStatsReport object.\n * @param {RTCStatsResponse} statsResponse - An RTCStatsResponse object returned by the\n *   legacy getStats(callback) method in Chrome.\n * @return {MockRTCStatsReport} A mock RTCStatsReport object.\n */\nMockRTCStatsReport.fromRTCStatsResponse = function fromRTCStatsResponse(statsResponse) {\n  var activeCandidatePairId;\n  var transportIds = new Map();\n  var statsMap = statsResponse.result().reduce(function (map, report) {\n    var id = report.id;\n    switch (report.type) {\n      case 'googCertificate':\n        map.set(id, createRTCCertificateStats(report));\n        break;\n      case 'datachannel':\n        map.set(id, createRTCDataChannelStats(report));\n        break;\n      case 'googCandidatePair':\n        if (getBoolean(report, 'googActiveConnection')) {\n          activeCandidatePairId = id;\n        }\n        map.set(id, createRTCIceCandidatePairStats(report));\n        break;\n      case 'localcandidate':\n        map.set(id, createRTCIceCandidateStats(report, false));\n        break;\n      case 'remotecandidate':\n        map.set(id, createRTCIceCandidateStats(report, true));\n        break;\n      case 'ssrc':\n        if (isPresent(report, 'packetsReceived')) {\n          map.set(\"rtp-\" + id, createRTCInboundRTPStreamStats(report));\n        } else {\n          map.set(\"rtp-\" + id, createRTCOutboundRTPStreamStats(report));\n        }\n        map.set(\"track-\" + id, createRTCMediaStreamTrackStats(report));\n        map.set(\"codec-\" + id, createRTCCodecStats(report));\n        break;\n      case 'googComponent':\n        var transportReport = createRTCTransportStats(report);\n        transportIds.set(transportReport.selectedCandidatePairId, id);\n        map.set(id, createRTCTransportStats(report));\n        break;\n    }\n    return map;\n  }, new Map());\n  if (activeCandidatePairId) {\n    var activeTransportId = transportIds.get(activeCandidatePairId);\n    if (activeTransportId) {\n      statsMap.get(activeTransportId).dtlsState = 'connected';\n    }\n  }\n  return new MockRTCStatsReport(statsMap);\n};\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCTransportStats}\n */\nfunction createRTCTransportStats(report) {\n  return {\n    type: 'transport',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    bytesSent: undefined,\n    bytesReceived: undefined,\n    rtcpTransportStatsId: undefined,\n    dtlsState: undefined,\n    selectedCandidatePairId: report.stat('selectedCandidatePairId'),\n    localCertificateId: report.stat('localCertificateId'),\n    remoteCertificateId: report.stat('remoteCertificateId')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCCodecStats}\n */\nfunction createRTCCodecStats(report) {\n  return {\n    type: 'codec',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    payloadType: undefined,\n    mimeType: report.stat('mediaType') + \"/\" + report.stat('googCodecName'),\n    clockRate: undefined,\n    channels: undefined,\n    sdpFmtpLine: undefined,\n    implementation: undefined\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCMediaStreamTrackStats}\n */\nfunction createRTCMediaStreamTrackStats(report) {\n  return {\n    type: 'track',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    trackIdentifier: report.stat('googTrackId'),\n    remoteSource: undefined,\n    ended: undefined,\n    kind: report.stat('mediaType'),\n    detached: undefined,\n    ssrcIds: undefined,\n    frameWidth: isPresent(report, 'googFrameWidthReceived') ? getInt(report, 'googFrameWidthReceived') : getInt(report, 'googFrameWidthSent'),\n    frameHeight: isPresent(report, 'googFrameHeightReceived') ? getInt(report, 'googFrameHeightReceived') : getInt(report, 'googFrameHeightSent'),\n    framesPerSecond: undefined,\n    framesSent: getInt(report, 'framesEncoded'),\n    framesReceived: undefined,\n    framesDecoded: getInt(report, 'framesDecoded'),\n    framesDropped: undefined,\n    framesCorrupted: undefined,\n    partialFramesLost: undefined,\n    fullFramesLost: undefined,\n    audioLevel: isPresent(report, 'audioOutputLevel') ? getInt(report, 'audioOutputLevel') / OLD_MAX_VOLUME : (getInt(report, 'audioInputLevel') || 0) / OLD_MAX_VOLUME,\n    echoReturnLoss: getFloat(report, 'googEchoCancellationReturnLoss'),\n    echoReturnLossEnhancement: getFloat(report, 'googEchoCancellationReturnLossEnhancement')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isInbound - Whether to create an inbound stats object, or outbound.\n * @returns {RTCRTPStreamStats}\n */\nfunction createRTCRTPStreamStats(report, isInbound) {\n  return {\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    ssrc: report.stat('ssrc'),\n    associateStatsId: undefined,\n    isRemote: undefined,\n    mediaType: report.stat('mediaType'),\n    trackId: \"track-\" + report.id,\n    transportId: report.stat('transportId'),\n    codecId: \"codec-\" + report.id,\n    firCount: isInbound ? getInt(report, 'googFirsSent') : undefined,\n    pliCount: isInbound ? getInt(report, 'googPlisSent') : getInt(report, 'googPlisReceived'),\n    nackCount: isInbound ? getInt(report, 'googNacksSent') : getInt(report, 'googNacksReceived'),\n    sliCount: undefined,\n    qpSum: getInt(report, 'qpSum')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCInboundRTPStreamStats}\n */\nfunction createRTCInboundRTPStreamStats(report) {\n  var rtp = createRTCRTPStreamStats(report, true);\n  Object.assign(rtp, {\n    type: 'inbound-rtp',\n    packetsReceived: getInt(report, 'packetsReceived'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    packetsLost: getInt(report, 'packetsLost'),\n    jitter: convertMsToSeconds(report.stat('googJitterReceived')),\n    fractionLost: undefined,\n    roundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    packetsDiscarded: undefined,\n    packetsRepaired: undefined,\n    burstPacketsLost: undefined,\n    burstPacketsDiscarded: undefined,\n    burstLossCount: undefined,\n    burstDiscardCount: undefined,\n    burstLossRate: undefined,\n    burstDiscardRate: undefined,\n    gapLossRate: undefined,\n    gapDiscardRate: undefined,\n    framesDecoded: getInt(report, 'framesDecoded')\n  });\n  return rtp;\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCOutboundRTPStreamStats}\n */\nfunction createRTCOutboundRTPStreamStats(report) {\n  var rtp = createRTCRTPStreamStats(report, false);\n  Object.assign(rtp, {\n    type: 'outbound-rtp',\n    remoteTimestamp: undefined,\n    packetsSent: getInt(report, 'packetsSent'),\n    bytesSent: getInt(report, 'bytesSent'),\n    targetBitrate: undefined,\n    framesEncoded: getInt(report, 'framesEncoded')\n  });\n  return rtp;\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isRemote - Whether to create for a remote candidate, or local candidate.\n * @returns {RTCIceCandidateStats}\n */\nfunction createRTCIceCandidateStats(report, isRemote) {\n  return {\n    type: isRemote ? 'remote-candidate' : 'local-candidate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: undefined,\n    isRemote: isRemote,\n    ip: report.stat('ipAddress'),\n    port: getInt(report, 'portNumber'),\n    protocol: report.stat('transport'),\n    candidateType: translateCandidateType(report.stat('candidateType')),\n    priority: getFloat(report, 'priority'),\n    url: undefined,\n    relayProtocol: undefined,\n    deleted: undefined\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCandidatePairStats}\n */\nfunction createRTCIceCandidatePairStats(report) {\n  return {\n    type: 'candidate-pair',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: report.stat('googChannelId'),\n    localCandidateId: report.stat('localCandidateId'),\n    remoteCandidateId: report.stat('remoteCandidateId'),\n    state: undefined,\n    priority: undefined,\n    nominated: undefined,\n    writable: getBoolean(report, 'googWritable'),\n    readable: undefined,\n    bytesSent: getInt(report, 'bytesSent'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    lastPacketSentTimestamp: undefined,\n    lastPacketReceivedTimestamp: undefined,\n    totalRoundTripTime: undefined,\n    currentRoundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    availableOutgoingBitrate: undefined,\n    availableIncomingBitrate: undefined,\n    requestsReceived: getInt(report, 'requestsReceived'),\n    requestsSent: getInt(report, 'requestsSent'),\n    responsesReceived: getInt(report, 'responsesReceived'),\n    responsesSent: getInt(report, 'responsesSent'),\n    retransmissionsReceived: undefined,\n    retransmissionsSent: undefined,\n    consentRequestsSent: getInt(report, 'consentRequestsSent')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCertificateStats}\n */\nfunction createRTCCertificateStats(report) {\n  return {\n    type: 'certificate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    fingerprint: report.stat('googFingerprint'),\n    fingerprintAlgorithm: report.stat('googFingerprintAlgorithm'),\n    base64Certificate: report.stat('googDerBase64'),\n    issuerCertificateId: report.stat('googIssuerId')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCDataChannelStats}\n */\nfunction createRTCDataChannelStats(report) {\n  return {\n    type: 'data-channel',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    label: report.stat('label'),\n    protocol: report.stat('protocol'),\n    datachannelid: report.stat('datachannelid'),\n    transportId: report.stat('transportId'),\n    state: report.stat('state'),\n    messagesSent: undefined,\n    bytesSent: undefined,\n    messagesReceived: undefined,\n    bytesReceived: undefined\n  };\n}\n/**\n * @param {number} inMs - A time in milliseconds\n * @returns {number} The time in seconds\n */\nfunction convertMsToSeconds(inMs) {\n  return isNaN(inMs) || inMs === '' ? undefined : parseInt(inMs, 10) / 1000;\n}\n/**\n * @param {string} type - A type in the legacy format\n * @returns {string} The type adjusted to new standards for known naming changes\n */\nfunction translateCandidateType(type) {\n  switch (type) {\n    case 'peerreflexive':\n      return 'prflx';\n    case 'serverreflexive':\n      return 'srflx';\n    case 'host':\n    case 'relay':\n    default:\n      return type;\n  }\n}\nfunction getInt(report, statName) {\n  var stat = report.stat(statName);\n  return isPresent(report, statName) ? parseInt(stat, 10) : undefined;\n}\nfunction getFloat(report, statName) {\n  var stat = report.stat(statName);\n  return isPresent(report, statName) ? parseFloat(stat) : undefined;\n}\nfunction getBoolean(report, statName) {\n  var stat = report.stat(statName);\n  return isPresent(report, statName) ? stat === 'true' || stat === true : undefined;\n}\nfunction isPresent(report, statName) {\n  var stat = report.stat(statName);\n  return typeof stat !== 'undefined' && stat !== '';\n}\nmodule.exports = MockRTCStatsReport;","map":{"version":3,"names":["OLD_MAX_VOLUME","NativeRTCStatsReport","window","RTCStatsReport","undefined","MockRTCStatsReport","statsMap","self","Object","defineProperties","size","enumerable","get","_map","value","Symbol","iterator","prototype","create","constructor","forEach","key","args","_i","arguments","length","_a","apply","fromArray","array","reduce","map","rtcStats","set","id","Map","fromRTCStatsResponse","statsResponse","activeCandidatePairId","transportIds","result","report","type","createRTCCertificateStats","createRTCDataChannelStats","getBoolean","createRTCIceCandidatePairStats","createRTCIceCandidateStats","isPresent","createRTCInboundRTPStreamStats","createRTCOutboundRTPStreamStats","createRTCMediaStreamTrackStats","createRTCCodecStats","transportReport","createRTCTransportStats","selectedCandidatePairId","activeTransportId","dtlsState","timestamp","Date","parse","bytesSent","bytesReceived","rtcpTransportStatsId","stat","localCertificateId","remoteCertificateId","payloadType","mimeType","clockRate","channels","sdpFmtpLine","implementation","trackIdentifier","remoteSource","ended","kind","detached","ssrcIds","frameWidth","getInt","frameHeight","framesPerSecond","framesSent","framesReceived","framesDecoded","framesDropped","framesCorrupted","partialFramesLost","fullFramesLost","audioLevel","echoReturnLoss","getFloat","echoReturnLossEnhancement","createRTCRTPStreamStats","isInbound","ssrc","associateStatsId","isRemote","mediaType","trackId","transportId","codecId","firCount","pliCount","nackCount","sliCount","qpSum","rtp","assign","packetsReceived","packetsLost","jitter","convertMsToSeconds","fractionLost","roundTripTime","packetsDiscarded","packetsRepaired","burstPacketsLost","burstPacketsDiscarded","burstLossCount","burstDiscardCount","burstLossRate","burstDiscardRate","gapLossRate","gapDiscardRate","remoteTimestamp","packetsSent","targetBitrate","framesEncoded","ip","port","protocol","candidateType","translateCandidateType","priority","url","relayProtocol","deleted","localCandidateId","remoteCandidateId","state","nominated","writable","readable","lastPacketSentTimestamp","lastPacketReceivedTimestamp","totalRoundTripTime","currentRoundTripTime","availableOutgoingBitrate","availableIncomingBitrate","requestsReceived","requestsSent","responsesReceived","responsesSent","retransmissionsReceived","retransmissionsSent","consentRequestsSent","fingerprint","fingerprintAlgorithm","base64Certificate","issuerCertificateId","label","datachannelid","messagesSent","messagesReceived","inMs","isNaN","parseInt","statName","parseFloat","module","exports"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/twilio-client/lib/twilio/rtc/mockrtcstatsreport.js"],"sourcesContent":["/**\n * This file was imported from another project. If making changes to this file, please don't\n * make them here. Make them on the linked repo below, then copy back:\n * https://code.hq.twilio.com/client/MockRTCStatsReport\n */\n\n/* eslint-disable no-undefined */\n\n// The legacy max volume, which is the positive half of a signed short integer.\nconst OLD_MAX_VOLUME = 32767;\n\nconst NativeRTCStatsReport = typeof window !== 'undefined'\n  ? window.RTCStatsReport : undefined;\n\n/**\n * Create a MockRTCStatsReport wrapper around a Map of RTCStats objects. If RTCStatsReport is available\n *   natively, it will be inherited so that instanceof checks pass.\n * @constructor\n * @extends RTCStatsReport\n * @param {Map<string, RTCStats>} statsMap - A Map of RTCStats objects to wrap\n *   with a MockRTCStatsReport object.\n */\nfunction MockRTCStatsReport(statsMap) {\n  if (!(this instanceof MockRTCStatsReport)) {\n    return new MockRTCStatsReport(statsMap);\n  }\n\n  const self = this;\n  Object.defineProperties(this, {\n    size: {\n      enumerable: true,\n      get() {\n        return self._map.size;\n      }\n    },\n    _map: { value: statsMap }\n  });\n\n  this[Symbol.iterator] = statsMap[Symbol.iterator];\n}\n\n// If RTCStatsReport is available natively, inherit it. Keep our constructor.\nif (NativeRTCStatsReport) {\n  MockRTCStatsReport.prototype = Object.create(NativeRTCStatsReport.prototype);\n  MockRTCStatsReport.prototype.constructor = MockRTCStatsReport;\n}\n\n// Map the Map-like read methods to the underlying Map\n['entries', 'forEach', 'get', 'has', 'keys', 'values'].forEach(key => {\n  MockRTCStatsReport.prototype[key] = function(...args) {\n    return this._map[key](...args);\n  };\n});\n\n/**\n * Convert an array of RTCStats objects into a mock RTCStatsReport object.\n * @param {Array<RTCStats>}\n * @return {MockRTCStatsReport}\n */\nMockRTCStatsReport.fromArray = function fromArray(array) {\n  return new MockRTCStatsReport(array.reduce((map, rtcStats) => {\n    map.set(rtcStats.id, rtcStats);\n    return map;\n  }, new Map()));\n};\n\n/**\n * Convert a legacy RTCStatsResponse object into a mock RTCStatsReport object.\n * @param {RTCStatsResponse} statsResponse - An RTCStatsResponse object returned by the\n *   legacy getStats(callback) method in Chrome.\n * @return {MockRTCStatsReport} A mock RTCStatsReport object.\n */\nMockRTCStatsReport.fromRTCStatsResponse = function fromRTCStatsResponse(statsResponse) {\n  let activeCandidatePairId;\n  const transportIds = new Map();\n\n  const statsMap = statsResponse.result().reduce((map, report) => {\n    const id = report.id;\n    switch (report.type) {\n      case 'googCertificate':\n        map.set(id, createRTCCertificateStats(report));\n        break;\n      case 'datachannel':\n        map.set(id, createRTCDataChannelStats(report));\n        break;\n      case 'googCandidatePair':\n        if (getBoolean(report, 'googActiveConnection')) {\n          activeCandidatePairId = id;\n        }\n\n        map.set(id, createRTCIceCandidatePairStats(report));\n        break;\n      case 'localcandidate':\n        map.set(id, createRTCIceCandidateStats(report, false));\n        break;\n      case 'remotecandidate':\n        map.set(id, createRTCIceCandidateStats(report, true));\n        break;\n      case 'ssrc':\n        if (isPresent(report, 'packetsReceived')) {\n          map.set(`rtp-${id}`, createRTCInboundRTPStreamStats(report));\n        } else {\n          map.set(`rtp-${id}`, createRTCOutboundRTPStreamStats(report));\n        }\n\n        map.set(`track-${id}`, createRTCMediaStreamTrackStats(report));\n        map.set(`codec-${id}`, createRTCCodecStats(report));\n        break;\n      case 'googComponent':\n        const transportReport = createRTCTransportStats(report);\n        transportIds.set(transportReport.selectedCandidatePairId, id);\n        map.set(id, createRTCTransportStats(report));\n        break;\n    }\n\n    return map;\n  }, new Map());\n\n  if (activeCandidatePairId) {\n    const activeTransportId = transportIds.get(activeCandidatePairId);\n    if (activeTransportId) {\n      statsMap.get(activeTransportId).dtlsState = 'connected';\n    }\n  }\n\n  return new MockRTCStatsReport(statsMap);\n};\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCTransportStats}\n */\nfunction createRTCTransportStats(report) {\n  return {\n    type: 'transport',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    bytesSent: undefined,\n    bytesReceived: undefined,\n    rtcpTransportStatsId: undefined,\n    dtlsState: undefined,\n    selectedCandidatePairId: report.stat('selectedCandidatePairId'),\n    localCertificateId: report.stat('localCertificateId'),\n    remoteCertificateId: report.stat('remoteCertificateId')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCCodecStats}\n */\nfunction createRTCCodecStats(report) {\n  return {\n    type: 'codec',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    payloadType: undefined,\n    mimeType: `${report.stat('mediaType')}/${report.stat('googCodecName')}`,\n    clockRate: undefined,\n    channels: undefined,\n    sdpFmtpLine: undefined,\n    implementation: undefined\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCMediaStreamTrackStats}\n */\nfunction createRTCMediaStreamTrackStats(report) {\n  return {\n    type: 'track',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    trackIdentifier: report.stat('googTrackId'),\n    remoteSource: undefined,\n    ended: undefined,\n    kind: report.stat('mediaType'),\n    detached: undefined,\n    ssrcIds: undefined,\n    frameWidth: isPresent(report, 'googFrameWidthReceived')\n      ? getInt(report, 'googFrameWidthReceived')\n      : getInt(report, 'googFrameWidthSent'),\n    frameHeight: isPresent(report, 'googFrameHeightReceived')\n      ? getInt(report, 'googFrameHeightReceived')\n      : getInt(report, 'googFrameHeightSent'),\n    framesPerSecond: undefined,\n    framesSent: getInt(report, 'framesEncoded'),\n    framesReceived: undefined,\n    framesDecoded: getInt(report, 'framesDecoded'),\n    framesDropped: undefined,\n    framesCorrupted: undefined,\n    partialFramesLost: undefined,\n    fullFramesLost: undefined,\n    audioLevel: isPresent(report, 'audioOutputLevel')\n      ? getInt(report, 'audioOutputLevel') / OLD_MAX_VOLUME\n      : (getInt(report, 'audioInputLevel') || 0) / OLD_MAX_VOLUME,\n    echoReturnLoss: getFloat(report, 'googEchoCancellationReturnLoss'),\n    echoReturnLossEnhancement: getFloat(report, 'googEchoCancellationReturnLossEnhancement')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isInbound - Whether to create an inbound stats object, or outbound.\n * @returns {RTCRTPStreamStats}\n */\nfunction createRTCRTPStreamStats(report, isInbound) {\n  return {\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    ssrc: report.stat('ssrc'),\n    associateStatsId: undefined,\n    isRemote: undefined,\n    mediaType: report.stat('mediaType'),\n    trackId: `track-${report.id}`,\n    transportId: report.stat('transportId'),\n    codecId: `codec-${report.id}`,\n    firCount: isInbound\n      ? getInt(report, 'googFirsSent')\n      : undefined,\n    pliCount: isInbound\n      ? getInt(report, 'googPlisSent')\n      : getInt(report, 'googPlisReceived'),\n    nackCount: isInbound\n      ? getInt(report, 'googNacksSent')\n      : getInt(report, 'googNacksReceived'),\n    sliCount: undefined,\n    qpSum: getInt(report, 'qpSum')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCInboundRTPStreamStats}\n */\nfunction createRTCInboundRTPStreamStats(report) {\n  const rtp = createRTCRTPStreamStats(report, true);\n\n  Object.assign(rtp, {\n    type: 'inbound-rtp',\n    packetsReceived: getInt(report, 'packetsReceived'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    packetsLost: getInt(report, 'packetsLost'),\n    jitter: convertMsToSeconds(report.stat('googJitterReceived')),\n    fractionLost: undefined,\n    roundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    packetsDiscarded: undefined,\n    packetsRepaired: undefined,\n    burstPacketsLost: undefined,\n    burstPacketsDiscarded: undefined,\n    burstLossCount: undefined,\n    burstDiscardCount: undefined,\n    burstLossRate: undefined,\n    burstDiscardRate: undefined,\n    gapLossRate: undefined,\n    gapDiscardRate: undefined,\n    framesDecoded: getInt(report, 'framesDecoded')\n  });\n\n  return rtp;\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCOutboundRTPStreamStats}\n */\nfunction createRTCOutboundRTPStreamStats(report) {\n  const rtp = createRTCRTPStreamStats(report, false);\n\n  Object.assign(rtp, {\n    type: 'outbound-rtp',\n    remoteTimestamp: undefined,\n    packetsSent: getInt(report, 'packetsSent'),\n    bytesSent: getInt(report, 'bytesSent'),\n    targetBitrate: undefined,\n    framesEncoded: getInt(report, 'framesEncoded')\n  });\n\n  return rtp;\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isRemote - Whether to create for a remote candidate, or local candidate.\n * @returns {RTCIceCandidateStats}\n */\nfunction createRTCIceCandidateStats(report, isRemote) {\n  return {\n    type: isRemote\n      ? 'remote-candidate'\n      : 'local-candidate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: undefined,\n    isRemote,\n    ip: report.stat('ipAddress'),\n    port: getInt(report, 'portNumber'),\n    protocol: report.stat('transport'),\n    candidateType: translateCandidateType(report.stat('candidateType')),\n    priority: getFloat(report, 'priority'),\n    url: undefined,\n    relayProtocol: undefined,\n    deleted: undefined\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCandidatePairStats}\n */\nfunction createRTCIceCandidatePairStats(report) {\n  return {\n    type: 'candidate-pair',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: report.stat('googChannelId'),\n    localCandidateId: report.stat('localCandidateId'),\n    remoteCandidateId: report.stat('remoteCandidateId'),\n    state: undefined,\n    priority: undefined,\n    nominated: undefined,\n    writable: getBoolean(report, 'googWritable'),\n    readable: undefined,\n    bytesSent: getInt(report, 'bytesSent'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    lastPacketSentTimestamp: undefined,\n    lastPacketReceivedTimestamp: undefined,\n    totalRoundTripTime: undefined,\n    currentRoundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    availableOutgoingBitrate: undefined,\n    availableIncomingBitrate: undefined,\n    requestsReceived: getInt(report, 'requestsReceived'),\n    requestsSent: getInt(report, 'requestsSent'),\n    responsesReceived: getInt(report, 'responsesReceived'),\n    responsesSent: getInt(report, 'responsesSent'),\n    retransmissionsReceived: undefined,\n    retransmissionsSent: undefined,\n    consentRequestsSent: getInt(report, 'consentRequestsSent')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCertificateStats}\n */\nfunction createRTCCertificateStats(report) {\n  return {\n    type: 'certificate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    fingerprint: report.stat('googFingerprint'),\n    fingerprintAlgorithm: report.stat('googFingerprintAlgorithm'),\n    base64Certificate: report.stat('googDerBase64'),\n    issuerCertificateId: report.stat('googIssuerId')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCDataChannelStats}\n */\nfunction createRTCDataChannelStats(report) {\n  return {\n    type: 'data-channel',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    label: report.stat('label'),\n    protocol: report.stat('protocol'),\n    datachannelid: report.stat('datachannelid'),\n    transportId: report.stat('transportId'),\n    state: report.stat('state'),\n    messagesSent: undefined,\n    bytesSent: undefined,\n    messagesReceived: undefined,\n    bytesReceived: undefined\n  };\n}\n\n/**\n * @param {number} inMs - A time in milliseconds\n * @returns {number} The time in seconds\n */\nfunction convertMsToSeconds(inMs) {\n  return isNaN(inMs) || inMs === ''\n    ? undefined\n    : parseInt(inMs, 10) / 1000;\n}\n\n/**\n * @param {string} type - A type in the legacy format\n * @returns {string} The type adjusted to new standards for known naming changes\n */\nfunction translateCandidateType(type) {\n  switch (type) {\n    case 'peerreflexive':\n      return 'prflx';\n    case 'serverreflexive':\n      return 'srflx';\n    case 'host':\n    case 'relay':\n    default:\n      return type;\n  }\n}\n\nfunction getInt(report, statName) {\n  const stat = report.stat(statName);\n  return isPresent(report, statName)\n    ? parseInt(stat, 10)\n    : undefined;\n}\n\nfunction getFloat(report, statName) {\n  const stat = report.stat(statName);\n  return isPresent(report, statName)\n    ? parseFloat(stat)\n    : undefined;\n}\n\nfunction getBoolean(report, statName) {\n  const stat = report.stat(statName);\n  return isPresent(report, statName)\n    ? (stat === 'true' || stat === true)\n    : undefined;\n}\n\nfunction isPresent(report, statName) {\n  const stat = report.stat(statName);\n  return typeof stat !== 'undefined' && stat !== '';\n}\n\nmodule.exports = MockRTCStatsReport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}