{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @internalapi\n */\nvar events_1 = require(\"events\");\nvar connection_1 = require(\"./twilio/connection\");\nexports.Connection = connection_1.default;\nvar device_1 = require(\"./twilio/device\");\nexports.Device = device_1.default;\nvar preflight_1 = require(\"./twilio/preflight/preflight\");\nexports.PreflightTest = preflight_1.PreflightTest;\nvar PStream = require('./twilio/pstream');\nexports.PStream = PStream;\nvar instance;\nObject.defineProperty(device_1.default, 'instance', {\n  get: function () {\n    return instance;\n  },\n  set: function (_instance) {\n    if (_instance === null) {\n      instance = null;\n    }\n  }\n});\ndevice_1.default.destroy = function destroySingleton() {\n  if (instance) {\n    instance.destroy();\n  }\n  bindSingleton();\n};\n/**\n * Create a new Device instance and bind its functions to the Device static. This maintains\n * backwards compatibility for the Device singleton behavior and will be removed in the next\n * breaking release.\n */\nfunction bindSingleton() {\n  instance = new device_1.default();\n  Object.getOwnPropertyNames(device_1.default.prototype).concat(Object.getOwnPropertyNames(events_1.EventEmitter.prototype)).filter(function (prop) {\n    return typeof device_1.default.prototype[prop] === 'function';\n  }).filter(function (prop) {\n    return prop !== 'destroy';\n  }).forEach(function (prop) {\n    device_1.default[prop] = device_1.default.prototype[prop].bind(instance);\n  });\n}\nbindSingleton();\nObject.getOwnPropertyNames(instance).filter(function (prop) {\n  return typeof device_1.default.prototype[prop] !== 'function';\n}).forEach(function (prop) {\n  Object.defineProperty(device_1.default, prop, {\n    get: function () {\n      if (instance) {\n        return instance[prop];\n      }\n    },\n    set: function (_prop) {\n      if (instance) {\n        instance[prop] = _prop;\n      }\n    }\n  });\n});","map":{"version":3,"names":["events_1","require","connection_1","exports","Connection","default","device_1","Device","preflight_1","PreflightTest","PStream","instance","Object","defineProperty","get","set","_instance","destroy","destroySingleton","bindSingleton","getOwnPropertyNames","prototype","concat","EventEmitter","filter","prop","forEach","bind","_prop"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/twilio-client/lib/twilio.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @internalapi\n */\nimport { EventEmitter } from 'events';\nimport Connection from './twilio/connection';\nimport Device from './twilio/device';\nimport { PreflightTest } from './twilio/preflight/preflight' ;\n\nconst PStream = require('./twilio/pstream');\n\nlet instance: Device | null | undefined;\nObject.defineProperty(Device, 'instance', {\n  get: () => instance,\n  set: (_instance) => {\n    if (_instance === null) {\n      instance = null;\n    }\n  },\n});\n\n(Device as any).destroy = function destroySingleton() {\n  if (instance) {\n    instance.destroy();\n  }\n  bindSingleton();\n};\n\n/**\n * Create a new Device instance and bind its functions to the Device static. This maintains\n * backwards compatibility for the Device singleton behavior and will be removed in the next\n * breaking release.\n */\nfunction bindSingleton() {\n  instance = new Device();\n\n  Object.getOwnPropertyNames(Device.prototype)\n    .concat(Object.getOwnPropertyNames(EventEmitter.prototype))\n    .filter((prop: keyof Device) => {\n      return typeof Device.prototype[prop] === 'function';\n    })\n    .filter(prop => prop !== 'destroy')\n    .forEach(prop => {\n      (Device as any)[prop] = (Device.prototype as any)[prop].bind(instance);\n    });\n}\n\nbindSingleton();\n\nObject.getOwnPropertyNames(instance)\n  .filter((prop: keyof Device) => typeof Device.prototype[prop] !== 'function')\n  .forEach((prop: keyof Device) => {\n    Object.defineProperty(Device, prop, {\n      get: () => {\n        if (instance) {\n          return instance[prop];\n        }\n      },\n      set: (_prop) => {\n        if (instance) {\n          (instance as any)[prop] = _prop;\n        }\n      },\n    });\n  });\n\nexport { Connection, Device, PreflightTest, PStream };\n"],"mappings":";;;;;AAAA;;;;AAIA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AA6DSE,OAAA,CAAAC,UAAA,GA7DFF,YAAA,CAAAG,OAAU;AACjB,IAAAC,QAAA,GAAAL,OAAA;AA4DqBE,OAAA,CAAAI,MAAA,GA5DdD,QAAA,CAAAD,OAAM;AACb,IAAAG,WAAA,GAAAP,OAAA;AA2D6BE,OAAA,CAAAM,aAAA,GA3DpBD,WAAA,CAAAC,aAAa;AAEtB,IAAMC,OAAO,GAAGT,OAAO,CAAC,kBAAkB,CAAC;AAyDCE,OAAA,CAAAO,OAAA,GAAAA,OAAA;AAvD5C,IAAIC,QAAmC;AACvCC,MAAM,CAACC,cAAc,CAACP,QAAA,CAAAD,OAAM,EAAE,UAAU,EAAE;EACxCS,GAAG,EAAE,SAAAA,CAAA;IAAM,OAAAH,QAAQ;EAAR,CAAQ;EACnBI,GAAG,EAAE,SAAAA,CAACC,SAAS;IACb,IAAIA,SAAS,KAAK,IAAI,EAAE;MACtBL,QAAQ,GAAG,IAAI;;EAEnB;CACD,CAAC;AAEDL,QAAA,CAAAD,OAAc,CAACY,OAAO,GAAG,SAASC,gBAAgBA,CAAA;EACjD,IAAIP,QAAQ,EAAE;IACZA,QAAQ,CAACM,OAAO,EAAE;;EAEpBE,aAAa,EAAE;AACjB,CAAC;AAED;;;;;AAKA,SAASA,aAAaA,CAAA;EACpBR,QAAQ,GAAG,IAAIL,QAAA,CAAAD,OAAM,EAAE;EAEvBO,MAAM,CAACQ,mBAAmB,CAACd,QAAA,CAAAD,OAAM,CAACgB,SAAS,CAAC,CACzCC,MAAM,CAACV,MAAM,CAACQ,mBAAmB,CAACpB,QAAA,CAAAuB,YAAY,CAACF,SAAS,CAAC,CAAC,CAC1DG,MAAM,CAAC,UAACC,IAAkB;IACzB,OAAO,OAAOnB,QAAA,CAAAD,OAAM,CAACgB,SAAS,CAACI,IAAI,CAAC,KAAK,UAAU;EACrD,CAAC,CAAC,CACDD,MAAM,CAAC,UAAAC,IAAI;IAAI,OAAAA,IAAI,KAAK,SAAS;EAAlB,CAAkB,CAAC,CAClCC,OAAO,CAAC,UAAAD,IAAI;IACVnB,QAAA,CAAAD,OAAc,CAACoB,IAAI,CAAC,GAAInB,QAAA,CAAAD,OAAM,CAACgB,SAAiB,CAACI,IAAI,CAAC,CAACE,IAAI,CAAChB,QAAQ,CAAC;EACxE,CAAC,CAAC;AACN;AAEAQ,aAAa,EAAE;AAEfP,MAAM,CAACQ,mBAAmB,CAACT,QAAQ,CAAC,CACjCa,MAAM,CAAC,UAACC,IAAkB;EAAK,cAAOnB,QAAA,CAAAD,OAAM,CAACgB,SAAS,CAACI,IAAI,CAAC,KAAK,UAAU;AAA5C,CAA4C,CAAC,CAC5EC,OAAO,CAAC,UAACD,IAAkB;EAC1Bb,MAAM,CAACC,cAAc,CAACP,QAAA,CAAAD,OAAM,EAAEoB,IAAI,EAAE;IAClCX,GAAG,EAAE,SAAAA,CAAA;MACH,IAAIH,QAAQ,EAAE;QACZ,OAAOA,QAAQ,CAACc,IAAI,CAAC;;IAEzB,CAAC;IACDV,GAAG,EAAE,SAAAA,CAACa,KAAK;MACT,IAAIjB,QAAQ,EAAE;QACXA,QAAgB,CAACc,IAAI,CAAC,GAAGG,KAAK;;IAEnC;GACD,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}