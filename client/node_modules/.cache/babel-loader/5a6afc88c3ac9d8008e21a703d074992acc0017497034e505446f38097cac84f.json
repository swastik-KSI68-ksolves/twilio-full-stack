{"ast":null,"code":"'use strict';\n\nvar XHR = require('xmlhttprequest').XMLHttpRequest;\nfunction request(method, params, callback) {\n  var options = {};\n  options.XMLHttpRequest = options.XMLHttpRequest || XHR;\n  var xhr = new options.XMLHttpRequest();\n  xhr.open(method, params.url, true);\n  xhr.onreadystatechange = function onreadystatechange() {\n    if (xhr.readyState !== 4) {\n      return;\n    }\n    if (200 <= xhr.status && xhr.status < 300) {\n      callback(null, xhr.responseText);\n      return;\n    }\n    callback(new Error(xhr.responseText));\n  };\n  for (var headerName in params.headers) {\n    xhr.setRequestHeader(headerName, params.headers[headerName]);\n  }\n  xhr.send(JSON.stringify(params.body));\n}\n/**\n * Use XMLHttpRequest to get a network resource.\n * @param {String} method - HTTP Method\n * @param {Object} params - Request parameters\n * @param {String} params.url - URL of the resource\n * @param {Array}  params.headers - An array of headers to pass [{ headerName : headerBody }]\n * @param {Object} params.body - A JSON body to send to the resource\n * @returns {response}\n **/\nvar Request = request;\n\n/**\n * Sugar function for request('GET', params, callback);\n * @param {Object} params - Request parameters\n * @param {Request~get} callback - The callback that handles the response.\n */\nRequest.get = function get(params, callback) {\n  return new this('GET', params, callback);\n};\n\n/**\n * Sugar function for request('POST', params, callback);\n * @param {Object} params - Request parameters\n * @param {Request~post} callback - The callback that handles the response.\n */\nRequest.post = function post(params, callback) {\n  return new this('POST', params, callback);\n};\nmodule.exports = Request;","map":{"version":3,"names":["XHR","require","XMLHttpRequest","request","method","params","callback","options","xhr","open","url","onreadystatechange","readyState","status","responseText","Error","headerName","headers","setRequestHeader","send","JSON","stringify","body","Request","get","post","module","exports"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/twilio-client/es5/twilio/request.js"],"sourcesContent":["'use strict';\n\nvar XHR = require('xmlhttprequest').XMLHttpRequest;\n\nfunction request(method, params, callback) {\n  var options = {};\n  options.XMLHttpRequest = options.XMLHttpRequest || XHR;\n  var xhr = new options.XMLHttpRequest();\n\n  xhr.open(method, params.url, true);\n  xhr.onreadystatechange = function onreadystatechange() {\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    if (200 <= xhr.status && xhr.status < 300) {\n      callback(null, xhr.responseText);\n      return;\n    }\n\n    callback(new Error(xhr.responseText));\n  };\n\n  for (var headerName in params.headers) {\n    xhr.setRequestHeader(headerName, params.headers[headerName]);\n  }\n\n  xhr.send(JSON.stringify(params.body));\n}\n/**\n * Use XMLHttpRequest to get a network resource.\n * @param {String} method - HTTP Method\n * @param {Object} params - Request parameters\n * @param {String} params.url - URL of the resource\n * @param {Array}  params.headers - An array of headers to pass [{ headerName : headerBody }]\n * @param {Object} params.body - A JSON body to send to the resource\n * @returns {response}\n **/\nvar Request = request;\n\n/**\n * Sugar function for request('GET', params, callback);\n * @param {Object} params - Request parameters\n * @param {Request~get} callback - The callback that handles the response.\n */\nRequest.get = function get(params, callback) {\n  return new this('GET', params, callback);\n};\n\n/**\n * Sugar function for request('POST', params, callback);\n * @param {Object} params - Request parameters\n * @param {Request~post} callback - The callback that handles the response.\n */\nRequest.post = function post(params, callback) {\n  return new this('POST', params, callback);\n};\n\nmodule.exports = Request;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,gBAAgB,CAAC,CAACC,cAAc;AAElD,SAASC,OAAOA,CAACC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,EAAE;EACzC,IAAIC,OAAO,GAAG,CAAC,CAAC;EAChBA,OAAO,CAACL,cAAc,GAAGK,OAAO,CAACL,cAAc,IAAIF,GAAG;EACtD,IAAIQ,GAAG,GAAG,IAAID,OAAO,CAACL,cAAc,CAAC,CAAC;EAEtCM,GAAG,CAACC,IAAI,CAACL,MAAM,EAAEC,MAAM,CAACK,GAAG,EAAE,IAAI,CAAC;EAClCF,GAAG,CAACG,kBAAkB,GAAG,SAASA,kBAAkBA,CAAA,EAAG;IACrD,IAAIH,GAAG,CAACI,UAAU,KAAK,CAAC,EAAE;MACxB;IACF;IAEA,IAAI,GAAG,IAAIJ,GAAG,CAACK,MAAM,IAAIL,GAAG,CAACK,MAAM,GAAG,GAAG,EAAE;MACzCP,QAAQ,CAAC,IAAI,EAAEE,GAAG,CAACM,YAAY,CAAC;MAChC;IACF;IAEAR,QAAQ,CAAC,IAAIS,KAAK,CAACP,GAAG,CAACM,YAAY,CAAC,CAAC;EACvC,CAAC;EAED,KAAK,IAAIE,UAAU,IAAIX,MAAM,CAACY,OAAO,EAAE;IACrCT,GAAG,CAACU,gBAAgB,CAACF,UAAU,EAAEX,MAAM,CAACY,OAAO,CAACD,UAAU,CAAC,CAAC;EAC9D;EAEAR,GAAG,CAACW,IAAI,CAACC,IAAI,CAACC,SAAS,CAAChB,MAAM,CAACiB,IAAI,CAAC,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAGpB,OAAO;;AAErB;AACA;AACA;AACA;AACA;AACAoB,OAAO,CAACC,GAAG,GAAG,SAASA,GAAGA,CAACnB,MAAM,EAAEC,QAAQ,EAAE;EAC3C,OAAO,IAAI,IAAI,CAAC,KAAK,EAAED,MAAM,EAAEC,QAAQ,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAiB,OAAO,CAACE,IAAI,GAAG,SAASA,IAAIA,CAACpB,MAAM,EAAEC,QAAQ,EAAE;EAC7C,OAAO,IAAI,IAAI,CAAC,MAAM,EAAED,MAAM,EAAEC,QAAQ,CAAC;AAC3C,CAAC;AAEDoB,MAAM,CAACC,OAAO,GAAGJ,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}