{"ast":null,"code":"\"use strict\";\n\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRegionShortcode = exports.getChunderURIs = exports.createSignalingEndpointURL = exports.createEventGatewayURI = exports.defaultEdge = exports.regionToEdge = exports.regionShortcodes = exports.Region = exports.Edge = void 0;\n/**\n * @packageDocumentation\n * @module Voice\n * This module describes valid and deprecated regions.\n */\nvar errors_1 = require(\"./errors\");\n/**\n * Valid edges.\n * @private\n */\nvar Edge;\n(function (Edge) {\n  /**\n   * Public edges\n   */\n  Edge[\"Sydney\"] = \"sydney\";\n  Edge[\"SaoPaulo\"] = \"sao-paulo\";\n  Edge[\"Dublin\"] = \"dublin\";\n  Edge[\"Frankfurt\"] = \"frankfurt\";\n  Edge[\"Tokyo\"] = \"tokyo\";\n  Edge[\"Singapore\"] = \"singapore\";\n  Edge[\"Ashburn\"] = \"ashburn\";\n  Edge[\"Umatilla\"] = \"umatilla\";\n  Edge[\"Roaming\"] = \"roaming\";\n  /**\n   * Interconnect edges\n   */\n  Edge[\"AshburnIx\"] = \"ashburn-ix\";\n  Edge[\"SanJoseIx\"] = \"san-jose-ix\";\n  Edge[\"LondonIx\"] = \"london-ix\";\n  Edge[\"FrankfurtIx\"] = \"frankfurt-ix\";\n  Edge[\"SingaporeIx\"] = \"singapore-ix\";\n  Edge[\"SydneyIx\"] = \"sydney-ix\";\n  Edge[\"TokyoIx\"] = \"tokyo-ix\";\n})(Edge = exports.Edge || (exports.Edge = {}));\n/**\n * Valid current regions.\n *\n * @deprecated\n *\n * CLIENT-6831\n * This is no longer used or updated for checking validity of regions in the\n * SDK. We now allow any string to be passed for region. Invalid regions won't\n * be able to connect, and won't throw an exception.\n *\n * CLIENT-7519\n * This is used again to temporarily convert edge values to regions as part of\n * Phase 1 Regional. This is still considered deprecated.\n *\n * @private\n */\nvar Region;\n(function (Region) {\n  Region[\"Au1\"] = \"au1\";\n  Region[\"Au1Ix\"] = \"au1-ix\";\n  Region[\"Br1\"] = \"br1\";\n  Region[\"De1\"] = \"de1\";\n  Region[\"De1Ix\"] = \"de1-ix\";\n  Region[\"Gll\"] = \"gll\";\n  Region[\"Ie1\"] = \"ie1\";\n  Region[\"Ie1Ix\"] = \"ie1-ix\";\n  Region[\"Ie1Tnx\"] = \"ie1-tnx\";\n  Region[\"Jp1\"] = \"jp1\";\n  Region[\"Jp1Ix\"] = \"jp1-ix\";\n  Region[\"Sg1\"] = \"sg1\";\n  Region[\"Sg1Ix\"] = \"sg1-ix\";\n  Region[\"Sg1Tnx\"] = \"sg1-tnx\";\n  Region[\"Us1\"] = \"us1\";\n  Region[\"Us1Ix\"] = \"us1-ix\";\n  Region[\"Us1Tnx\"] = \"us1-tnx\";\n  Region[\"Us2\"] = \"us2\";\n  Region[\"Us2Ix\"] = \"us2-ix\";\n  Region[\"Us2Tnx\"] = \"us2-tnx\";\n})(Region = exports.Region || (exports.Region = {}));\n/**\n * Region shortcodes. Maps the full region name from AWS to the Twilio shortcode.\n * @private\n */\nexports.regionShortcodes = {\n  ASIAPAC_SINGAPORE: Region.Sg1,\n  ASIAPAC_SYDNEY: Region.Au1,\n  ASIAPAC_TOKYO: Region.Jp1,\n  EU_FRANKFURT: Region.De1,\n  EU_IRELAND: Region.Ie1,\n  SOUTH_AMERICA_SAO_PAULO: Region.Br1,\n  US_EAST_VIRGINIA: Region.Us1,\n  US_WEST_OREGON: Region.Us2\n};\n/**\n * Region to edge mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexports.regionToEdge = (_a = {}, _a[Region.Au1] = Edge.Sydney, _a[Region.Br1] = Edge.SaoPaulo, _a[Region.Ie1] = Edge.Dublin, _a[Region.De1] = Edge.Frankfurt, _a[Region.Jp1] = Edge.Tokyo, _a[Region.Sg1] = Edge.Singapore, _a[Region.Us1] = Edge.Ashburn, _a[Region.Us2] = Edge.Umatilla, _a[Region.Gll] = Edge.Roaming,\n/**\n * Interconnect edges\n */\n_a[Region.Us1Ix] = Edge.AshburnIx, _a[Region.Us2Ix] = Edge.SanJoseIx, _a[Region.Ie1Ix] = Edge.LondonIx, _a[Region.De1Ix] = Edge.FrankfurtIx, _a[Region.Sg1Ix] = Edge.SingaporeIx, _a[Region.Au1Ix] = Edge.SydneyIx, _a[Region.Jp1Ix] = Edge.TokyoIx,\n/**\n * Tnx regions\n */\n_a[Region.Us1Tnx] = Edge.AshburnIx, _a[Region.Us2Tnx] = Edge.AshburnIx, _a[Region.Ie1Tnx] = Edge.LondonIx, _a[Region.Sg1Tnx] = Edge.SingaporeIx, _a);\n/**\n * The default edge to connect to and create a chunder uri from, if the edge\n * parameter is not specified during setup in `Device`.\n * @constant\n */\nexports.defaultEdge = Edge.Roaming;\n/**\n * The default event gateway URI to publish to.\n * @constant\n * @private\n */\nvar defaultEventGatewayURI = 'eventgw.twilio.com';\n/**\n * String template for an edge chunder URI\n * @param edge - The edge.\n */\nfunction createChunderEdgeURI(edge) {\n  return \"voice-js.\" + edge + \".twilio.com\";\n}\n/**\n * String template for a region insights URI\n * @param region - The region.\n */\nfunction createEventGatewayURI(region) {\n  return region ? \"eventgw.\" + region + \".twilio.com\" : defaultEventGatewayURI;\n}\nexports.createEventGatewayURI = createEventGatewayURI;\n/**\n * Create a signaling endpoint URL to connect a websocket to from a chunder URI.\n * @param uri the chunder URI to create a signaling endpoint URL for\n */\nfunction createSignalingEndpointURL(uri) {\n  return \"wss://\" + uri + \"/signal\";\n}\nexports.createSignalingEndpointURL = createSignalingEndpointURL;\n/**\n * Get the URI associated with the passed edge.\n * @private\n * @param edge - A string or an array of edge values\n * @returns An array of chunder URIs\n */\nfunction getChunderURIs(edge) {\n  if (!!edge && typeof edge !== 'string' && !Array.isArray(edge)) {\n    throw new errors_1.InvalidArgumentError('If `edge` is provided, it must be of type `string` or an array of strings.');\n  }\n  var uris;\n  if (edge) {\n    var edgeParams = Array.isArray(edge) ? edge : [edge];\n    uris = edgeParams.map(function (param) {\n      return createChunderEdgeURI(param);\n    });\n  } else {\n    uris = [createChunderEdgeURI(exports.defaultEdge)];\n  }\n  return uris;\n}\nexports.getChunderURIs = getChunderURIs;\n/**\n * Get the region shortcode by its full AWS region string.\n *\n * @private\n * @param region - The region's full AWS string.\n */\nfunction getRegionShortcode(region) {\n  return exports.regionShortcodes[region] || null;\n}\nexports.getRegionShortcode = getRegionShortcode;","map":{"version":3,"names":["errors_1","require","Edge","exports","Region","regionShortcodes","ASIAPAC_SINGAPORE","Sg1","ASIAPAC_SYDNEY","Au1","ASIAPAC_TOKYO","Jp1","EU_FRANKFURT","De1","EU_IRELAND","Ie1","SOUTH_AMERICA_SAO_PAULO","Br1","US_EAST_VIRGINIA","Us1","US_WEST_OREGON","Us2","regionToEdge","_a","Sydney","SaoPaulo","Dublin","Frankfurt","Tokyo","Singapore","Ashburn","Umatilla","Gll","Roaming","Us1Ix","AshburnIx","Us2Ix","SanJoseIx","Ie1Ix","LondonIx","De1Ix","FrankfurtIx","Sg1Ix","SingaporeIx","Au1Ix","SydneyIx","Jp1Ix","TokyoIx","Us1Tnx","Us2Tnx","Ie1Tnx","Sg1Tnx","defaultEdge","defaultEventGatewayURI","createChunderEdgeURI","edge","createEventGatewayURI","region","createSignalingEndpointURL","uri","getChunderURIs","Array","isArray","InvalidArgumentError","uris","edgeParams","map","param","getRegionShortcode"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/@twilio/voice-sdk/lib/twilio/regions.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * This module describes valid and deprecated regions.\n */\nimport { InvalidArgumentError } from './errors';\n\n/**\n * Valid edges.\n * @private\n */\nexport enum Edge {\n  /**\n   * Public edges\n   */\n  Sydney = 'sydney',\n  SaoPaulo = 'sao-paulo',\n  Dublin = 'dublin',\n  Frankfurt = 'frankfurt',\n  Tokyo = 'tokyo',\n  Singapore = 'singapore',\n  Ashburn = 'ashburn',\n  Umatilla = 'umatilla',\n  Roaming = 'roaming',\n  /**\n   * Interconnect edges\n   */\n  AshburnIx = 'ashburn-ix',\n  SanJoseIx = 'san-jose-ix',\n  LondonIx = 'london-ix',\n  FrankfurtIx = 'frankfurt-ix',\n  SingaporeIx = 'singapore-ix',\n  SydneyIx = 'sydney-ix',\n  TokyoIx = 'tokyo-ix',\n}\n\n/**\n * Valid current regions.\n *\n * @deprecated\n *\n * CLIENT-6831\n * This is no longer used or updated for checking validity of regions in the\n * SDK. We now allow any string to be passed for region. Invalid regions won't\n * be able to connect, and won't throw an exception.\n *\n * CLIENT-7519\n * This is used again to temporarily convert edge values to regions as part of\n * Phase 1 Regional. This is still considered deprecated.\n *\n * @private\n */\nexport enum Region {\n  Au1 = 'au1',\n  Au1Ix = 'au1-ix',\n  Br1 = 'br1',\n  De1 = 'de1',\n  De1Ix = 'de1-ix',\n  Gll = 'gll',\n  Ie1 = 'ie1',\n  Ie1Ix = 'ie1-ix',\n  Ie1Tnx = 'ie1-tnx',\n  Jp1 = 'jp1',\n  Jp1Ix = 'jp1-ix',\n  Sg1 = 'sg1',\n  Sg1Ix = 'sg1-ix',\n  Sg1Tnx = 'sg1-tnx',\n  Us1 = 'us1',\n  Us1Ix = 'us1-ix',\n  Us1Tnx = 'us1-tnx',\n  Us2 = 'us2',\n  Us2Ix = 'us2-ix',\n  Us2Tnx = 'us2-tnx',\n}\n\n/**\n * Region shortcodes. Maps the full region name from AWS to the Twilio shortcode.\n * @private\n */\nexport const regionShortcodes: { [index: string]: Region } = {\n  ASIAPAC_SINGAPORE: Region.Sg1,\n  ASIAPAC_SYDNEY: Region.Au1,\n  ASIAPAC_TOKYO: Region.Jp1,\n  EU_FRANKFURT: Region.De1,\n  EU_IRELAND: Region.Ie1,\n  SOUTH_AMERICA_SAO_PAULO: Region.Br1,\n  US_EAST_VIRGINIA: Region.Us1,\n  US_WEST_OREGON: Region.Us2,\n};\n\n/**\n * Region to edge mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexport const regionToEdge: Record<Region, Edge> = {\n  [Region.Au1]: Edge.Sydney,\n  [Region.Br1]: Edge.SaoPaulo,\n  [Region.Ie1]: Edge.Dublin,\n  [Region.De1]: Edge.Frankfurt,\n  [Region.Jp1]: Edge.Tokyo,\n  [Region.Sg1]: Edge.Singapore,\n  [Region.Us1]: Edge.Ashburn,\n  [Region.Us2]: Edge.Umatilla,\n  [Region.Gll]: Edge.Roaming,\n  /**\n   * Interconnect edges\n   */\n  [Region.Us1Ix]: Edge.AshburnIx,\n  [Region.Us2Ix]: Edge.SanJoseIx,\n  [Region.Ie1Ix]: Edge.LondonIx,\n  [Region.De1Ix]: Edge.FrankfurtIx,\n  [Region.Sg1Ix]: Edge.SingaporeIx,\n  [Region.Au1Ix]: Edge.SydneyIx,\n  [Region.Jp1Ix]: Edge.TokyoIx,\n  /**\n   * Tnx regions\n   */\n  [Region.Us1Tnx]: Edge.AshburnIx,\n  [Region.Us2Tnx]: Edge.AshburnIx,\n  [Region.Ie1Tnx]: Edge.LondonIx,\n  [Region.Sg1Tnx]: Edge.SingaporeIx,\n};\n\n/**\n * The default edge to connect to and create a chunder uri from, if the edge\n * parameter is not specified during setup in `Device`.\n * @constant\n */\nexport const defaultEdge: Edge = Edge.Roaming;\n\n/**\n * The default event gateway URI to publish to.\n * @constant\n * @private\n */\nconst defaultEventGatewayURI: string = 'eventgw.twilio.com';\n\n/**\n * String template for an edge chunder URI\n * @param edge - The edge.\n */\nfunction createChunderEdgeURI(edge: string): string {\n  return `voice-js.${edge}.twilio.com`;\n}\n\n/**\n * String template for a region insights URI\n * @param region - The region.\n */\nexport function createEventGatewayURI(region: string): string {\n  return region\n    ? `eventgw.${region}.twilio.com`\n    : defaultEventGatewayURI;\n}\n\n/**\n * Create a signaling endpoint URL to connect a websocket to from a chunder URI.\n * @param uri the chunder URI to create a signaling endpoint URL for\n */\nexport function createSignalingEndpointURL(uri: string): string {\n  return `wss://${uri}/signal`;\n}\n\n/**\n * Get the URI associated with the passed edge.\n * @private\n * @param edge - A string or an array of edge values\n * @returns An array of chunder URIs\n */\nexport function getChunderURIs(edge?: string[] | string): string[] {\n  if (!!edge && typeof edge !== 'string' && !Array.isArray(edge)) {\n    throw new InvalidArgumentError(\n      'If `edge` is provided, it must be of type `string` or an array of strings.',\n    );\n  }\n\n  let uris: string[];\n\n  if (edge) {\n    const edgeParams = Array.isArray(edge) ? edge : [edge];\n    uris = edgeParams.map((param: Edge) => createChunderEdgeURI(param));\n  } else {\n    uris = [createChunderEdgeURI(defaultEdge)];\n  }\n\n  return uris;\n}\n\n/**\n * Get the region shortcode by its full AWS region string.\n *\n * @private\n * @param region - The region's full AWS string.\n */\nexport function getRegionShortcode(region: string): Region | null {\n  return regionShortcodes[region] || null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}