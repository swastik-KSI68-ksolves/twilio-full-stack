{"ast":null,"code":"\"use strict\";\n\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n// @ts-nocheck\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar eventtarget_1 = require(\"./eventtarget\");\nvar POLL_INTERVAL_MS = 500;\nvar nativeMediaDevices = null;\n/**\n * Make a custom MediaDevices object, and proxy through existing functionality. If\n *   devicechange is present, we simply reemit the event. If not, we will do the\n *   detection ourselves and fire the event when necessary. The same logic exists\n *   for deviceinfochange for consistency, however deviceinfochange is our own event\n *   so it is unlikely that it will ever be native. The w3c spec for devicechange\n *   is unclear as to whether MediaDeviceInfo changes (such as label) will\n *   trigger the devicechange event. We have an open question on this here:\n *   https://bugs.chromium.org/p/chromium/issues/detail?id=585096\n */\nvar MediaDevicesShim = /** @class */function (_super) {\n  __extends(MediaDevicesShim, _super);\n  function MediaDevicesShim() {\n    var _this = _super.call(this) || this;\n    _this._defineEventHandler('devicechange');\n    _this._defineEventHandler('deviceinfochange');\n    var knownDevices = [];\n    Object.defineProperties(_this, {\n      _deviceChangeIsNative: {\n        value: reemitNativeEvent(_this, 'devicechange')\n      },\n      _deviceInfoChangeIsNative: {\n        value: reemitNativeEvent(_this, 'deviceinfochange')\n      },\n      _knownDevices: {\n        value: knownDevices\n      },\n      _pollInterval: {\n        value: null,\n        writable: true\n      }\n    });\n    if (typeof nativeMediaDevices.enumerateDevices === 'function') {\n      nativeMediaDevices.enumerateDevices().then(function (devices) {\n        devices.sort(sortDevicesById).forEach(function (d) {\n          return knownDevices.push(d);\n        });\n      });\n    }\n    _this._eventEmitter.on('newListener', function maybeStartPolling(eventName) {\n      if (eventName !== 'devicechange' && eventName !== 'deviceinfochange') {\n        return;\n      }\n      // TODO: Remove polling in the next major release.\n      this._pollInterval = this._pollInterval || setInterval(sampleDevices.bind(null, this), POLL_INTERVAL_MS);\n    }.bind(_this));\n    _this._eventEmitter.on('removeListener', function maybeStopPolling() {\n      if (this._pollInterval && !hasChangeListeners(this)) {\n        clearInterval(this._pollInterval);\n        this._pollInterval = null;\n      }\n    }.bind(_this));\n    return _this;\n  }\n  return MediaDevicesShim;\n}(eventtarget_1.default);\nMediaDevicesShim.prototype.enumerateDevices = function enumerateDevices() {\n  if (nativeMediaDevices && typeof nativeMediaDevices.enumerateDevices === 'function') {\n    return nativeMediaDevices.enumerateDevices.apply(nativeMediaDevices, arguments);\n  }\n  return null;\n};\nMediaDevicesShim.prototype.getUserMedia = function getUserMedia() {\n  return nativeMediaDevices.getUserMedia.apply(nativeMediaDevices, arguments);\n};\nfunction deviceInfosHaveChanged(newDevices, oldDevices) {\n  newDevices = newDevices.filter(function (d) {\n    return d.kind === 'audioinput' || d.kind === 'audiooutput';\n  });\n  oldDevices = oldDevices.filter(function (d) {\n    return d.kind === 'audioinput' || d.kind === 'audiooutput';\n  });\n  // On certain browsers, we cannot use deviceId as a key for comparison.\n  // It's missing along with the device label if the customer has not granted permission.\n  // The following checks whether some old devices have empty labels and if they are now available.\n  // This means, the user has granted permissions and the device info have changed.\n  if (oldDevices.some(function (d) {\n    return !d.deviceId;\n  }) && newDevices.some(function (d) {\n    return !!d.deviceId;\n  })) {\n    return true;\n  }\n  // Use both deviceId and \"kind\" to create a unique key\n  // since deviceId is not unique across different kinds of devices.\n  var oldLabels = oldDevices.reduce(function (map, device) {\n    return map.set(device.deviceId + \"-\" + device.kind, device.label);\n  }, new Map());\n  return newDevices.some(function (device) {\n    var oldLabel = oldLabels.get(device.deviceId + \"-\" + device.kind);\n    return typeof oldLabel !== 'undefined' && oldLabel !== device.label;\n  });\n}\nfunction devicesHaveChanged(newDevices, oldDevices) {\n  return newDevices.length !== oldDevices.length || propertyHasChanged('deviceId', newDevices, oldDevices);\n}\nfunction hasChangeListeners(mediaDevices) {\n  return ['devicechange', 'deviceinfochange'].reduce(function (count, event) {\n    return count + mediaDevices._eventEmitter.listenerCount(event);\n  }, 0) > 0;\n}\n/**\n * Sample the current set of devices and emit devicechange event if a device has been\n *   added or removed, and deviceinfochange if a device's label has changed.\n * @param {MediaDevicesShim} mediaDevices\n * @private\n */\nfunction sampleDevices(mediaDevices) {\n  nativeMediaDevices.enumerateDevices().then(function (newDevices) {\n    var knownDevices = mediaDevices._knownDevices;\n    var oldDevices = knownDevices.slice();\n    // Replace known devices in-place\n    [].splice.apply(knownDevices, [0, knownDevices.length].concat(newDevices.sort(sortDevicesById)));\n    if (!mediaDevices._deviceChangeIsNative && devicesHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('devicechange'));\n    }\n    if (!mediaDevices._deviceInfoChangeIsNative && deviceInfosHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('deviceinfochange'));\n    }\n  });\n}\n/**\n * Accepts two sorted arrays and the name of a property to compare on objects from each.\n *   Arrays should also be of the same length.\n * @param {string} propertyName - Name of the property to compare on each object\n * @param {Array<Object>} as - The left-side array of objects to compare.\n * @param {Array<Object>} bs - The right-side array of objects to compare.\n * @private\n * @returns {boolean} True if the property of any object in array A is different than\n *   the same property of its corresponding object in array B.\n */\nfunction propertyHasChanged(propertyName, as, bs) {\n  return as.some(function (a, i) {\n    return a[propertyName] !== bs[i][propertyName];\n  });\n}\n/**\n * Re-emit the native event, if the native mediaDevices has the corresponding property.\n * @param {MediaDevicesShim} mediaDevices\n * @param {string} eventName - Name of the event\n * @private\n * @returns {boolean} Whether the native mediaDevice had the corresponding property\n */\nfunction reemitNativeEvent(mediaDevices, eventName) {\n  var methodName = \"on\" + eventName;\n  function dispatchEvent(event) {\n    mediaDevices.dispatchEvent(event);\n  }\n  if (methodName in nativeMediaDevices) {\n    // Use addEventListener if it's available so we don't stomp on any other listeners\n    // for this event. Currently, navigator.mediaDevices.addEventListener does not exist in Safari.\n    if ('addEventListener' in nativeMediaDevices) {\n      nativeMediaDevices.addEventListener(eventName, dispatchEvent);\n    } else {\n      nativeMediaDevices[methodName] = dispatchEvent;\n    }\n    return true;\n  }\n  return false;\n}\nfunction sortDevicesById(a, b) {\n  return a.deviceId < b.deviceId;\n}\nvar getMediaDevicesInstance = function () {\n  nativeMediaDevices = typeof navigator !== 'undefined' ? navigator.mediaDevices : null;\n  return nativeMediaDevices ? new MediaDevicesShim() : null;\n};\nexports.default = getMediaDevicesInstance;","map":{"version":3,"names":["eventtarget_1","require","POLL_INTERVAL_MS","nativeMediaDevices","MediaDevicesShim","_super","__extends","_this","call","_defineEventHandler","knownDevices","Object","defineProperties","_deviceChangeIsNative","value","reemitNativeEvent","_deviceInfoChangeIsNative","_knownDevices","_pollInterval","writable","enumerateDevices","then","devices","sort","sortDevicesById","forEach","d","push","_eventEmitter","on","maybeStartPolling","eventName","setInterval","sampleDevices","bind","maybeStopPolling","hasChangeListeners","clearInterval","default","prototype","apply","arguments","getUserMedia","deviceInfosHaveChanged","newDevices","oldDevices","filter","kind","some","deviceId","oldLabels","reduce","map","device","set","label","Map","oldLabel","get","devicesHaveChanged","length","propertyHasChanged","mediaDevices","count","event","listenerCount","slice","splice","concat","dispatchEvent","Event","propertyName","as","bs","a","i","methodName","addEventListener","b","getMediaDevicesInstance","navigator","exports"],"sources":["/home/swastikksi/Documents/react/twilio-Ksolves/node_modules/@twilio/voice-sdk/lib/twilio/shims/mediadevices.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n// @ts-nocheck\n\nimport EventTarget from './eventtarget';\n\nconst POLL_INTERVAL_MS = 500;\n\nlet nativeMediaDevices = null;\n\n/**\n * Make a custom MediaDevices object, and proxy through existing functionality. If\n *   devicechange is present, we simply reemit the event. If not, we will do the\n *   detection ourselves and fire the event when necessary. The same logic exists\n *   for deviceinfochange for consistency, however deviceinfochange is our own event\n *   so it is unlikely that it will ever be native. The w3c spec for devicechange\n *   is unclear as to whether MediaDeviceInfo changes (such as label) will\n *   trigger the devicechange event. We have an open question on this here:\n *   https://bugs.chromium.org/p/chromium/issues/detail?id=585096\n */\nclass MediaDevicesShim extends EventTarget {\n  constructor() {\n    super();\n\n    this._defineEventHandler('devicechange');\n    this._defineEventHandler('deviceinfochange');\n\n    const knownDevices = [];\n    Object.defineProperties(this, {\n      _deviceChangeIsNative: { value: reemitNativeEvent(this, 'devicechange') },\n      _deviceInfoChangeIsNative: { value: reemitNativeEvent(this, 'deviceinfochange') },\n      _knownDevices: { value: knownDevices },\n      _pollInterval: {\n        value: null,\n        writable: true,\n      },\n    });\n\n    if (typeof nativeMediaDevices.enumerateDevices === 'function') {\n      nativeMediaDevices.enumerateDevices().then(devices => {\n        devices.sort(sortDevicesById).forEach(d => knownDevices.push(d));\n      });\n    }\n\n    this._eventEmitter.on('newListener', function maybeStartPolling(eventName) {\n      if (eventName !== 'devicechange' && eventName !== 'deviceinfochange') {\n        return;\n      }\n\n      // TODO: Remove polling in the next major release.\n      this._pollInterval = this._pollInterval\n        || setInterval(sampleDevices.bind(null, this), POLL_INTERVAL_MS);\n    }.bind(this));\n\n    this._eventEmitter.on('removeListener', function maybeStopPolling() {\n      if (this._pollInterval && !hasChangeListeners(this)) {\n        clearInterval(this._pollInterval);\n        this._pollInterval = null;\n      }\n    }.bind(this));\n  }\n}\n\nMediaDevicesShim.prototype.enumerateDevices = function enumerateDevices() {\n  if (nativeMediaDevices && typeof nativeMediaDevices.enumerateDevices === 'function') {\n    return nativeMediaDevices.enumerateDevices(...arguments);\n  }\n  return null;\n};\n\nMediaDevicesShim.prototype.getUserMedia = function getUserMedia() {\n  return nativeMediaDevices.getUserMedia(...arguments);\n};\n\nfunction deviceInfosHaveChanged(newDevices, oldDevices) {\n  newDevices = newDevices.filter(d => d.kind === 'audioinput' || d.kind === 'audiooutput');\n  oldDevices = oldDevices.filter(d => d.kind === 'audioinput' || d.kind === 'audiooutput');\n\n  // On certain browsers, we cannot use deviceId as a key for comparison.\n  // It's missing along with the device label if the customer has not granted permission.\n  // The following checks whether some old devices have empty labels and if they are now available.\n  // This means, the user has granted permissions and the device info have changed.\n  if (oldDevices.some(d => !d.deviceId) &&\n    newDevices.some(d => !!d.deviceId)) {\n    return true;\n  }\n\n  // Use both deviceId and \"kind\" to create a unique key\n  // since deviceId is not unique across different kinds of devices.\n  const oldLabels = oldDevices.reduce((map, device) =>\n    map.set(`${device.deviceId}-${device.kind}`, device.label), new Map());\n\n  return newDevices.some(device => {\n    const oldLabel = oldLabels.get(`${device.deviceId}-${device.kind}`);\n    return typeof oldLabel !== 'undefined' && oldLabel !== device.label;\n  });\n}\n\nfunction devicesHaveChanged(newDevices, oldDevices) {\n  return newDevices.length !== oldDevices.length\n    || propertyHasChanged('deviceId', newDevices, oldDevices);\n}\n\nfunction hasChangeListeners(mediaDevices) {\n  return ['devicechange', 'deviceinfochange'].reduce((count, event) => count + mediaDevices._eventEmitter.listenerCount(event), 0) > 0;\n}\n\n/**\n * Sample the current set of devices and emit devicechange event if a device has been\n *   added or removed, and deviceinfochange if a device's label has changed.\n * @param {MediaDevicesShim} mediaDevices\n * @private\n */\nfunction sampleDevices(mediaDevices) {\n  nativeMediaDevices.enumerateDevices().then(newDevices => {\n    const knownDevices = mediaDevices._knownDevices;\n    const oldDevices = knownDevices.slice();\n\n    // Replace known devices in-place\n    [].splice.apply(knownDevices, [0, knownDevices.length]\n      .concat(newDevices.sort(sortDevicesById)));\n\n    if (!mediaDevices._deviceChangeIsNative\n      && devicesHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('devicechange'));\n    }\n\n    if (!mediaDevices._deviceInfoChangeIsNative\n      && deviceInfosHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('deviceinfochange'));\n    }\n  });\n}\n\n/**\n * Accepts two sorted arrays and the name of a property to compare on objects from each.\n *   Arrays should also be of the same length.\n * @param {string} propertyName - Name of the property to compare on each object\n * @param {Array<Object>} as - The left-side array of objects to compare.\n * @param {Array<Object>} bs - The right-side array of objects to compare.\n * @private\n * @returns {boolean} True if the property of any object in array A is different than\n *   the same property of its corresponding object in array B.\n */\nfunction propertyHasChanged(propertyName, as, bs) {\n  return as.some((a, i) => a[propertyName] !== bs[i][propertyName]);\n}\n\n/**\n * Re-emit the native event, if the native mediaDevices has the corresponding property.\n * @param {MediaDevicesShim} mediaDevices\n * @param {string} eventName - Name of the event\n * @private\n * @returns {boolean} Whether the native mediaDevice had the corresponding property\n */\nfunction reemitNativeEvent(mediaDevices, eventName) {\n  const methodName = `on${eventName}`;\n\n  function dispatchEvent(event) {\n    mediaDevices.dispatchEvent(event);\n  }\n\n  if (methodName in nativeMediaDevices) {\n    // Use addEventListener if it's available so we don't stomp on any other listeners\n    // for this event. Currently, navigator.mediaDevices.addEventListener does not exist in Safari.\n    if ('addEventListener' in nativeMediaDevices) {\n      nativeMediaDevices.addEventListener(eventName, dispatchEvent);\n    } else {\n      nativeMediaDevices[methodName] = dispatchEvent;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction sortDevicesById(a, b) {\n  return a.deviceId < b.deviceId;\n}\n\nconst getMediaDevicesInstance = () => {\n  nativeMediaDevices = typeof navigator !== 'undefined' ? navigator.mediaDevices : null;\n  return nativeMediaDevices ? new MediaDevicesShim() : null;\n};\n\nexport default getMediaDevicesInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}